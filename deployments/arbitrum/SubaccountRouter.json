{
  "address": "0x9F48160eDc3Ad78F4cA0E3FDF54A75D8FB228452",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract Router",
          "name": "_router",
          "type": "address"
        },
        {
          "internalType": "contract RoleStore",
          "name": "_roleStore",
          "type": "address"
        },
        {
          "internalType": "contract DataStore",
          "name": "_dataStore",
          "type": "address"
        },
        {
          "internalType": "contract EventEmitter",
          "name": "_eventEmitter",
          "type": "address"
        },
        {
          "internalType": "contract IOrderHandler",
          "name": "_orderHandler",
          "type": "address"
        },
        {
          "internalType": "contract OrderVault",
          "name": "_orderVault",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "key",
          "type": "bytes32"
        }
      ],
      "name": "DisabledFeature",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EmptyHoldingAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EmptyOrder",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EmptyReceiver",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "EmptyTokenTranferGasLimit",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "msgSender",
          "type": "address"
        }
      ],
      "name": "InvalidNativeTokenSender",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "expectedReceiver",
          "type": "address"
        }
      ],
      "name": "InvalidReceiverForSubaccountOrder",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "subaccount",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxCount",
          "type": "uint256"
        }
      ],
      "name": "MaxSubaccountActionCountExceeded",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "subaccount",
          "type": "address"
        }
      ],
      "name": "SubaccountNotAuthorized",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "TokenTransferError",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "subaccount",
          "type": "address"
        }
      ],
      "name": "addSubaccount",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "key",
          "type": "bytes32"
        }
      ],
      "name": "cancelOrder",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "receiver",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "cancellationReceiver",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "callbackContract",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "uiFeeReceiver",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "market",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "initialCollateralToken",
                  "type": "address"
                },
                {
                  "internalType": "address[]",
                  "name": "swapPath",
                  "type": "address[]"
                }
              ],
              "internalType": "struct IBaseOrderUtils.CreateOrderParamsAddresses",
              "name": "addresses",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "sizeDeltaUsd",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "initialCollateralDeltaAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "triggerPrice",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "acceptablePrice",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "executionFee",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "callbackGasLimit",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "minOutputAmount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IBaseOrderUtils.CreateOrderParamsNumbers",
              "name": "numbers",
              "type": "tuple"
            },
            {
              "internalType": "enum Order.OrderType",
              "name": "orderType",
              "type": "uint8"
            },
            {
              "internalType": "enum Order.DecreasePositionSwapType",
              "name": "decreasePositionSwapType",
              "type": "uint8"
            },
            {
              "internalType": "bool",
              "name": "isLong",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "shouldUnwrapNativeToken",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "autoCancel",
              "type": "bool"
            },
            {
              "internalType": "bytes32",
              "name": "referralCode",
              "type": "bytes32"
            }
          ],
          "internalType": "struct IBaseOrderUtils.CreateOrderParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "createOrder",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dataStore",
      "outputs": [
        {
          "internalType": "contract DataStore",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "eventEmitter",
      "outputs": [
        {
          "internalType": "contract EventEmitter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes[]",
          "name": "data",
          "type": "bytes[]"
        }
      ],
      "name": "multicall",
      "outputs": [
        {
          "internalType": "bytes[]",
          "name": "results",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "orderHandler",
      "outputs": [
        {
          "internalType": "contract IOrderHandler",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "orderVault",
      "outputs": [
        {
          "internalType": "contract OrderVault",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "subaccount",
          "type": "address"
        }
      ],
      "name": "removeSubaccount",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "roleStore",
      "outputs": [
        {
          "internalType": "contract RoleStore",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "router",
      "outputs": [
        {
          "internalType": "contract Router",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "sendNativeToken",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "sendTokens",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "sendWnt",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "subaccount",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "actionType",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "maxAllowedCount",
          "type": "uint256"
        }
      ],
      "name": "setMaxAllowedSubaccountActionCount",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "subaccount",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "setSubaccountAutoTopUpAmount",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "key",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "sizeDeltaUsd",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "acceptablePrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "triggerPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minOutputAmount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "autoCancel",
          "type": "bool"
        }
      ],
      "name": "updateOrder",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xd89535f746de1d550328c725697eb9c4810a8e94605d56b6b33045d2e3ea270e",
  "receipt": {
    "to": null,
    "from": "0xE7BfFf2aB721264887230037940490351700a068",
    "contractAddress": "0x9F48160eDc3Ad78F4cA0E3FDF54A75D8FB228452",
    "transactionIndex": 9,
    "gasUsed": "4589897",
    "logsBloom": "0x
    "blockHash": "0xe70aff442a6a02a9d9b31395abb9751fbf9988d4aa06ce565bf2bd601058bb6c",
    "transactionHash": "0xd89535f746de1d550328c725697eb9c4810a8e94605d56b6b33045d2e3ea270e",
    "logs": [],
    "blockNumber": 222747236,
    "cumulativeGasUsed": "5669912",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x7452c558d45f8afC8c83dAe62C3f8A5BE19c71f6",
    "0x3c3d99FD298f679DBC2CEcd132b4eC4d0F5e6e72",
    "0xFD70de6b91282D8017aA4E741e9Ae325CAb992d8",
    "0xC8ee91A54287DB53897056e12D9819156D3822Fb",
    "0xB0Fc2a48b873da40e7bc25658e5E6137616AC2Ee",
    "0x31eF83a530Fde1B38EE9A18093A333D8Bbbc40D5"
  ],
  "numDeployments": 3,
  "solcInputHash": "95ed34927f843d6700c121bcc6faf594",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract Router\",\"name\":\"_router\",\"type\":\"address\"},{\"internalType\":\"contract RoleStore\",\"name\":\"_roleStore\",\"type\":\"address\"},{\"internalType\":\"contract DataStore\",\"name\":\"_dataStore\",\"type\":\"address\"},{\"internalType\":\"contract EventEmitter\",\"name\":\"_eventEmitter\",\"type\":\"address\"},{\"internalType\":\"contract IOrderHandler\",\"name\":\"_orderHandler\",\"type\":\"address\"},{\"internalType\":\"contract OrderVault\",\"name\":\"_orderVault\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"DisabledFeature\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EmptyHoldingAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EmptyOrder\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EmptyReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"EmptyTokenTranferGasLimit\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"msgSender\",\"type\":\"address\"}],\"name\":\"InvalidNativeTokenSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"expectedReceiver\",\"type\":\"address\"}],\"name\":\"InvalidReceiverForSubaccountOrder\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"subaccount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxCount\",\"type\":\"uint256\"}],\"name\":\"MaxSubaccountActionCountExceeded\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"subaccount\",\"type\":\"address\"}],\"name\":\"SubaccountNotAuthorized\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenTransferError\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"subaccount\",\"type\":\"address\"}],\"name\":\"addSubaccount\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"name\":\"cancelOrder\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"cancellationReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"callbackContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"uiFeeReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"initialCollateralToken\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"swapPath\",\"type\":\"address[]\"}],\"internalType\":\"struct IBaseOrderUtils.CreateOrderParamsAddresses\",\"name\":\"addresses\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"sizeDeltaUsd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialCollateralDeltaAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"triggerPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"acceptablePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"executionFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"callbackGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minOutputAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct IBaseOrderUtils.CreateOrderParamsNumbers\",\"name\":\"numbers\",\"type\":\"tuple\"},{\"internalType\":\"enum Order.OrderType\",\"name\":\"orderType\",\"type\":\"uint8\"},{\"internalType\":\"enum Order.DecreasePositionSwapType\",\"name\":\"decreasePositionSwapType\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"isLong\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"shouldUnwrapNativeToken\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"autoCancel\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"referralCode\",\"type\":\"bytes32\"}],\"internalType\":\"struct IBaseOrderUtils.CreateOrderParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"createOrder\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dataStore\",\"outputs\":[{\"internalType\":\"contract DataStore\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eventEmitter\",\"outputs\":[{\"internalType\":\"contract EventEmitter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"orderHandler\",\"outputs\":[{\"internalType\":\"contract IOrderHandler\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"orderVault\",\"outputs\":[{\"internalType\":\"contract OrderVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"subaccount\",\"type\":\"address\"}],\"name\":\"removeSubaccount\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roleStore\",\"outputs\":[{\"internalType\":\"contract RoleStore\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract Router\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sendNativeToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sendTokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sendWnt\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"subaccount\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"actionType\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"maxAllowedCount\",\"type\":\"uint256\"}],\"name\":\"setMaxAllowedSubaccountActionCount\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"subaccount\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setSubaccountAutoTopUpAmount\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"sizeDeltaUsd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"acceptablePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"triggerPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minOutputAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"autoCancel\",\"type\":\"bool\"}],\"name\":\"updateOrder\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"multicall(bytes[])\":{\"details\":\"Receives and executes a batch of function calls on this contract.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/router/SubaccountRouter.sol\":\"SubaccountRouter\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        require(value <= type(uint248).max, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        require(value <= type(uint240).max, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        require(value <= type(uint232).max, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        require(value <= type(uint216).max, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        require(value <= type(uint208).max, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        require(value <= type(uint200).max, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        require(value <= type(uint192).max, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        require(value <= type(uint184).max, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        require(value <= type(uint176).max, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        require(value <= type(uint168).max, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        require(value <= type(uint160).max, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        require(value <= type(uint152).max, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        require(value <= type(uint144).max, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        require(value <= type(uint136).max, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        require(value <= type(uint120).max, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        require(value <= type(uint112).max, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        require(value <= type(uint104).max, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        require(value <= type(uint88).max, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        require(value <= type(uint80).max, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        require(value <= type(uint72).max, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        require(value <= type(uint56).max, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        require(value <= type(uint48).max, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        require(value <= type(uint40).max, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        require(value <= type(uint24).max, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x52a8cfb0f5239d11b457dcdd1b326992ef672714ca8da71a157255bddd13f3ad\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9f4357008a8f7d8c8bf5d48902e789637538d8c016be5766610901b4bba81514\",\"license\":\"MIT\"},\"contracts/bank/Bank.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport \\\"../token/TokenUtils.sol\\\";\\nimport \\\"../role/RoleModule.sol\\\";\\n\\n// @title Bank\\n// @dev Contract to handle storing and transferring of tokens\\ncontract Bank is RoleModule {\\n    using SafeERC20 for IERC20;\\n\\n    DataStore public immutable dataStore;\\n\\n    constructor(RoleStore _roleStore, DataStore _dataStore) RoleModule(_roleStore) {\\n        dataStore = _dataStore;\\n    }\\n\\n    receive() external payable {\\n        address wnt = TokenUtils.wnt(dataStore);\\n        if (msg.sender != wnt) {\\n            revert Errors.InvalidNativeTokenSender(msg.sender);\\n        }\\n    }\\n\\n    // @dev transfer tokens from this contract to a receiver\\n    //\\n    // @param token the token to transfer\\n    // @param amount the amount to transfer\\n    // @param receiver the address to transfer to\\n    function transferOut(\\n        address token,\\n        address receiver,\\n        uint256 amount\\n    ) external onlyController {\\n        _transferOut(token, receiver, amount);\\n    }\\n\\n    // @dev transfer tokens from this contract to a receiver\\n    // handles native token transfers as well\\n    //\\n    // @param token the token to transfer\\n    // @param amount the amount to transfer\\n    // @param receiver the address to transfer to\\n    // @param shouldUnwrapNativeToken whether to unwrap the wrapped native token\\n    // before transferring\\n    function transferOut(\\n        address token,\\n        address receiver,\\n        uint256 amount,\\n        bool shouldUnwrapNativeToken\\n    ) external onlyController {\\n        address wnt = TokenUtils.wnt(dataStore);\\n\\n        if (token == wnt && shouldUnwrapNativeToken) {\\n            _transferOutNativeToken(token, receiver, amount);\\n        } else {\\n            _transferOut(token, receiver, amount);\\n        }\\n    }\\n\\n    // @dev transfer native tokens from this contract to a receiver\\n    //\\n    // @param token the token to transfer\\n    // @param amount the amount to transfer\\n    // @param receiver the address to transfer to\\n    // @param shouldUnwrapNativeToken whether to unwrap the wrapped native token\\n    // before transferring\\n    function transferOutNativeToken(\\n        address receiver,\\n        uint256 amount\\n    ) external onlyController {\\n        address wnt = TokenUtils.wnt(dataStore);\\n        _transferOutNativeToken(wnt, receiver, amount);\\n    }\\n\\n    // @dev transfer tokens from this contract to a receiver\\n    //\\n    // @param token the token to transfer\\n    // @param amount the amount to transfer\\n    // @param receiver the address to transfer to\\n    function _transferOut(\\n        address token,\\n        address receiver,\\n        uint256 amount\\n    ) internal {\\n        if (receiver == address(this)) {\\n            revert Errors.SelfTransferNotSupported(receiver);\\n        }\\n\\n        TokenUtils.transfer(dataStore, token, receiver, amount);\\n\\n        _afterTransferOut(token);\\n    }\\n\\n    // @dev unwrap wrapped native tokens and transfer the native tokens from\\n    // this contract to a receiver\\n    //\\n    // @param token the token to transfer\\n    // @param amount the amount to transfer\\n    // @param receiver the address to transfer to\\n    function _transferOutNativeToken(\\n        address token,\\n        address receiver,\\n        uint256 amount\\n    ) internal {\\n        if (receiver == address(this)) {\\n            revert Errors.SelfTransferNotSupported(receiver);\\n        }\\n\\n        TokenUtils.withdrawAndSendNativeToken(\\n            dataStore,\\n            token,\\n            receiver,\\n            amount\\n        );\\n\\n        _afterTransferOut(token);\\n    }\\n\\n    function _afterTransferOut(address /* token */) internal virtual {}\\n}\\n\",\"keccak256\":\"0xd81882fe131c1458e5da01b50190ed60daa1f20acc8a522fc23a51eee4c26f4d\",\"license\":\"BUSL-1.1\"},\"contracts/bank/StrictBank.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport \\\"./Bank.sol\\\";\\n\\n// @title StrictBank\\n// @dev a stricter version of Bank\\n//\\n// the Bank contract does not have functions to validate the amount of tokens\\n// transferred in\\n// the Bank contract will mainly assume that safeTransferFrom calls work correctly\\n// and that tokens were transferred into it if there was no revert\\n//\\n// the StrictBank contract keeps track of its internal token balance\\n// and uses recordTransferIn to compare its change in balance and return\\n// the amount of tokens received\\ncontract StrictBank is Bank {\\n    using SafeERC20 for IERC20;\\n\\n    // used to record token balances to evaluate amounts transferred in\\n    mapping (address => uint256) public tokenBalances;\\n\\n    constructor(RoleStore _roleStore, DataStore _dataStore) Bank(_roleStore, _dataStore) {}\\n\\n    // @dev records a token transfer into the contract\\n    // @param token the token to record the transfer for\\n    // @return the amount of tokens transferred in\\n    function recordTransferIn(address token) external onlyController returns (uint256) {\\n        return _recordTransferIn(token);\\n    }\\n\\n    // @dev this can be used to update the tokenBalances in case of token burns\\n    // or similar balance changes\\n    // the prevBalance is not validated to be more than the nextBalance as this\\n    // could allow someone to block this call by transferring into the contract\\n    // @param token the token to record the burn for\\n    // @return the new balance\\n    function syncTokenBalance(address token) external onlyController returns (uint256) {\\n        uint256 nextBalance = IERC20(token).balanceOf(address(this));\\n        tokenBalances[token] = nextBalance;\\n        return nextBalance;\\n    }\\n\\n    // @dev records a token transfer into the contract\\n    // @param token the token to record the transfer for\\n    // @return the amount of tokens transferred in\\n    function _recordTransferIn(address token) internal returns (uint256) {\\n        uint256 prevBalance = tokenBalances[token];\\n        uint256 nextBalance = IERC20(token).balanceOf(address(this));\\n        tokenBalances[token] = nextBalance;\\n\\n        return nextBalance - prevBalance;\\n    }\\n\\n    // @dev update the internal balance after tokens have been transferred out\\n    // this is called from the Bank contract\\n    // @param token the token that was transferred out\\n    function _afterTransferOut(address token) internal override {\\n        tokenBalances[token] = IERC20(token).balanceOf(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x4ebe920c2925c1611b60de831636c5761a9fc90ae175ec8a7351fe2d6db13edd\",\"license\":\"BUSL-1.1\"},\"contracts/chain/ArbSys.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\n// @title ArbSys\\n// @dev Globally available variables for Arbitrum may have both an L1 and an L2\\n// value, the ArbSys interface is used to retrieve the L2 value\\ninterface ArbSys {\\n    function arbBlockNumber() external view returns (uint256);\\n    function arbBlockHash(uint256 blockNumber) external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x97a2fcc4828af974d9e763db893b1188fec4d964ec3896611284678631dc5ffd\",\"license\":\"BUSL-1.1\"},\"contracts/chain/Chain.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ArbSys.sol\\\";\\n\\n// @title Chain\\n// @dev Wrap the calls to retrieve chain variables to handle differences\\n// between chain implementations\\nlibrary Chain {\\n    // if the ARBITRUM_CHAIN_ID changes, a new version of this library\\n    // and contracts depending on it would need to be deployed\\n    uint256 public constant ARBITRUM_CHAIN_ID = 42161;\\n    uint256 public constant ARBITRUM_SEPOLIA_CHAIN_ID = 421614;\\n\\n    ArbSys public constant arbSys = ArbSys(address(100));\\n\\n    // @dev return the current block's timestamp\\n    // @return the current block's timestamp\\n    function currentTimestamp() internal view returns (uint256) {\\n        return block.timestamp;\\n    }\\n\\n    // @dev return the current block's number\\n    // @return the current block's number\\n    function currentBlockNumber() internal view returns (uint256) {\\n        if (shouldUseArbSysValues()) {\\n            return arbSys.arbBlockNumber();\\n        }\\n\\n        return block.number;\\n    }\\n\\n    // @dev return the current block's hash\\n    // @return the current block's hash\\n    function getBlockHash(uint256 blockNumber) internal view returns (bytes32) {\\n        if (shouldUseArbSysValues()) {\\n            return arbSys.arbBlockHash(blockNumber);\\n        }\\n\\n        return blockhash(blockNumber);\\n    }\\n\\n    function shouldUseArbSysValues() internal view returns (bool) {\\n        return block.chainid == ARBITRUM_CHAIN_ID || block.chainid == ARBITRUM_SEPOLIA_CHAIN_ID;\\n    }\\n}\\n\",\"keccak256\":\"0xd426e6135ef3d529232a2b6101e388a353ad2a3474b7b79cbf1e73825427a646\",\"license\":\"BUSL-1.1\"},\"contracts/data/DataStore.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../role/RoleModule.sol\\\";\\nimport \\\"../utils/Calc.sol\\\";\\nimport \\\"../utils/Printer.sol\\\";\\n\\n// @title DataStore\\n// @dev DataStore for all general state values\\ncontract DataStore is RoleModule {\\n    using SafeCast for int256;\\n\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using EnumerableSet for EnumerableSet.UintSet;\\n    using EnumerableValues for EnumerableSet.Bytes32Set;\\n    using EnumerableValues for EnumerableSet.AddressSet;\\n    using EnumerableValues for EnumerableSet.UintSet;\\n\\n    // store for uint values\\n    mapping(bytes32 => uint256) public uintValues;\\n    // store for int values\\n    mapping(bytes32 => int256) public intValues;\\n    // store for address values\\n    mapping(bytes32 => address) public addressValues;\\n    // store for bool values\\n    mapping(bytes32 => bool) public boolValues;\\n    // store for string values\\n    mapping(bytes32 => string) public stringValues;\\n    // store for bytes32 values\\n    mapping(bytes32 => bytes32) public bytes32Values;\\n\\n    // store for uint[] values\\n    mapping(bytes32 => uint256[]) public uintArrayValues;\\n    // store for int[] values\\n    mapping(bytes32 => int256[]) public intArrayValues;\\n    // store for address[] values\\n    mapping(bytes32 => address[]) public addressArrayValues;\\n    // store for bool[] values\\n    mapping(bytes32 => bool[]) public boolArrayValues;\\n    // store for string[] values\\n    mapping(bytes32 => string[]) public stringArrayValues;\\n    // store for bytes32[] values\\n    mapping(bytes32 => bytes32[]) public bytes32ArrayValues;\\n\\n    // store for bytes32 sets\\n    mapping(bytes32 => EnumerableSet.Bytes32Set) internal bytes32Sets;\\n    // store for address sets\\n    mapping(bytes32 => EnumerableSet.AddressSet) internal addressSets;\\n    // store for uint256 sets\\n    mapping(bytes32 => EnumerableSet.UintSet) internal uintSets;\\n\\n    constructor(RoleStore _roleStore) RoleModule(_roleStore) {}\\n\\n    // @dev get the uint value for the given key\\n    // @param key the key of the value\\n    // @return the uint value for the key\\n    function getUint(bytes32 key) external view returns (uint256) {\\n        return uintValues[key];\\n    }\\n\\n    // @dev set the uint value for the given key\\n    // @param key the key of the value\\n    // @param value the value to set\\n    // @return the uint value for the key\\n    function setUint(bytes32 key, uint256 value) external onlyController returns (uint256) {\\n        uintValues[key] = value;\\n        return value;\\n    }\\n\\n    // @dev delete the uint value for the given key\\n    // @param key the key of the value\\n    function removeUint(bytes32 key) external onlyController {\\n        delete uintValues[key];\\n    }\\n\\n    // @dev add the input int value to the existing uint value\\n    // @param key the key of the value\\n    // @param value the input int value\\n    // @return the new uint value\\n    function applyDeltaToUint(bytes32 key, int256 value, string memory errorMessage) external onlyController returns (uint256) {\\n        uint256 currValue = uintValues[key];\\n        if (value < 0 && (-value).toUint256() > currValue) {\\n            revert(errorMessage);\\n        }\\n        uint256 nextUint = Calc.sumReturnUint256(currValue, value);\\n        uintValues[key] = nextUint;\\n        return nextUint;\\n    }\\n\\n    // @dev add the input uint value to the existing uint value\\n    // @param key the key of the value\\n    // @param value the input int value\\n    // @return the new uint value\\n    function applyDeltaToUint(bytes32 key, uint256 value) external onlyController returns (uint256) {\\n        uint256 currValue = uintValues[key];\\n        uint256 nextUint = currValue + value;\\n        uintValues[key] = nextUint;\\n        return nextUint;\\n    }\\n\\n    // @dev add the input int value to the existing uint value, prevent the uint\\n    // value from becoming negative\\n    // @param key the key of the value\\n    // @param value the input int value\\n    // @return the new uint value\\n    function applyBoundedDeltaToUint(bytes32 key, int256 value) external onlyController returns (uint256) {\\n        uint256 uintValue = uintValues[key];\\n        if (value < 0 && (-value).toUint256() > uintValue) {\\n            uintValues[key] = 0;\\n            return 0;\\n        }\\n\\n        uint256 nextUint = Calc.sumReturnUint256(uintValue, value);\\n        uintValues[key] = nextUint;\\n        return nextUint;\\n    }\\n\\n    // @dev add the input uint value to the existing uint value\\n    // @param key the key of the value\\n    // @param value the input uint value\\n    // @return the new uint value\\n    function incrementUint(bytes32 key, uint256 value) external onlyController returns (uint256) {\\n        uint256 nextUint = uintValues[key] + value;\\n        uintValues[key] = nextUint;\\n        return nextUint;\\n    }\\n\\n    // @dev subtract the input uint value from the existing uint value\\n    // @param key the key of the value\\n    // @param value the input uint value\\n    // @return the new uint value\\n    function decrementUint(bytes32 key, uint256 value) external onlyController returns (uint256) {\\n        uint256 nextUint = uintValues[key] - value;\\n        uintValues[key] = nextUint;\\n        return nextUint;\\n    }\\n\\n    // @dev get the int value for the given key\\n    // @param key the key of the value\\n    // @return the int value for the key\\n    function getInt(bytes32 key) external view returns (int256) {\\n        return intValues[key];\\n    }\\n\\n    // @dev set the int value for the given key\\n    // @param key the key of the value\\n    // @param value the value to set\\n    // @return the int value for the key\\n    function setInt(bytes32 key, int256 value) external onlyController returns (int256) {\\n        intValues[key] = value;\\n        return value;\\n    }\\n\\n    function removeInt(bytes32 key) external onlyController {\\n        delete intValues[key];\\n    }\\n\\n    // @dev add the input int value to the existing int value\\n    // @param key the key of the value\\n    // @param value the input int value\\n    // @return the new int value\\n    function applyDeltaToInt(bytes32 key, int256 value) external onlyController returns (int256) {\\n        int256 nextInt = intValues[key] + value;\\n        intValues[key] = nextInt;\\n        return nextInt;\\n    }\\n\\n    // @dev add the input int value to the existing int value\\n    // @param key the key of the value\\n    // @param value the input int value\\n    // @return the new int value\\n    function incrementInt(bytes32 key, int256 value) external onlyController returns (int256) {\\n        int256 nextInt = intValues[key] + value;\\n        intValues[key] = nextInt;\\n        return nextInt;\\n    }\\n\\n    // @dev subtract the input int value from the existing int value\\n    // @param key the key of the value\\n    // @param value the input int value\\n    // @return the new int value\\n    function decrementInt(bytes32 key, int256 value) external onlyController returns (int256) {\\n        int256 nextInt = intValues[key] - value;\\n        intValues[key] = nextInt;\\n        return nextInt;\\n    }\\n\\n    // @dev get the address value for the given key\\n    // @param key the key of the value\\n    // @return the address value for the key\\n    function getAddress(bytes32 key) external view returns (address) {\\n        return addressValues[key];\\n    }\\n\\n    // @dev set the address value for the given key\\n    // @param key the key of the value\\n    // @param value the value to set\\n    // @return the address value for the key\\n    function setAddress(bytes32 key, address value) external onlyController returns (address) {\\n        addressValues[key] = value;\\n        return value;\\n    }\\n\\n    // @dev delete the address value for the given key\\n    // @param key the key of the value\\n    function removeAddress(bytes32 key) external onlyController {\\n        delete addressValues[key];\\n    }\\n\\n    // @dev get the bool value for the given key\\n    // @param key the key of the value\\n    // @return the bool value for the key\\n    function getBool(bytes32 key) external view returns (bool) {\\n        return boolValues[key];\\n    }\\n\\n    // @dev set the bool value for the given key\\n    // @param key the key of the value\\n    // @param value the value to set\\n    // @return the bool value for the key\\n    function setBool(bytes32 key, bool value) external onlyController returns (bool) {\\n        boolValues[key] = value;\\n        return value;\\n    }\\n\\n    // @dev delete the bool value for the given key\\n    // @param key the key of the value\\n    function removeBool(bytes32 key) external onlyController {\\n        delete boolValues[key];\\n    }\\n\\n    // @dev get the string value for the given key\\n    // @param key the key of the value\\n    // @return the string value for the key\\n    function getString(bytes32 key) external view returns (string memory) {\\n        return stringValues[key];\\n    }\\n\\n    // @dev set the string value for the given key\\n    // @param key the key of the value\\n    // @param value the value to set\\n    // @return the string value for the key\\n    function setString(bytes32 key, string memory value) external onlyController returns (string memory) {\\n        stringValues[key] = value;\\n        return value;\\n    }\\n\\n    // @dev delete the string value for the given key\\n    // @param key the key of the value\\n    function removeString(bytes32 key) external onlyController {\\n        delete stringValues[key];\\n    }\\n\\n    // @dev get the bytes32 value for the given key\\n    // @param key the key of the value\\n    // @return the bytes32 value for the key\\n    function getBytes32(bytes32 key) external view returns (bytes32) {\\n        return bytes32Values[key];\\n    }\\n\\n    // @dev set the bytes32 value for the given key\\n    // @param key the key of the value\\n    // @param value the value to set\\n    // @return the bytes32 value for the key\\n    function setBytes32(bytes32 key, bytes32 value) external onlyController returns (bytes32) {\\n        bytes32Values[key] = value;\\n        return value;\\n    }\\n\\n    // @dev delete the bytes32 value for the given key\\n    // @param key the key of the value\\n    function removeBytes32(bytes32 key) external onlyController {\\n        delete bytes32Values[key];\\n    }\\n\\n    // @dev get the uint array for the given key\\n    // @param key the key of the uint array\\n    // @return the uint array for the key\\n    function getUintArray(bytes32 key) external view returns (uint256[] memory) {\\n        return uintArrayValues[key];\\n    }\\n\\n    // @dev set the uint array for the given key\\n    // @param key the key of the uint array\\n    // @param value the value of the uint array\\n    function setUintArray(bytes32 key, uint256[] memory value) external onlyController {\\n        uintArrayValues[key] = value;\\n    }\\n\\n    // @dev delete the uint array for the given key\\n    // @param key the key of the uint array\\n    // @param value the value of the uint array\\n    function removeUintArray(bytes32 key) external onlyController {\\n        delete uintArrayValues[key];\\n    }\\n\\n    // @dev get the int array for the given key\\n    // @param key the key of the int array\\n    // @return the int array for the key\\n    function getIntArray(bytes32 key) external view returns (int256[] memory) {\\n        return intArrayValues[key];\\n    }\\n\\n    // @dev set the int array for the given key\\n    // @param key the key of the int array\\n    // @param value the value of the int array\\n    function setIntArray(bytes32 key, int256[] memory value) external onlyController {\\n        intArrayValues[key] = value;\\n    }\\n\\n    // @dev delete the int array for the given key\\n    // @param key the key of the int array\\n    // @param value the value of the int array\\n    function removeIntArray(bytes32 key) external onlyController {\\n        delete intArrayValues[key];\\n    }\\n\\n    // @dev get the address array for the given key\\n    // @param key the key of the address array\\n    // @return the address array for the key\\n    function getAddressArray(bytes32 key) external view returns (address[] memory) {\\n        return addressArrayValues[key];\\n    }\\n\\n    // @dev set the address array for the given key\\n    // @param key the key of the address array\\n    // @param value the value of the address array\\n    function setAddressArray(bytes32 key, address[] memory value) external onlyController {\\n        addressArrayValues[key] = value;\\n    }\\n\\n    // @dev delete the address array for the given key\\n    // @param key the key of the address array\\n    // @param value the value of the address array\\n    function removeAddressArray(bytes32 key) external onlyController {\\n        delete addressArrayValues[key];\\n    }\\n\\n    // @dev get the bool array for the given key\\n    // @param key the key of the bool array\\n    // @return the bool array for the key\\n    function getBoolArray(bytes32 key) external view returns (bool[] memory) {\\n        return boolArrayValues[key];\\n    }\\n\\n    // @dev set the bool array for the given key\\n    // @param key the key of the bool array\\n    // @param value the value of the bool array\\n    function setBoolArray(bytes32 key, bool[] memory value) external onlyController {\\n        boolArrayValues[key] = value;\\n    }\\n\\n    // @dev delete the bool array for the given key\\n    // @param key the key of the bool array\\n    // @param value the value of the bool array\\n    function removeBoolArray(bytes32 key) external onlyController {\\n        delete boolArrayValues[key];\\n    }\\n\\n    // @dev get the string array for the given key\\n    // @param key the key of the string array\\n    // @return the string array for the key\\n    function getStringArray(bytes32 key) external view returns (string[] memory) {\\n        return stringArrayValues[key];\\n    }\\n\\n    // @dev set the string array for the given key\\n    // @param key the key of the string array\\n    // @param value the value of the string array\\n    function setStringArray(bytes32 key, string[] memory value) external onlyController {\\n        stringArrayValues[key] = value;\\n    }\\n\\n    // @dev delete the string array for the given key\\n    // @param key the key of the string array\\n    // @param value the value of the string array\\n    function removeStringArray(bytes32 key) external onlyController {\\n        delete stringArrayValues[key];\\n    }\\n\\n    // @dev get the bytes32 array for the given key\\n    // @param key the key of the bytes32 array\\n    // @return the bytes32 array for the key\\n    function getBytes32Array(bytes32 key) external view returns (bytes32[] memory) {\\n        return bytes32ArrayValues[key];\\n    }\\n\\n    // @dev set the bytes32 array for the given key\\n    // @param key the key of the bytes32 array\\n    // @param value the value of the bytes32 array\\n    function setBytes32Array(bytes32 key, bytes32[] memory value) external onlyController {\\n        bytes32ArrayValues[key] = value;\\n    }\\n\\n    // @dev delete the bytes32 array for the given key\\n    // @param key the key of the bytes32 array\\n    // @param value the value of the bytes32 array\\n    function removeBytes32Array(bytes32 key) external onlyController {\\n        delete bytes32ArrayValues[key];\\n    }\\n\\n    // @dev check whether the given value exists in the set\\n    // @param setKey the key of the set\\n    // @param value the value to check\\n    function containsBytes32(bytes32 setKey, bytes32 value) external view returns (bool) {\\n        return bytes32Sets[setKey].contains(value);\\n    }\\n\\n    // @dev get the length of the set\\n    // @param setKey the key of the set\\n    function getBytes32Count(bytes32 setKey) external view returns (uint256) {\\n        return bytes32Sets[setKey].length();\\n    }\\n\\n    // @dev get the values of the set in the given range\\n    // @param setKey the key of the set\\n    // @param the start of the range, values at the start index will be returned\\n    // in the result\\n    // @param the end of the range, values at the end index will not be returned\\n    // in the result\\n    function getBytes32ValuesAt(bytes32 setKey, uint256 start, uint256 end) external view returns (bytes32[] memory) {\\n        return bytes32Sets[setKey].valuesAt(start, end);\\n    }\\n\\n    // @dev add the given value to the set\\n    // @param setKey the key of the set\\n    // @param value the value to add\\n    function addBytes32(bytes32 setKey, bytes32 value) external onlyController {\\n        bytes32Sets[setKey].add(value);\\n    }\\n\\n    // @dev remove the given value from the set\\n    // @param setKey the key of the set\\n    // @param value the value to remove\\n    function removeBytes32(bytes32 setKey, bytes32 value) external onlyController {\\n        bytes32Sets[setKey].remove(value);\\n    }\\n\\n    // @dev check whether the given value exists in the set\\n    // @param setKey the key of the set\\n    // @param value the value to check\\n    function containsAddress(bytes32 setKey, address value) external view returns (bool) {\\n        return addressSets[setKey].contains(value);\\n    }\\n\\n    // @dev get the length of the set\\n    // @param setKey the key of the set\\n    function getAddressCount(bytes32 setKey) external view returns (uint256) {\\n        return addressSets[setKey].length();\\n    }\\n\\n    // @dev get the values of the set in the given range\\n    // @param setKey the key of the set\\n    // @param the start of the range, values at the start index will be returned\\n    // in the result\\n    // @param the end of the range, values at the end index will not be returned\\n    // in the result\\n    function getAddressValuesAt(bytes32 setKey, uint256 start, uint256 end) external view returns (address[] memory) {\\n        return addressSets[setKey].valuesAt(start, end);\\n    }\\n\\n    // @dev add the given value to the set\\n    // @param setKey the key of the set\\n    // @param value the value to add\\n    function addAddress(bytes32 setKey, address value) external onlyController {\\n        addressSets[setKey].add(value);\\n    }\\n\\n    // @dev remove the given value from the set\\n    // @param setKey the key of the set\\n    // @param value the value to remove\\n    function removeAddress(bytes32 setKey, address value) external onlyController {\\n        addressSets[setKey].remove(value);\\n    }\\n\\n    // @dev check whether the given value exists in the set\\n    // @param setKey the key of the set\\n    // @param value the value to check\\n    function containsUint(bytes32 setKey, uint256 value) external view returns (bool) {\\n        return uintSets[setKey].contains(value);\\n    }\\n\\n    // @dev get the length of the set\\n    // @param setKey the key of the set\\n    function getUintCount(bytes32 setKey) external view returns (uint256) {\\n        return uintSets[setKey].length();\\n    }\\n\\n    // @dev get the values of the set in the given range\\n    // @param setKey the key of the set\\n    // @param the start of the range, values at the start index will be returned\\n    // in the result\\n    // @param the end of the range, values at the end index will not be returned\\n    // in the result\\n    function getUintValuesAt(bytes32 setKey, uint256 start, uint256 end) external view returns (uint256[] memory) {\\n        return uintSets[setKey].valuesAt(start, end);\\n    }\\n\\n    // @dev add the given value to the set\\n    // @param setKey the key of the set\\n    // @param value the value to add\\n    function addUint(bytes32 setKey, uint256 value) external onlyController {\\n        uintSets[setKey].add(value);\\n    }\\n\\n    // @dev remove the given value from the set\\n    // @param setKey the key of the set\\n    // @param value the value to remove\\n    function removeUint(bytes32 setKey, uint256 value) external onlyController {\\n        uintSets[setKey].remove(value);\\n    }\\n}\\n\",\"keccak256\":\"0x96796d4d9a697374ecce68d49ad4f88c34645b438b661f19e98408d86f9c48b0\",\"license\":\"BUSL-1.1\"},\"contracts/data/Keys.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\n// @title Keys\\n// @dev Keys for values in the DataStore\\nlibrary Keys {\\n    // @dev key for the address of the wrapped native token\\n    bytes32 public constant WNT = keccak256(abi.encode(\\\"WNT\\\"));\\n    // @dev key for the nonce value used in NonceUtils\\n    bytes32 public constant NONCE = keccak256(abi.encode(\\\"NONCE\\\"));\\n\\n    // @dev for sending received fees\\n    bytes32 public constant FEE_RECEIVER = keccak256(abi.encode(\\\"FEE_RECEIVER\\\"));\\n\\n    // @dev for holding tokens that could not be sent out\\n    bytes32 public constant HOLDING_ADDRESS = keccak256(abi.encode(\\\"HOLDING_ADDRESS\\\"));\\n\\n    // @dev key for the minimum gas for execution error\\n    bytes32 public constant MIN_HANDLE_EXECUTION_ERROR_GAS = keccak256(abi.encode(\\\"MIN_HANDLE_EXECUTION_ERROR_GAS\\\"));\\n\\n    // @dev key for the minimum gas that should be forwarded for execution error handling\\n    bytes32 public constant MIN_HANDLE_EXECUTION_ERROR_GAS_TO_FORWARD = keccak256(abi.encode(\\\"MIN_HANDLE_EXECUTION_ERROR_GAS_TO_FORWARD\\\"));\\n\\n    // @dev key for the min additional gas for execution\\n    bytes32 public constant MIN_ADDITIONAL_GAS_FOR_EXECUTION = keccak256(abi.encode(\\\"MIN_ADDITIONAL_GAS_FOR_EXECUTION\\\"));\\n\\n    // @dev for a global reentrancy guard\\n    bytes32 public constant REENTRANCY_GUARD_STATUS = keccak256(abi.encode(\\\"REENTRANCY_GUARD_STATUS\\\"));\\n\\n    // @dev key for deposit fees\\n    bytes32 public constant DEPOSIT_FEE_TYPE = keccak256(abi.encode(\\\"DEPOSIT_FEE_TYPE\\\"));\\n    // @dev key for withdrawal fees\\n    bytes32 public constant WITHDRAWAL_FEE_TYPE = keccak256(abi.encode(\\\"WITHDRAWAL_FEE_TYPE\\\"));\\n    // @dev key for swap fees\\n    bytes32 public constant SWAP_FEE_TYPE = keccak256(abi.encode(\\\"SWAP_FEE_TYPE\\\"));\\n    // @dev key for position fees\\n    bytes32 public constant POSITION_FEE_TYPE = keccak256(abi.encode(\\\"POSITION_FEE_TYPE\\\"));\\n    // @dev key for ui deposit fees\\n    bytes32 public constant UI_DEPOSIT_FEE_TYPE = keccak256(abi.encode(\\\"UI_DEPOSIT_FEE_TYPE\\\"));\\n    // @dev key for ui withdrawal fees\\n    bytes32 public constant UI_WITHDRAWAL_FEE_TYPE = keccak256(abi.encode(\\\"UI_WITHDRAWAL_FEE_TYPE\\\"));\\n    // @dev key for ui swap fees\\n    bytes32 public constant UI_SWAP_FEE_TYPE = keccak256(abi.encode(\\\"UI_SWAP_FEE_TYPE\\\"));\\n    // @dev key for ui position fees\\n    bytes32 public constant UI_POSITION_FEE_TYPE = keccak256(abi.encode(\\\"UI_POSITION_FEE_TYPE\\\"));\\n\\n    // @dev key for ui fee factor\\n    bytes32 public constant UI_FEE_FACTOR = keccak256(abi.encode(\\\"UI_FEE_FACTOR\\\"));\\n    // @dev key for max ui fee receiver factor\\n    bytes32 public constant MAX_UI_FEE_FACTOR = keccak256(abi.encode(\\\"MAX_UI_FEE_FACTOR\\\"));\\n\\n    // @dev key for the claimable fee amount\\n    bytes32 public constant CLAIMABLE_FEE_AMOUNT = keccak256(abi.encode(\\\"CLAIMABLE_FEE_AMOUNT\\\"));\\n    // @dev key for the claimable ui fee amount\\n    bytes32 public constant CLAIMABLE_UI_FEE_AMOUNT = keccak256(abi.encode(\\\"CLAIMABLE_UI_FEE_AMOUNT\\\"));\\n    // @dev key for the max number of auto cancel orders\\n    bytes32 public constant MAX_AUTO_CANCEL_ORDERS = keccak256(abi.encode(\\\"MAX_AUTO_CANCEL_ORDERS\\\"));\\n    // @dev key for the max total callback gas limit for auto cancel orders\\n    bytes32 public constant MAX_TOTAL_CALLBACK_GAS_LIMIT_FOR_AUTO_CANCEL_ORDERS = keccak256(abi.encode(\\\"MAX_TOTAL_CALLBACK_GAS_LIMIT_FOR_AUTO_CANCEL_ORDERS\\\"));\\n\\n    // @dev key for the market list\\n    bytes32 public constant MARKET_LIST = keccak256(abi.encode(\\\"MARKET_LIST\\\"));\\n\\n    // @dev key for the fee batch list\\n    bytes32 public constant FEE_BATCH_LIST = keccak256(abi.encode(\\\"FEE_BATCH_LIST\\\"));\\n\\n    // @dev key for the deposit list\\n    bytes32 public constant DEPOSIT_LIST = keccak256(abi.encode(\\\"DEPOSIT_LIST\\\"));\\n    // @dev key for the account deposit list\\n    bytes32 public constant ACCOUNT_DEPOSIT_LIST = keccak256(abi.encode(\\\"ACCOUNT_DEPOSIT_LIST\\\"));\\n\\n    // @dev key for the withdrawal list\\n    bytes32 public constant WITHDRAWAL_LIST = keccak256(abi.encode(\\\"WITHDRAWAL_LIST\\\"));\\n    // @dev key for the account withdrawal list\\n    bytes32 public constant ACCOUNT_WITHDRAWAL_LIST = keccak256(abi.encode(\\\"ACCOUNT_WITHDRAWAL_LIST\\\"));\\n\\n    // @dev key for the shift list\\n    bytes32 public constant SHIFT_LIST = keccak256(abi.encode(\\\"SHIFT_LIST\\\"));\\n    // @dev key for the account shift list\\n    bytes32 public constant ACCOUNT_SHIFT_LIST = keccak256(abi.encode(\\\"ACCOUNT_SHIFT_LIST\\\"));\\n\\n    // @dev key for the glv list\\n    bytes32 public constant GLV_LIST = keccak256(abi.encode(\\\"GLV_LIST\\\"));\\n\\n    // @dev key for the glv deposit list\\n    bytes32 public constant GLV_DEPOSIT_LIST = keccak256(abi.encode(\\\"GLV_DEPOSIT_LIST\\\"));\\n    // @dev key for the account glv deposit list\\n    bytes32 public constant ACCOUNT_GLV_DEPOSIT_LIST = keccak256(abi.encode(\\\"ACCOUNT_GLV_DEPOSIT_LIST\\\"));\\n    // @dev key for the account glv supported market list\\n    bytes32 public constant GLV_SUPPORTED_MARKET_LIST = keccak256(abi.encode(\\\"GLV_SUPPORTED_MARKET_LIST\\\"));\\n\\n    // @dev key for the position list\\n    bytes32 public constant POSITION_LIST = keccak256(abi.encode(\\\"POSITION_LIST\\\"));\\n    // @dev key for the account position list\\n    bytes32 public constant ACCOUNT_POSITION_LIST = keccak256(abi.encode(\\\"ACCOUNT_POSITION_LIST\\\"));\\n\\n    // @dev key for the order list\\n    bytes32 public constant ORDER_LIST = keccak256(abi.encode(\\\"ORDER_LIST\\\"));\\n    // @dev key for the account order list\\n    bytes32 public constant ACCOUNT_ORDER_LIST = keccak256(abi.encode(\\\"ACCOUNT_ORDER_LIST\\\"));\\n\\n    // @dev key for the subaccount list\\n    bytes32 public constant SUBACCOUNT_LIST = keccak256(abi.encode(\\\"SUBACCOUNT_LIST\\\"));\\n\\n    // @dev key for the auto cancel order list\\n    bytes32 public constant AUTO_CANCEL_ORDER_LIST = keccak256(abi.encode(\\\"AUTO_CANCEL_ORDER_LIST\\\"));\\n\\n    // @dev key for is market disabled\\n    bytes32 public constant IS_MARKET_DISABLED = keccak256(abi.encode(\\\"IS_MARKET_DISABLED\\\"));\\n\\n    // @dev key for the max swap path length allowed\\n    bytes32 public constant MAX_SWAP_PATH_LENGTH = keccak256(abi.encode(\\\"MAX_SWAP_PATH_LENGTH\\\"));\\n    // @dev key used to store markets observed in a swap path, to ensure that a swap path contains unique markets\\n    bytes32 public constant SWAP_PATH_MARKET_FLAG = keccak256(abi.encode(\\\"SWAP_PATH_MARKET_FLAG\\\"));\\n    // @dev key used to store the min market tokens for the first deposit for a market\\n    bytes32 public constant MIN_MARKET_TOKENS_FOR_FIRST_DEPOSIT = keccak256(abi.encode(\\\"MIN_MARKET_TOKENS_FOR_FIRST_DEPOSIT\\\"));\\n\\n    // @dev key for whether the create glv deposit feature is disabled\\n    bytes32 public constant CREATE_GLV_DEPOSIT_FEATURE_DISABLED = keccak256(abi.encode(\\\"CREATE_GLV_DEPOSIT_FEATURE_DISABLED\\\"));\\n    // @dev key for whether the cancel glv deposit feature is disabled\\n    bytes32 public constant CANCEL_GLV_DEPOSIT_FEATURE_DISABLED = keccak256(abi.encode(\\\"CANCEL_GLV_DEPOSIT_FEATURE_DISABLED\\\"));\\n    // @dev key for whether the execute glv deposit feature is disabled\\n    bytes32 public constant EXECUTE_GLV_DEPOSIT_FEATURE_DISABLED = keccak256(abi.encode(\\\"EXECUTE_GLV_DEPOSIT_FEATURE_DISABLED\\\"));\\n    // @dev key for whether the glv shift feature is disabled\\n    bytes32 public constant GLV_SHIFT_FEATURE_DISABLED = keccak256(abi.encode(\\\"GLV_SHIFT_FEATURE_DISABLED\\\"));\\n\\n    // @dev key for whether the create deposit feature is disabled\\n    bytes32 public constant CREATE_DEPOSIT_FEATURE_DISABLED = keccak256(abi.encode(\\\"CREATE_DEPOSIT_FEATURE_DISABLED\\\"));\\n    // @dev key for whether the cancel deposit feature is disabled\\n    bytes32 public constant CANCEL_DEPOSIT_FEATURE_DISABLED = keccak256(abi.encode(\\\"CANCEL_DEPOSIT_FEATURE_DISABLED\\\"));\\n    // @dev key for whether the execute deposit feature is disabled\\n    bytes32 public constant EXECUTE_DEPOSIT_FEATURE_DISABLED = keccak256(abi.encode(\\\"EXECUTE_DEPOSIT_FEATURE_DISABLED\\\"));\\n\\n    // @dev key for whether the create withdrawal feature is disabled\\n    bytes32 public constant CREATE_WITHDRAWAL_FEATURE_DISABLED = keccak256(abi.encode(\\\"CREATE_WITHDRAWAL_FEATURE_DISABLED\\\"));\\n    // @dev key for whether the cancel withdrawal feature is disabled\\n    bytes32 public constant CANCEL_WITHDRAWAL_FEATURE_DISABLED = keccak256(abi.encode(\\\"CANCEL_WITHDRAWAL_FEATURE_DISABLED\\\"));\\n    // @dev key for whether the execute withdrawal feature is disabled\\n    bytes32 public constant EXECUTE_WITHDRAWAL_FEATURE_DISABLED = keccak256(abi.encode(\\\"EXECUTE_WITHDRAWAL_FEATURE_DISABLED\\\"));\\n    // @dev key for whether the execute atomic withdrawal feature is disabled\\n    bytes32 public constant EXECUTE_ATOMIC_WITHDRAWAL_FEATURE_DISABLED = keccak256(abi.encode(\\\"EXECUTE_ATOMIC_WITHDRAWAL_FEATURE_DISABLED\\\"));\\n\\n    // @dev key for whether the create shift feature is disabled\\n    bytes32 public constant CREATE_SHIFT_FEATURE_DISABLED = keccak256(abi.encode(\\\"CREATE_SHIFT_FEATURE_DISABLED\\\"));\\n    // @dev key for whether the cancel shift feature is disabled\\n    bytes32 public constant CANCEL_SHIFT_FEATURE_DISABLED = keccak256(abi.encode(\\\"CANCEL_SHIFT_FEATURE_DISABLED\\\"));\\n    // @dev key for whether the execute shift feature is disabled\\n    bytes32 public constant EXECUTE_SHIFT_FEATURE_DISABLED = keccak256(abi.encode(\\\"EXECUTE_SHIFT_FEATURE_DISABLED\\\"));\\n\\n    // @dev key for whether the create order feature is disabled\\n    bytes32 public constant CREATE_ORDER_FEATURE_DISABLED = keccak256(abi.encode(\\\"CREATE_ORDER_FEATURE_DISABLED\\\"));\\n    // @dev key for whether the execute order feature is disabled\\n    bytes32 public constant EXECUTE_ORDER_FEATURE_DISABLED = keccak256(abi.encode(\\\"EXECUTE_ORDER_FEATURE_DISABLED\\\"));\\n    // @dev key for whether the execute adl feature is disabled\\n    // for liquidations, it can be disabled by using the EXECUTE_ORDER_FEATURE_DISABLED key with the Liquidation\\n    // order type, ADL orders have a MarketDecrease order type, so a separate key is needed to disable it\\n    bytes32 public constant EXECUTE_ADL_FEATURE_DISABLED = keccak256(abi.encode(\\\"EXECUTE_ADL_FEATURE_DISABLED\\\"));\\n    // @dev key for whether the update order feature is disabled\\n    bytes32 public constant UPDATE_ORDER_FEATURE_DISABLED = keccak256(abi.encode(\\\"UPDATE_ORDER_FEATURE_DISABLED\\\"));\\n    // @dev key for whether the cancel order feature is disabled\\n    bytes32 public constant CANCEL_ORDER_FEATURE_DISABLED = keccak256(abi.encode(\\\"CANCEL_ORDER_FEATURE_DISABLED\\\"));\\n\\n    // @dev key for whether the claim funding fees feature is disabled\\n    bytes32 public constant CLAIM_FUNDING_FEES_FEATURE_DISABLED = keccak256(abi.encode(\\\"CLAIM_FUNDING_FEES_FEATURE_DISABLED\\\"));\\n    // @dev key for whether the claim collateral feature is disabled\\n    bytes32 public constant CLAIM_COLLATERAL_FEATURE_DISABLED = keccak256(abi.encode(\\\"CLAIM_COLLATERAL_FEATURE_DISABLED\\\"));\\n    // @dev key for whether the claim affiliate rewards feature is disabled\\n    bytes32 public constant CLAIM_AFFILIATE_REWARDS_FEATURE_DISABLED = keccak256(abi.encode(\\\"CLAIM_AFFILIATE_REWARDS_FEATURE_DISABLED\\\"));\\n    // @dev key for whether the claim ui fees feature is disabled\\n    bytes32 public constant CLAIM_UI_FEES_FEATURE_DISABLED = keccak256(abi.encode(\\\"CLAIM_UI_FEES_FEATURE_DISABLED\\\"));\\n    // @dev key for whether the subaccount feature is disabled\\n    bytes32 public constant SUBACCOUNT_FEATURE_DISABLED = keccak256(abi.encode(\\\"SUBACCOUNT_FEATURE_DISABLED\\\"));\\n\\n    // @dev key for the minimum required oracle signers for an oracle observation\\n    bytes32 public constant MIN_ORACLE_SIGNERS = keccak256(abi.encode(\\\"MIN_ORACLE_SIGNERS\\\"));\\n    // @dev key for the minimum block confirmations before blockhash can be excluded for oracle signature validation\\n    bytes32 public constant MIN_ORACLE_BLOCK_CONFIRMATIONS = keccak256(abi.encode(\\\"MIN_ORACLE_BLOCK_CONFIRMATIONS\\\"));\\n    // @dev key for the maximum usable oracle price age in seconds\\n    bytes32 public constant MAX_ORACLE_PRICE_AGE = keccak256(abi.encode(\\\"MAX_ORACLE_PRICE_AGE\\\"));\\n    // @dev key for the maximum oracle timestamp range\\n    bytes32 public constant MAX_ORACLE_TIMESTAMP_RANGE = keccak256(abi.encode(\\\"MAX_ORACLE_TIMESTAMP_RANGE\\\"));\\n    // @dev key for the maximum oracle price deviation factor from the ref price\\n    bytes32 public constant MAX_ORACLE_REF_PRICE_DEVIATION_FACTOR = keccak256(abi.encode(\\\"MAX_ORACLE_REF_PRICE_DEVIATION_FACTOR\\\"));\\n    // @dev key for whether an oracle provider is enabled\\n    bytes32 public constant IS_ORACLE_PROVIDER_ENABLED = keccak256(abi.encode(\\\"IS_ORACLE_PROVIDER_ENABLED\\\"));\\n    // @dev key for whether an oracle provider can be used for atomic actions\\n    bytes32 public constant IS_ATOMIC_ORACLE_PROVIDER = keccak256(abi.encode(\\\"IS_ATOMIC_ORACLE_PROVIDER\\\"));\\n    // @dev key for oracle timestamp adjustment\\n    bytes32 public constant ORACLE_TIMESTAMP_ADJUSTMENT = keccak256(abi.encode(\\\"ORACLE_TIMESTAMP_ADJUSTMENT\\\"));\\n    // @dev key for oracle provider for token\\n    bytes32 public constant ORACLE_PROVIDER_FOR_TOKEN = keccak256(abi.encode(\\\"ORACLE_PROVIDER_FOR_TOKEN\\\"));\\n    // @dev key for the chainlink payment token\\n    bytes32 public constant CHAINLINK_PAYMENT_TOKEN = keccak256(abi.encode(\\\"CHAINLINK_PAYMENT_TOKEN\\\"));\\n    // @dev key for the sequencer grace duration\\n    bytes32 public constant SEQUENCER_GRACE_DURATION = keccak256(abi.encode(\\\"SEQUENCER_GRACE_DURATION\\\"));\\n\\n    // @dev key for the percentage amount of position fees to be received\\n    bytes32 public constant POSITION_FEE_RECEIVER_FACTOR = keccak256(abi.encode(\\\"POSITION_FEE_RECEIVER_FACTOR\\\"));\\n    // @dev key for the percentage amount of swap fees to be received\\n    bytes32 public constant SWAP_FEE_RECEIVER_FACTOR = keccak256(abi.encode(\\\"SWAP_FEE_RECEIVER_FACTOR\\\"));\\n    // @dev key for the percentage amount of borrowing fees to be received\\n    bytes32 public constant BORROWING_FEE_RECEIVER_FACTOR = keccak256(abi.encode(\\\"BORROWING_FEE_RECEIVER_FACTOR\\\"));\\n\\n    // @dev key for the base gas limit used when estimating execution fee\\n    bytes32 public constant ESTIMATED_GAS_FEE_BASE_AMOUNT_V2_1 = keccak256(abi.encode(\\\"ESTIMATED_GAS_FEE_BASE_AMOUNT_V2_1\\\"));\\n    // @dev key for the gas limit used for each oracle price when estimating execution fee\\n    bytes32 public constant ESTIMATED_GAS_FEE_PER_ORACLE_PRICE = keccak256(abi.encode(\\\"ESTIMATED_GAS_FEE_PER_ORACLE_PRICE\\\"));\\n    // @dev key for the multiplier used when estimating execution fee\\n    bytes32 public constant ESTIMATED_GAS_FEE_MULTIPLIER_FACTOR = keccak256(abi.encode(\\\"ESTIMATED_GAS_FEE_MULTIPLIER_FACTOR\\\"));\\n\\n    // @dev key for the base gas limit used when calculating execution fee\\n    bytes32 public constant EXECUTION_GAS_FEE_BASE_AMOUNT_V2_1 = keccak256(abi.encode(\\\"EXECUTION_GAS_FEE_BASE_AMOUNT_V2_1\\\"));\\n    // @dev key for the gas limit used for each oracle price\\n    bytes32 public constant EXECUTION_GAS_FEE_PER_ORACLE_PRICE = keccak256(abi.encode(\\\"EXECUTION_GAS_FEE_PER_ORACLE_PRICE\\\"));\\n    // @dev key for the multiplier used when calculating execution fee\\n    bytes32 public constant EXECUTION_GAS_FEE_MULTIPLIER_FACTOR = keccak256(abi.encode(\\\"EXECUTION_GAS_FEE_MULTIPLIER_FACTOR\\\"));\\n\\n    // @dev key for the estimated gas limit for deposits\\n    bytes32 public constant DEPOSIT_GAS_LIMIT = keccak256(abi.encode(\\\"DEPOSIT_GAS_LIMIT\\\"));\\n    // @dev key for the estimated gas limit for withdrawals\\n    bytes32 public constant WITHDRAWAL_GAS_LIMIT = keccak256(abi.encode(\\\"WITHDRAWAL_GAS_LIMIT\\\"));\\n    // @dev key for the estimated gas limit for each glv market\\n    bytes32 public constant GLV_DEPOSIT_GAS_LIMIT = keccak256(abi.encode(\\\"GLV_DEPOSIT_GAS_LIMIT\\\"));\\n    // @dev key for the estimated gas limit for shifts\\n    bytes32 public constant GLV_PER_MARKET_GAS_LIMIT = keccak256(abi.encode(\\\"GLV_PER_MARKET_GAS_LIMIT\\\"));\\n    // @dev key for the estimated gas limit for shifts\\n    bytes32 public constant SHIFT_GAS_LIMIT = keccak256(abi.encode(\\\"SHIFT_GAS_LIMIT\\\"));\\n    // @dev key for the estimated gas limit for single swaps\\n    bytes32 public constant SINGLE_SWAP_GAS_LIMIT = keccak256(abi.encode(\\\"SINGLE_SWAP_GAS_LIMIT\\\"));\\n    // @dev key for the estimated gas limit for increase orders\\n    bytes32 public constant INCREASE_ORDER_GAS_LIMIT = keccak256(abi.encode(\\\"INCREASE_ORDER_GAS_LIMIT\\\"));\\n    // @dev key for the estimated gas limit for decrease orders\\n    bytes32 public constant DECREASE_ORDER_GAS_LIMIT = keccak256(abi.encode(\\\"DECREASE_ORDER_GAS_LIMIT\\\"));\\n    // @dev key for the estimated gas limit for swap orders\\n    bytes32 public constant SWAP_ORDER_GAS_LIMIT = keccak256(abi.encode(\\\"SWAP_ORDER_GAS_LIMIT\\\"));\\n    // @dev key for the amount of gas to forward for token transfers\\n    bytes32 public constant TOKEN_TRANSFER_GAS_LIMIT = keccak256(abi.encode(\\\"TOKEN_TRANSFER_GAS_LIMIT\\\"));\\n    // @dev key for the amount of gas to forward for native token transfers\\n    bytes32 public constant NATIVE_TOKEN_TRANSFER_GAS_LIMIT = keccak256(abi.encode(\\\"NATIVE_TOKEN_TRANSFER_GAS_LIMIT\\\"));\\n    // @dev key for the request expiration time, after which the request will be considered expired\\n    bytes32 public constant REQUEST_EXPIRATION_TIME = keccak256(abi.encode(\\\"REQUEST_EXPIRATION_TIME\\\"));\\n\\n    bytes32 public constant MAX_CALLBACK_GAS_LIMIT = keccak256(abi.encode(\\\"MAX_CALLBACK_GAS_LIMIT\\\"));\\n    bytes32 public constant REFUND_EXECUTION_FEE_GAS_LIMIT = keccak256(abi.encode(\\\"REFUND_EXECUTION_FEE_GAS_LIMIT\\\"));\\n    bytes32 public constant SAVED_CALLBACK_CONTRACT = keccak256(abi.encode(\\\"SAVED_CALLBACK_CONTRACT\\\"));\\n\\n    // @dev key for the min collateral factor\\n    bytes32 public constant MIN_COLLATERAL_FACTOR = keccak256(abi.encode(\\\"MIN_COLLATERAL_FACTOR\\\"));\\n    // @dev key for the min collateral factor for open interest multiplier\\n    bytes32 public constant MIN_COLLATERAL_FACTOR_FOR_OPEN_INTEREST_MULTIPLIER = keccak256(abi.encode(\\\"MIN_COLLATERAL_FACTOR_FOR_OPEN_INTEREST_MULTIPLIER\\\"));\\n    // @dev key for the min allowed collateral in USD\\n    bytes32 public constant MIN_COLLATERAL_USD = keccak256(abi.encode(\\\"MIN_COLLATERAL_USD\\\"));\\n    // @dev key for the min allowed position size in USD\\n    bytes32 public constant MIN_POSITION_SIZE_USD = keccak256(abi.encode(\\\"MIN_POSITION_SIZE_USD\\\"));\\n\\n    // @dev key for the virtual id of tokens\\n    bytes32 public constant VIRTUAL_TOKEN_ID = keccak256(abi.encode(\\\"VIRTUAL_TOKEN_ID\\\"));\\n    // @dev key for the virtual id of markets\\n    bytes32 public constant VIRTUAL_MARKET_ID = keccak256(abi.encode(\\\"VIRTUAL_MARKET_ID\\\"));\\n    // @dev key for the virtual inventory for swaps\\n    bytes32 public constant VIRTUAL_INVENTORY_FOR_SWAPS = keccak256(abi.encode(\\\"VIRTUAL_INVENTORY_FOR_SWAPS\\\"));\\n    // @dev key for the virtual inventory for positions\\n    bytes32 public constant VIRTUAL_INVENTORY_FOR_POSITIONS = keccak256(abi.encode(\\\"VIRTUAL_INVENTORY_FOR_POSITIONS\\\"));\\n\\n    // @dev key for the position impact factor\\n    bytes32 public constant POSITION_IMPACT_FACTOR = keccak256(abi.encode(\\\"POSITION_IMPACT_FACTOR\\\"));\\n    // @dev key for the position impact exponent factor\\n    bytes32 public constant POSITION_IMPACT_EXPONENT_FACTOR = keccak256(abi.encode(\\\"POSITION_IMPACT_EXPONENT_FACTOR\\\"));\\n    // @dev key for the max decrease position impact factor\\n    bytes32 public constant MAX_POSITION_IMPACT_FACTOR = keccak256(abi.encode(\\\"MAX_POSITION_IMPACT_FACTOR\\\"));\\n    // @dev key for the max position impact factor for liquidations\\n    bytes32 public constant MAX_POSITION_IMPACT_FACTOR_FOR_LIQUIDATIONS = keccak256(abi.encode(\\\"MAX_POSITION_IMPACT_FACTOR_FOR_LIQUIDATIONS\\\"));\\n    // @dev key for the position fee factor\\n    bytes32 public constant POSITION_FEE_FACTOR = keccak256(abi.encode(\\\"POSITION_FEE_FACTOR\\\"));\\n    // @dev key for the swap impact factor\\n    bytes32 public constant SWAP_IMPACT_FACTOR = keccak256(abi.encode(\\\"SWAP_IMPACT_FACTOR\\\"));\\n    // @dev key for the swap impact exponent factor\\n    bytes32 public constant SWAP_IMPACT_EXPONENT_FACTOR = keccak256(abi.encode(\\\"SWAP_IMPACT_EXPONENT_FACTOR\\\"));\\n    // @dev key for the swap fee factor\\n    bytes32 public constant SWAP_FEE_FACTOR = keccak256(abi.encode(\\\"SWAP_FEE_FACTOR\\\"));\\n    // @dev key for the atomic swap fee factor\\n    bytes32 public constant ATOMIC_SWAP_FEE_FACTOR = keccak256(abi.encode(\\\"ATOMIC_SWAP_FEE_FACTOR\\\"));\\n    // @dev key for the oracle type\\n    bytes32 public constant ORACLE_TYPE = keccak256(abi.encode(\\\"ORACLE_TYPE\\\"));\\n    // @dev key for open interest\\n    bytes32 public constant OPEN_INTEREST = keccak256(abi.encode(\\\"OPEN_INTEREST\\\"));\\n    // @dev key for open interest in tokens\\n    bytes32 public constant OPEN_INTEREST_IN_TOKENS = keccak256(abi.encode(\\\"OPEN_INTEREST_IN_TOKENS\\\"));\\n    // @dev key for collateral sum for a market\\n    bytes32 public constant COLLATERAL_SUM = keccak256(abi.encode(\\\"COLLATERAL_SUM\\\"));\\n    // @dev key for pool amount\\n    bytes32 public constant POOL_AMOUNT = keccak256(abi.encode(\\\"POOL_AMOUNT\\\"));\\n    // @dev key for max pool amount\\n    bytes32 public constant MAX_POOL_AMOUNT = keccak256(abi.encode(\\\"MAX_POOL_AMOUNT\\\"));\\n    // @dev key for max pool usd for deposit\\n    bytes32 public constant MAX_POOL_USD_FOR_DEPOSIT = keccak256(abi.encode(\\\"MAX_POOL_USD_FOR_DEPOSIT\\\"));\\n    // @dev key for max open interest\\n    bytes32 public constant MAX_OPEN_INTEREST = keccak256(abi.encode(\\\"MAX_OPEN_INTEREST\\\"));\\n    // @dev key for position impact pool amount\\n    bytes32 public constant POSITION_IMPACT_POOL_AMOUNT = keccak256(abi.encode(\\\"POSITION_IMPACT_POOL_AMOUNT\\\"));\\n    // @dev key for min position impact pool amount\\n    bytes32 public constant MIN_POSITION_IMPACT_POOL_AMOUNT = keccak256(abi.encode(\\\"MIN_POSITION_IMPACT_POOL_AMOUNT\\\"));\\n    // @dev key for position impact pool distribution rate\\n    bytes32 public constant POSITION_IMPACT_POOL_DISTRIBUTION_RATE = keccak256(abi.encode(\\\"POSITION_IMPACT_POOL_DISTRIBUTION_RATE\\\"));\\n    // @dev key for position impact pool distributed at\\n    bytes32 public constant POSITION_IMPACT_POOL_DISTRIBUTED_AT = keccak256(abi.encode(\\\"POSITION_IMPACT_POOL_DISTRIBUTED_AT\\\"));\\n    // @dev key for swap impact pool amount\\n    bytes32 public constant SWAP_IMPACT_POOL_AMOUNT = keccak256(abi.encode(\\\"SWAP_IMPACT_POOL_AMOUNT\\\"));\\n    // @dev key for price feed\\n    bytes32 public constant PRICE_FEED = keccak256(abi.encode(\\\"PRICE_FEED\\\"));\\n    // @dev key for price feed multiplier\\n    bytes32 public constant PRICE_FEED_MULTIPLIER = keccak256(abi.encode(\\\"PRICE_FEED_MULTIPLIER\\\"));\\n    // @dev key for price feed heartbeat\\n    bytes32 public constant PRICE_FEED_HEARTBEAT_DURATION = keccak256(abi.encode(\\\"PRICE_FEED_HEARTBEAT_DURATION\\\"));\\n    // @dev key for data stream feed id\\n    bytes32 public constant DATA_STREAM_ID = keccak256(abi.encode(\\\"DATA_STREAM_ID\\\"));\\n    // @dev key for data stream feed multipler\\n    bytes32 public constant DATA_STREAM_MULTIPLIER = keccak256(abi.encode(\\\"DATA_STREAM_MULTIPLIER\\\"));\\n    // @dev key for stable price\\n    bytes32 public constant STABLE_PRICE = keccak256(abi.encode(\\\"STABLE_PRICE\\\"));\\n    // @dev key for reserve factor\\n    bytes32 public constant RESERVE_FACTOR = keccak256(abi.encode(\\\"RESERVE_FACTOR\\\"));\\n    // @dev key for open interest reserve factor\\n    bytes32 public constant OPEN_INTEREST_RESERVE_FACTOR = keccak256(abi.encode(\\\"OPEN_INTEREST_RESERVE_FACTOR\\\"));\\n    // @dev key for max pnl factor\\n    bytes32 public constant MAX_PNL_FACTOR = keccak256(abi.encode(\\\"MAX_PNL_FACTOR\\\"));\\n    // @dev key for max pnl factor\\n    bytes32 public constant MAX_PNL_FACTOR_FOR_TRADERS = keccak256(abi.encode(\\\"MAX_PNL_FACTOR_FOR_TRADERS\\\"));\\n    // @dev key for max pnl factor for adl\\n    bytes32 public constant MAX_PNL_FACTOR_FOR_ADL = keccak256(abi.encode(\\\"MAX_PNL_FACTOR_FOR_ADL\\\"));\\n    // @dev key for min pnl factor for adl\\n    bytes32 public constant MIN_PNL_FACTOR_AFTER_ADL = keccak256(abi.encode(\\\"MIN_PNL_FACTOR_AFTER_ADL\\\"));\\n    // @dev key for max pnl factor\\n    bytes32 public constant MAX_PNL_FACTOR_FOR_DEPOSITS = keccak256(abi.encode(\\\"MAX_PNL_FACTOR_FOR_DEPOSITS\\\"));\\n    // @dev key for max pnl factor for withdrawals\\n    bytes32 public constant MAX_PNL_FACTOR_FOR_WITHDRAWALS = keccak256(abi.encode(\\\"MAX_PNL_FACTOR_FOR_WITHDRAWALS\\\"));\\n    // @dev key for latest ADL at\\n    bytes32 public constant LATEST_ADL_AT = keccak256(abi.encode(\\\"LATEST_ADL_AT\\\"));\\n    // @dev key for whether ADL is enabled\\n    bytes32 public constant IS_ADL_ENABLED = keccak256(abi.encode(\\\"IS_ADL_ENABLED\\\"));\\n    // @dev key for funding factor\\n    bytes32 public constant FUNDING_FACTOR = keccak256(abi.encode(\\\"FUNDING_FACTOR\\\"));\\n    // @dev key for funding exponent factor\\n    bytes32 public constant FUNDING_EXPONENT_FACTOR = keccak256(abi.encode(\\\"FUNDING_EXPONENT_FACTOR\\\"));\\n    // @dev key for saved funding factor\\n    bytes32 public constant SAVED_FUNDING_FACTOR_PER_SECOND = keccak256(abi.encode(\\\"SAVED_FUNDING_FACTOR_PER_SECOND\\\"));\\n    // @dev key for funding increase factor\\n    bytes32 public constant FUNDING_INCREASE_FACTOR_PER_SECOND = keccak256(abi.encode(\\\"FUNDING_INCREASE_FACTOR_PER_SECOND\\\"));\\n    // @dev key for funding decrease factor\\n    bytes32 public constant FUNDING_DECREASE_FACTOR_PER_SECOND = keccak256(abi.encode(\\\"FUNDING_DECREASE_FACTOR_PER_SECOND\\\"));\\n    // @dev key for min funding factor\\n    bytes32 public constant MIN_FUNDING_FACTOR_PER_SECOND = keccak256(abi.encode(\\\"MIN_FUNDING_FACTOR_PER_SECOND\\\"));\\n    // @dev key for max funding factor\\n    bytes32 public constant MAX_FUNDING_FACTOR_PER_SECOND = keccak256(abi.encode(\\\"MAX_FUNDING_FACTOR_PER_SECOND\\\"));\\n    // @dev key for max funding factor limit\\n    bytes32 public constant MAX_FUNDING_FACTOR_PER_SECOND_LIMIT = keccak256(abi.encode(\\\"MAX_FUNDING_FACTOR_PER_SECOND_LIMIT\\\"));\\n    // @dev key for threshold for stable funding\\n    bytes32 public constant THRESHOLD_FOR_STABLE_FUNDING = keccak256(abi.encode(\\\"THRESHOLD_FOR_STABLE_FUNDING\\\"));\\n    // @dev key for threshold for decrease funding\\n    bytes32 public constant THRESHOLD_FOR_DECREASE_FUNDING = keccak256(abi.encode(\\\"THRESHOLD_FOR_DECREASE_FUNDING\\\"));\\n    // @dev key for funding fee amount per size\\n    bytes32 public constant FUNDING_FEE_AMOUNT_PER_SIZE = keccak256(abi.encode(\\\"FUNDING_FEE_AMOUNT_PER_SIZE\\\"));\\n    // @dev key for claimable funding amount per size\\n    bytes32 public constant CLAIMABLE_FUNDING_AMOUNT_PER_SIZE = keccak256(abi.encode(\\\"CLAIMABLE_FUNDING_AMOUNT_PER_SIZE\\\"));\\n    // @dev key for when funding was last updated at\\n    bytes32 public constant FUNDING_UPDATED_AT = keccak256(abi.encode(\\\"FUNDING_UPDATED_AT\\\"));\\n    // @dev key for claimable funding amount\\n    bytes32 public constant CLAIMABLE_FUNDING_AMOUNT = keccak256(abi.encode(\\\"CLAIMABLE_FUNDING_AMOUNT\\\"));\\n    // @dev key for claimable collateral amount\\n    bytes32 public constant CLAIMABLE_COLLATERAL_AMOUNT = keccak256(abi.encode(\\\"CLAIMABLE_COLLATERAL_AMOUNT\\\"));\\n    // @dev key for claimable collateral factor\\n    bytes32 public constant CLAIMABLE_COLLATERAL_FACTOR = keccak256(abi.encode(\\\"CLAIMABLE_COLLATERAL_FACTOR\\\"));\\n    // @dev key for claimable collateral time divisor\\n    bytes32 public constant CLAIMABLE_COLLATERAL_TIME_DIVISOR = keccak256(abi.encode(\\\"CLAIMABLE_COLLATERAL_TIME_DIVISOR\\\"));\\n    // @dev key for claimed collateral amount\\n    bytes32 public constant CLAIMED_COLLATERAL_AMOUNT = keccak256(abi.encode(\\\"CLAIMED_COLLATERAL_AMOUNT\\\"));\\n    // @dev key for optimal usage factor\\n    bytes32 public constant OPTIMAL_USAGE_FACTOR = keccak256(abi.encode(\\\"OPTIMAL_USAGE_FACTOR\\\"));\\n    // @dev key for base borrowing factor\\n    bytes32 public constant BASE_BORROWING_FACTOR = keccak256(abi.encode(\\\"BASE_BORROWING_FACTOR\\\"));\\n    // @dev key for above optimal usage borrowing factor\\n    bytes32 public constant ABOVE_OPTIMAL_USAGE_BORROWING_FACTOR = keccak256(abi.encode(\\\"ABOVE_OPTIMAL_USAGE_BORROWING_FACTOR\\\"));\\n    // @dev key for borrowing factor\\n    bytes32 public constant BORROWING_FACTOR = keccak256(abi.encode(\\\"BORROWING_FACTOR\\\"));\\n    // @dev key for borrowing factor\\n    bytes32 public constant BORROWING_EXPONENT_FACTOR = keccak256(abi.encode(\\\"BORROWING_EXPONENT_FACTOR\\\"));\\n    // @dev key for skipping the borrowing factor for the smaller side\\n    bytes32 public constant SKIP_BORROWING_FEE_FOR_SMALLER_SIDE = keccak256(abi.encode(\\\"SKIP_BORROWING_FEE_FOR_SMALLER_SIDE\\\"));\\n    // @dev key for cumulative borrowing factor\\n    bytes32 public constant CUMULATIVE_BORROWING_FACTOR = keccak256(abi.encode(\\\"CUMULATIVE_BORROWING_FACTOR\\\"));\\n    // @dev key for when the cumulative borrowing factor was last updated at\\n    bytes32 public constant CUMULATIVE_BORROWING_FACTOR_UPDATED_AT = keccak256(abi.encode(\\\"CUMULATIVE_BORROWING_FACTOR_UPDATED_AT\\\"));\\n    // @dev key for total borrowing amount\\n    bytes32 public constant TOTAL_BORROWING = keccak256(abi.encode(\\\"TOTAL_BORROWING\\\"));\\n    // @dev key for affiliate reward\\n    bytes32 public constant AFFILIATE_REWARD = keccak256(abi.encode(\\\"AFFILIATE_REWARD\\\"));\\n    // @dev key for max allowed subaccount action count\\n    bytes32 public constant MAX_ALLOWED_SUBACCOUNT_ACTION_COUNT = keccak256(abi.encode(\\\"MAX_ALLOWED_SUBACCOUNT_ACTION_COUNT\\\"));\\n    // @dev key for subaccount action count\\n    bytes32 public constant SUBACCOUNT_ACTION_COUNT = keccak256(abi.encode(\\\"SUBACCOUNT_ACTION_COUNT\\\"));\\n    // @dev key for subaccount auto top up amount\\n    bytes32 public constant SUBACCOUNT_AUTO_TOP_UP_AMOUNT = keccak256(abi.encode(\\\"SUBACCOUNT_AUTO_TOP_UP_AMOUNT\\\"));\\n    // @dev key for subaccount order action\\n    bytes32 public constant SUBACCOUNT_ORDER_ACTION = keccak256(abi.encode(\\\"SUBACCOUNT_ORDER_ACTION\\\"));\\n    // @dev key for fee distributor swap order token index\\n    bytes32 public constant FEE_DISTRIBUTOR_SWAP_TOKEN_INDEX = keccak256(abi.encode(\\\"FEE_DISTRIBUTOR_SWAP_TOKEN_INDEX\\\"));\\n    // @dev key for fee distributor swap fee batch\\n    bytes32 public constant FEE_DISTRIBUTOR_SWAP_FEE_BATCH = keccak256(abi.encode(\\\"FEE_DISTRIBUTOR_SWAP_FEE_BATCH\\\"));\\n\\n    // @dev key for the glv pending shift\\n    bytes32 public constant GLV_PENDING_SHIFT = keccak256(abi.encode(\\\"GLV_PENDING_SHIFT\\\"));\\n    bytes32 public constant GLV_PENDING_SHIFT_BACKREF = keccak256(abi.encode(\\\"GLV_PENDING_SHIFT_BACKREF\\\"));\\n    // @dev key for the max market token balance usd for glv\\n    bytes32 public constant GLV_MAX_MARKET_TOKEN_BALANCE_USD = keccak256(abi.encode(\\\"GLV_MAX_MARKET_TOKEN_BALANCE_USD\\\"));\\n    // @dev key for is glv market disabled\\n    bytes32 public constant IS_GLV_MARKET_DISABLED = keccak256(abi.encode(\\\"IS_GLV_MARKET_DISABLED\\\"));\\n\\n    // @dev constant for user initiated cancel reason\\n    string public constant USER_INITIATED_CANCEL = \\\"USER_INITIATED_CANCEL\\\";\\n\\n    // @dev key for the account deposit list\\n    // @param account the account for the list\\n    function accountDepositListKey(address account) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(ACCOUNT_DEPOSIT_LIST, account));\\n    }\\n\\n    // @dev key for the account withdrawal list\\n    // @param account the account for the list\\n    function accountWithdrawalListKey(address account) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(ACCOUNT_WITHDRAWAL_LIST, account));\\n    }\\n\\n    // @dev key for the account shift list\\n    // @param account the account for the list\\n    function accountShiftListKey(address account) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(ACCOUNT_SHIFT_LIST, account));\\n    }\\n\\n    // @dev key for the account glv deposit list\\n    // @param account the account for the list\\n    function accountGlvDepositListKey(address account) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(ACCOUNT_GLV_DEPOSIT_LIST, account));\\n    }\\n\\n    // @dev key for the glv supported market list\\n    // @param glv the glv for the supported market list\\n    function glvSupportedMarketListKey(address glv) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(GLV_SUPPORTED_MARKET_LIST, glv));\\n    }\\n\\n    // @dev key for the account position list\\n    // @param account the account for the list\\n    function accountPositionListKey(address account) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(ACCOUNT_POSITION_LIST, account));\\n    }\\n\\n    // @dev key for the account order list\\n    // @param account the account for the list\\n    function accountOrderListKey(address account) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(ACCOUNT_ORDER_LIST, account));\\n    }\\n\\n    // @dev key for the subaccount list\\n    // @param account the account for the list\\n    function subaccountListKey(address account) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(SUBACCOUNT_LIST, account));\\n    }\\n\\n    // @dev key for the auto cancel order list\\n    // @param position key the position key for the list\\n    function autoCancelOrderListKey(bytes32 positionKey) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(AUTO_CANCEL_ORDER_LIST, positionKey));\\n    }\\n\\n    // @dev key for the claimable fee amount\\n    // @param market the market for the fee\\n    // @param token the token for the fee\\n    function claimableFeeAmountKey(address market, address token) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(CLAIMABLE_FEE_AMOUNT, market, token));\\n    }\\n\\n    // @dev key for the claimable ui fee amount\\n    // @param market the market for the fee\\n    // @param token the token for the fee\\n    // @param account the account that can claim the ui fee\\n    function claimableUiFeeAmountKey(address market, address token) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(CLAIMABLE_UI_FEE_AMOUNT, market, token));\\n    }\\n\\n    // @dev key for the claimable ui fee amount for account\\n    // @param market the market for the fee\\n    // @param token the token for the fee\\n    // @param account the account that can claim the ui fee\\n    function claimableUiFeeAmountKey(address market, address token, address account) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(CLAIMABLE_UI_FEE_AMOUNT, market, token, account));\\n    }\\n\\n    // @dev key for deposit gas limit\\n    // @param singleToken whether a single token or pair tokens are being deposited\\n    // @return key for deposit gas limit\\n    function depositGasLimitKey(bool singleToken) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            DEPOSIT_GAS_LIMIT,\\n            singleToken\\n        ));\\n    }\\n\\n    // @dev key for withdrawal gas limit\\n    // @return key for withdrawal gas limit\\n    function withdrawalGasLimitKey() internal pure returns (bytes32) {\\n        return WITHDRAWAL_GAS_LIMIT;\\n    }\\n\\n    // @dev key for shift gas limit\\n    // @return key for shift gas limit\\n    function shiftGasLimitKey() internal pure returns (bytes32) {\\n        return SHIFT_GAS_LIMIT;\\n    }\\n\\n    function glvDepositGasLimitKey() internal pure returns (bytes32) {\\n        return GLV_DEPOSIT_GAS_LIMIT;\\n    }\\n\\n    function glvPerMarketGasLimitKey() internal pure returns (bytes32) {\\n        return GLV_PER_MARKET_GAS_LIMIT;\\n    }\\n\\n    // @dev key for single swap gas limit\\n    // @return key for single swap gas limit\\n    function singleSwapGasLimitKey() internal pure returns (bytes32) {\\n        return SINGLE_SWAP_GAS_LIMIT;\\n    }\\n\\n    // @dev key for increase order gas limit\\n    // @return key for increase order gas limit\\n    function increaseOrderGasLimitKey() internal pure returns (bytes32) {\\n        return INCREASE_ORDER_GAS_LIMIT;\\n    }\\n\\n    // @dev key for decrease order gas limit\\n    // @return key for decrease order gas limit\\n    function decreaseOrderGasLimitKey() internal pure returns (bytes32) {\\n        return DECREASE_ORDER_GAS_LIMIT;\\n    }\\n\\n    // @dev key for swap order gas limit\\n    // @return key for swap order gas limit\\n    function swapOrderGasLimitKey() internal pure returns (bytes32) {\\n        return SWAP_ORDER_GAS_LIMIT;\\n    }\\n\\n    function swapPathMarketFlagKey(address market) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            SWAP_PATH_MARKET_FLAG,\\n            market\\n        ));\\n    }\\n\\n    // @dev key for whether create glv deposit is disabled\\n    // @param the create deposit module\\n    // @return key for whether create deposit is disabled\\n    function createGlvDepositFeatureDisabledKey(address module) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            CREATE_GLV_DEPOSIT_FEATURE_DISABLED,\\n            module\\n        ));\\n    }\\n\\n    // @dev key for whether cancel glv deposit is disabled\\n    // @param the cancel deposit module\\n    // @return key for whether cancel deposit is disabled\\n    function cancelGlvDepositFeatureDisabledKey(address module) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            CANCEL_GLV_DEPOSIT_FEATURE_DISABLED,\\n            module\\n        ));\\n    }\\n\\n    // @dev key for whether execute glv deposit is disabled\\n    // @param the execute deposit module\\n    // @return key for whether execute deposit is disabled\\n    function executeGlvDepositFeatureDisabledKey(address module) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            EXECUTE_GLV_DEPOSIT_FEATURE_DISABLED,\\n            module\\n        ));\\n    }\\n\\n    // @dev key for whether shift deposit is disabled\\n    // @param the execute deposit module\\n    // @return key for whether execute deposit is disabled\\n    function glvShiftFeatureDisabledKey(address module) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            GLV_SHIFT_FEATURE_DISABLED,\\n            module\\n        ));\\n    }\\n\\n\\n    // @dev key for whether create deposit is disabled\\n    // @param the create deposit module\\n    // @return key for whether create deposit is disabled\\n    function createDepositFeatureDisabledKey(address module) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            CREATE_DEPOSIT_FEATURE_DISABLED,\\n            module\\n        ));\\n    }\\n\\n    // @dev key for whether cancel deposit is disabled\\n    // @param the cancel deposit module\\n    // @return key for whether cancel deposit is disabled\\n    function cancelDepositFeatureDisabledKey(address module) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            CANCEL_DEPOSIT_FEATURE_DISABLED,\\n            module\\n        ));\\n    }\\n\\n    // @dev key for whether execute deposit is disabled\\n    // @param the execute deposit module\\n    // @return key for whether execute deposit is disabled\\n    function executeDepositFeatureDisabledKey(address module) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            EXECUTE_DEPOSIT_FEATURE_DISABLED,\\n            module\\n        ));\\n    }\\n\\n    // @dev key for whether create withdrawal is disabled\\n    // @param the create withdrawal module\\n    // @return key for whether create withdrawal is disabled\\n    function createWithdrawalFeatureDisabledKey(address module) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            CREATE_WITHDRAWAL_FEATURE_DISABLED,\\n            module\\n        ));\\n    }\\n\\n    // @dev key for whether cancel withdrawal is disabled\\n    // @param the cancel withdrawal module\\n    // @return key for whether cancel withdrawal is disabled\\n    function cancelWithdrawalFeatureDisabledKey(address module) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            CANCEL_WITHDRAWAL_FEATURE_DISABLED,\\n            module\\n        ));\\n    }\\n\\n    // @dev key for whether execute withdrawal is disabled\\n    // @param the execute withdrawal module\\n    // @return key for whether execute withdrawal is disabled\\n    function executeWithdrawalFeatureDisabledKey(address module) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            EXECUTE_WITHDRAWAL_FEATURE_DISABLED,\\n            module\\n        ));\\n    }\\n\\n    // @dev key for whether execute atomic withdrawal is disabled\\n    // @param the execute atomic withdrawal module\\n    // @return key for whether execute atomic withdrawal is disabled\\n    function executeAtomicWithdrawalFeatureDisabledKey(address module) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            EXECUTE_ATOMIC_WITHDRAWAL_FEATURE_DISABLED,\\n            module\\n        ));\\n    }\\n\\n    // @dev key for whether create shift is disabled\\n    // @param the create shift module\\n    // @return key for whether create shift is disabled\\n    function createShiftFeatureDisabledKey(address module) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            CREATE_SHIFT_FEATURE_DISABLED,\\n            module\\n        ));\\n    }\\n\\n    // @dev key for whether cancel shift is disabled\\n    // @param the cancel shift module\\n    // @return key for whether cancel shift is disabled\\n    function cancelShiftFeatureDisabledKey(address module) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            CANCEL_SHIFT_FEATURE_DISABLED,\\n            module\\n        ));\\n    }\\n\\n    // @dev key for whether execute shift is disabled\\n    // @param the execute shift module\\n    // @return key for whether execute shift is disabled\\n    function executeShiftFeatureDisabledKey(address module) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            EXECUTE_SHIFT_FEATURE_DISABLED,\\n            module\\n        ));\\n    }\\n\\n    // @dev key for whether create order is disabled\\n    // @param the create order module\\n    // @return key for whether create order is disabled\\n    function createOrderFeatureDisabledKey(address module, uint256 orderType) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            CREATE_ORDER_FEATURE_DISABLED,\\n            module,\\n            orderType\\n        ));\\n    }\\n\\n    // @dev key for whether execute order is disabled\\n    // @param the execute order module\\n    // @return key for whether execute order is disabled\\n    function executeOrderFeatureDisabledKey(address module, uint256 orderType) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            EXECUTE_ORDER_FEATURE_DISABLED,\\n            module,\\n            orderType\\n        ));\\n    }\\n\\n    // @dev key for whether execute adl is disabled\\n    // @param the execute adl module\\n    // @return key for whether execute adl is disabled\\n    function executeAdlFeatureDisabledKey(address module, uint256 orderType) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            EXECUTE_ADL_FEATURE_DISABLED,\\n            module,\\n            orderType\\n        ));\\n    }\\n\\n    // @dev key for whether update order is disabled\\n    // @param the update order module\\n    // @return key for whether update order is disabled\\n    function updateOrderFeatureDisabledKey(address module, uint256 orderType) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            UPDATE_ORDER_FEATURE_DISABLED,\\n            module,\\n            orderType\\n        ));\\n    }\\n\\n    // @dev key for whether cancel order is disabled\\n    // @param the cancel order module\\n    // @return key for whether cancel order is disabled\\n    function cancelOrderFeatureDisabledKey(address module, uint256 orderType) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            CANCEL_ORDER_FEATURE_DISABLED,\\n            module,\\n            orderType\\n        ));\\n    }\\n\\n    // @dev key for whether claim funding fees is disabled\\n    // @param the claim funding fees module\\n    function claimFundingFeesFeatureDisabledKey(address module) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            CLAIM_FUNDING_FEES_FEATURE_DISABLED,\\n            module\\n        ));\\n    }\\n\\n    // @dev key for whether claim colltareral is disabled\\n    // @param the claim funding fees module\\n    function claimCollateralFeatureDisabledKey(address module) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            CLAIM_COLLATERAL_FEATURE_DISABLED,\\n            module\\n        ));\\n    }\\n\\n    // @dev key for whether claim affiliate rewards is disabled\\n    // @param the claim affiliate rewards module\\n    function claimAffiliateRewardsFeatureDisabledKey(address module) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            CLAIM_AFFILIATE_REWARDS_FEATURE_DISABLED,\\n            module\\n        ));\\n    }\\n\\n    // @dev key for whether claim ui fees is disabled\\n    // @param the claim ui fees module\\n    function claimUiFeesFeatureDisabledKey(address module) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            CLAIM_UI_FEES_FEATURE_DISABLED,\\n            module\\n        ));\\n    }\\n\\n    // @dev key for whether subaccounts are disabled\\n    // @param the subaccount module\\n    function subaccountFeatureDisabledKey(address module) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            SUBACCOUNT_FEATURE_DISABLED,\\n            module\\n        ));\\n    }\\n\\n    // @dev key for ui fee factor\\n    // @param account the fee receiver account\\n    // @return key for ui fee factor\\n    function uiFeeFactorKey(address account) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            UI_FEE_FACTOR,\\n            account\\n        ));\\n    }\\n\\n    // @dev key for whether an oracle provider is enabled\\n    // @param provider the oracle provider\\n    // @return key for whether an oracle provider is enabled\\n    function isOracleProviderEnabledKey(address provider) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            IS_ORACLE_PROVIDER_ENABLED,\\n            provider\\n        ));\\n    }\\n\\n    // @dev key for whether an oracle provider is allowed to be used for atomic actions\\n    // @param provider the oracle provider\\n    // @return key for whether an oracle provider is allowed to be used for atomic actions\\n    function isAtomicOracleProviderKey(address provider) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            IS_ATOMIC_ORACLE_PROVIDER,\\n            provider\\n        ));\\n    }\\n\\n    // @dev key for oracle timestamp adjustment\\n    // @param provider the oracle provider\\n    // @param token the token\\n    // @return key for oracle timestamp adjustment\\n    function oracleTimestampAdjustmentKey(address provider, address token) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            ORACLE_TIMESTAMP_ADJUSTMENT,\\n            provider,\\n            token\\n        ));\\n    }\\n\\n    // @dev key for oracle provider for token\\n    // @param token the token\\n    // @return key for oracle provider for token\\n    function oracleProviderForTokenKey(address token) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            ORACLE_PROVIDER_FOR_TOKEN,\\n            token\\n        ));\\n    }\\n\\n    // @dev key for gas to forward for token transfer\\n    // @param the token to check\\n    // @return key for gas to forward for token transfer\\n    function tokenTransferGasLimit(address token) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            TOKEN_TRANSFER_GAS_LIMIT,\\n            token\\n        ));\\n   }\\n\\n   // @dev the default callback contract\\n   // @param account the user's account\\n   // @param market the address of the market\\n   // @param callbackContract the callback contract\\n   function savedCallbackContract(address account, address market) internal pure returns (bytes32) {\\n       return keccak256(abi.encode(\\n           SAVED_CALLBACK_CONTRACT,\\n           account,\\n           market\\n       ));\\n   }\\n\\n   // @dev the min collateral factor key\\n   // @param the market for the min collateral factor\\n   function minCollateralFactorKey(address market) internal pure returns (bytes32) {\\n       return keccak256(abi.encode(\\n           MIN_COLLATERAL_FACTOR,\\n           market\\n       ));\\n   }\\n\\n   // @dev the min collateral factor for open interest multiplier key\\n   // @param the market for the factor\\n   function minCollateralFactorForOpenInterestMultiplierKey(address market, bool isLong) internal pure returns (bytes32) {\\n       return keccak256(abi.encode(\\n           MIN_COLLATERAL_FACTOR_FOR_OPEN_INTEREST_MULTIPLIER,\\n           market,\\n           isLong\\n       ));\\n   }\\n\\n   // @dev the key for the virtual token id\\n   // @param the token to get the virtual id for\\n   function virtualTokenIdKey(address token) internal pure returns (bytes32) {\\n       return keccak256(abi.encode(\\n           VIRTUAL_TOKEN_ID,\\n           token\\n       ));\\n   }\\n\\n   // @dev the key for the virtual market id\\n   // @param the market to get the virtual id for\\n   function virtualMarketIdKey(address market) internal pure returns (bytes32) {\\n       return keccak256(abi.encode(\\n           VIRTUAL_MARKET_ID,\\n           market\\n       ));\\n   }\\n\\n   // @dev the key for the virtual inventory for positions\\n   // @param the virtualTokenId the virtual token id\\n   function virtualInventoryForPositionsKey(bytes32 virtualTokenId) internal pure returns (bytes32) {\\n       return keccak256(abi.encode(\\n           VIRTUAL_INVENTORY_FOR_POSITIONS,\\n           virtualTokenId\\n       ));\\n   }\\n\\n   // @dev the key for the virtual inventory for swaps\\n   // @param the virtualMarketId the virtual market id\\n   // @param the token to check the inventory for\\n   function virtualInventoryForSwapsKey(bytes32 virtualMarketId, bool isLongToken) internal pure returns (bytes32) {\\n       return keccak256(abi.encode(\\n           VIRTUAL_INVENTORY_FOR_SWAPS,\\n           virtualMarketId,\\n           isLongToken\\n       ));\\n   }\\n\\n    // @dev key for position impact factor\\n    // @param market the market address to check\\n    // @param isPositive whether the impact is positive or negative\\n    // @return key for position impact factor\\n    function positionImpactFactorKey(address market, bool isPositive) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            POSITION_IMPACT_FACTOR,\\n            market,\\n            isPositive\\n        ));\\n   }\\n\\n    // @dev key for position impact exponent factor\\n    // @param market the market address to check\\n    // @return key for position impact exponent factor\\n    function positionImpactExponentFactorKey(address market) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            POSITION_IMPACT_EXPONENT_FACTOR,\\n            market\\n        ));\\n    }\\n\\n    // @dev key for the max position impact factor\\n    // @param market the market address to check\\n    // @return key for the max position impact factor\\n    function maxPositionImpactFactorKey(address market, bool isPositive) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            MAX_POSITION_IMPACT_FACTOR,\\n            market,\\n            isPositive\\n        ));\\n    }\\n\\n    // @dev key for the max position impact factor for liquidations\\n    // @param market the market address to check\\n    // @return key for the max position impact factor\\n    function maxPositionImpactFactorForLiquidationsKey(address market) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            MAX_POSITION_IMPACT_FACTOR_FOR_LIQUIDATIONS,\\n            market\\n        ));\\n    }\\n\\n    // @dev key for position fee factor\\n    // @param market the market address to check\\n    // @param forPositiveImpact whether the fee is for an action that has a positive price impact\\n    // @return key for position fee factor\\n    function positionFeeFactorKey(address market, bool forPositiveImpact) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            POSITION_FEE_FACTOR,\\n            market,\\n            forPositiveImpact\\n        ));\\n    }\\n\\n    // @dev key for swap impact factor\\n    // @param market the market address to check\\n    // @param isPositive whether the impact is positive or negative\\n    // @return key for swap impact factor\\n    function swapImpactFactorKey(address market, bool isPositive) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            SWAP_IMPACT_FACTOR,\\n            market,\\n            isPositive\\n        ));\\n    }\\n\\n    // @dev key for swap impact exponent factor\\n    // @param market the market address to check\\n    // @return key for swap impact exponent factor\\n    function swapImpactExponentFactorKey(address market) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            SWAP_IMPACT_EXPONENT_FACTOR,\\n            market\\n        ));\\n    }\\n\\n\\n    // @dev key for swap fee factor\\n    // @param market the market address to check\\n    // @return key for swap fee factor\\n    function swapFeeFactorKey(address market, bool forPositiveImpact) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            SWAP_FEE_FACTOR,\\n            market,\\n            forPositiveImpact\\n        ));\\n    }\\n\\n    // @dev key for atomic swap fee factor\\n    // @param market the market address to check\\n    // @return key for atomic swap fee factor\\n    function atomicSwapFeeFactorKey(address market) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            ATOMIC_SWAP_FEE_FACTOR,\\n            market\\n        ));\\n    }\\n\\n    // @dev key for oracle type\\n    // @param token the token to check\\n    // @return key for oracle type\\n    function oracleTypeKey(address token) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            ORACLE_TYPE,\\n            token\\n        ));\\n    }\\n\\n    // @dev key for open interest\\n    // @param market the market to check\\n    // @param collateralToken the collateralToken to check\\n    // @param isLong whether to check the long or short open interest\\n    // @return key for open interest\\n    function openInterestKey(address market, address collateralToken, bool isLong) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            OPEN_INTEREST,\\n            market,\\n            collateralToken,\\n            isLong\\n        ));\\n    }\\n\\n    // @dev key for open interest in tokens\\n    // @param market the market to check\\n    // @param collateralToken the collateralToken to check\\n    // @param isLong whether to check the long or short open interest\\n    // @return key for open interest in tokens\\n    function openInterestInTokensKey(address market, address collateralToken, bool isLong) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            OPEN_INTEREST_IN_TOKENS,\\n            market,\\n            collateralToken,\\n            isLong\\n        ));\\n    }\\n\\n    // @dev key for collateral sum for a market\\n    // @param market the market to check\\n    // @param collateralToken the collateralToken to check\\n    // @param isLong whether to check the long or short open interest\\n    // @return key for collateral sum\\n    function collateralSumKey(address market, address collateralToken, bool isLong) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            COLLATERAL_SUM,\\n            market,\\n            collateralToken,\\n            isLong\\n        ));\\n    }\\n\\n    // @dev key for amount of tokens in a market's pool\\n    // @param market the market to check\\n    // @param token the token to check\\n    // @return key for amount of tokens in a market's pool\\n    function poolAmountKey(address market, address token) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            POOL_AMOUNT,\\n            market,\\n            token\\n        ));\\n    }\\n\\n    // @dev the key for the max amount of pool tokens\\n    // @param market the market for the pool\\n    // @param token the token for the pool\\n    function maxPoolAmountKey(address market, address token) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            MAX_POOL_AMOUNT,\\n            market,\\n            token\\n        ));\\n    }\\n\\n    // @dev the key for the max usd of pool tokens for deposits\\n    // @param market the market for the pool\\n    // @param token the token for the pool\\n    function maxPoolUsdForDepositKey(address market, address token) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            MAX_POOL_USD_FOR_DEPOSIT,\\n            market,\\n            token\\n        ));\\n    }\\n\\n    // @dev the key for the max open interest\\n    // @param market the market for the pool\\n    // @param isLong whether the key is for the long or short side\\n    function maxOpenInterestKey(address market, bool isLong) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            MAX_OPEN_INTEREST,\\n            market,\\n            isLong\\n        ));\\n    }\\n\\n    // @dev key for amount of tokens in a market's position impact pool\\n    // @param market the market to check\\n    // @return key for amount of tokens in a market's position impact pool\\n    function positionImpactPoolAmountKey(address market) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            POSITION_IMPACT_POOL_AMOUNT,\\n            market\\n        ));\\n    }\\n\\n    // @dev key for min amount of tokens in a market's position impact pool\\n    // @param market the market to check\\n    // @return key for min amount of tokens in a market's position impact pool\\n    function minPositionImpactPoolAmountKey(address market) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            MIN_POSITION_IMPACT_POOL_AMOUNT,\\n            market\\n        ));\\n    }\\n\\n    // @dev key for position impact pool distribution rate\\n    // @param market the market to check\\n    // @return key for position impact pool distribution rate\\n    function positionImpactPoolDistributionRateKey(address market) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            POSITION_IMPACT_POOL_DISTRIBUTION_RATE,\\n            market\\n        ));\\n    }\\n\\n    // @dev key for position impact pool distributed at\\n    // @param market the market to check\\n    // @return key for position impact pool distributed at\\n    function positionImpactPoolDistributedAtKey(address market) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            POSITION_IMPACT_POOL_DISTRIBUTED_AT,\\n            market\\n        ));\\n    }\\n\\n    // @dev key for amount of tokens in a market's swap impact pool\\n    // @param market the market to check\\n    // @param token the token to check\\n    // @return key for amount of tokens in a market's swap impact pool\\n    function swapImpactPoolAmountKey(address market, address token) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            SWAP_IMPACT_POOL_AMOUNT,\\n            market,\\n            token\\n        ));\\n    }\\n\\n    // @dev key for reserve factor\\n    // @param market the market to check\\n    // @param isLong whether to get the key for the long or short side\\n    // @return key for reserve factor\\n    function reserveFactorKey(address market, bool isLong) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            RESERVE_FACTOR,\\n            market,\\n            isLong\\n        ));\\n    }\\n\\n    // @dev key for open interest reserve factor\\n    // @param market the market to check\\n    // @param isLong whether to get the key for the long or short side\\n    // @return key for open interest reserve factor\\n    function openInterestReserveFactorKey(address market, bool isLong) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            OPEN_INTEREST_RESERVE_FACTOR,\\n            market,\\n            isLong\\n        ));\\n    }\\n\\n    // @dev key for max pnl factor\\n    // @param market the market to check\\n    // @param isLong whether to get the key for the long or short side\\n    // @return key for max pnl factor\\n    function maxPnlFactorKey(bytes32 pnlFactorType, address market, bool isLong) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            MAX_PNL_FACTOR,\\n            pnlFactorType,\\n            market,\\n            isLong\\n        ));\\n    }\\n\\n    // @dev the key for min PnL factor after ADL\\n    // @param market the market for the pool\\n    // @param isLong whether the key is for the long or short side\\n    function minPnlFactorAfterAdlKey(address market, bool isLong) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            MIN_PNL_FACTOR_AFTER_ADL,\\n            market,\\n            isLong\\n        ));\\n    }\\n\\n    // @dev key for latest adl time\\n    // @param market the market to check\\n    // @param isLong whether to get the key for the long or short side\\n    // @return key for latest adl time\\n    function latestAdlAtKey(address market, bool isLong) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            LATEST_ADL_AT,\\n            market,\\n            isLong\\n        ));\\n    }\\n\\n    // @dev key for whether adl is enabled\\n    // @param market the market to check\\n    // @param isLong whether to get the key for the long or short side\\n    // @return key for whether adl is enabled\\n    function isAdlEnabledKey(address market, bool isLong) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            IS_ADL_ENABLED,\\n            market,\\n            isLong\\n        ));\\n    }\\n\\n    // @dev key for funding factor\\n    // @param market the market to check\\n    // @return key for funding factor\\n    function fundingFactorKey(address market) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            FUNDING_FACTOR,\\n            market\\n        ));\\n    }\\n\\n    // @dev the key for funding exponent\\n    // @param market the market for the pool\\n    function fundingExponentFactorKey(address market) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            FUNDING_EXPONENT_FACTOR,\\n            market\\n        ));\\n    }\\n\\n    // @dev the key for saved funding factor\\n    // @param market the market for the pool\\n    function savedFundingFactorPerSecondKey(address market) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            SAVED_FUNDING_FACTOR_PER_SECOND,\\n            market\\n        ));\\n    }\\n\\n    // @dev the key for funding increase factor\\n    // @param market the market for the pool\\n    function fundingIncreaseFactorPerSecondKey(address market) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            FUNDING_INCREASE_FACTOR_PER_SECOND,\\n            market\\n        ));\\n    }\\n\\n    // @dev the key for funding decrease factor\\n    // @param market the market for the pool\\n    function fundingDecreaseFactorPerSecondKey(address market) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            FUNDING_DECREASE_FACTOR_PER_SECOND,\\n            market\\n        ));\\n    }\\n\\n    // @dev the key for min funding factor\\n    // @param market the market for the pool\\n    function minFundingFactorPerSecondKey(address market) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            MIN_FUNDING_FACTOR_PER_SECOND,\\n            market\\n        ));\\n    }\\n\\n    // @dev the key for max funding factor\\n    // @param market the market for the pool\\n    function maxFundingFactorPerSecondKey(address market) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            MAX_FUNDING_FACTOR_PER_SECOND,\\n            market\\n        ));\\n    }\\n\\n    // @dev the key for threshold for stable funding\\n    // @param market the market for the pool\\n    function thresholdForStableFundingKey(address market) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            THRESHOLD_FOR_STABLE_FUNDING,\\n            market\\n        ));\\n    }\\n\\n    // @dev the key for threshold for decreasing funding\\n    // @param market the market for the pool\\n    function thresholdForDecreaseFundingKey(address market) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            THRESHOLD_FOR_DECREASE_FUNDING,\\n            market\\n        ));\\n    }\\n\\n    // @dev key for funding fee amount per size\\n    // @param market the market to check\\n    // @param collateralToken the collateralToken to get the key for\\n    // @param isLong whether to get the key for the long or short side\\n    // @return key for funding fee amount per size\\n    function fundingFeeAmountPerSizeKey(address market, address collateralToken, bool isLong) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            FUNDING_FEE_AMOUNT_PER_SIZE,\\n            market,\\n            collateralToken,\\n            isLong\\n        ));\\n    }\\n\\n    // @dev key for claimabel funding amount per size\\n    // @param market the market to check\\n    // @param collateralToken the collateralToken to get the key for\\n    // @param isLong whether to get the key for the long or short side\\n    // @return key for claimable funding amount per size\\n    function claimableFundingAmountPerSizeKey(address market, address collateralToken, bool isLong) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            CLAIMABLE_FUNDING_AMOUNT_PER_SIZE,\\n            market,\\n            collateralToken,\\n            isLong\\n        ));\\n    }\\n\\n    // @dev key for when funding was last updated\\n    // @param market the market to check\\n    // @return key for when funding was last updated\\n    function fundingUpdatedAtKey(address market) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            FUNDING_UPDATED_AT,\\n            market\\n        ));\\n    }\\n\\n    // @dev key for claimable funding amount\\n    // @param market the market to check\\n    // @param token the token to check\\n    // @return key for claimable funding amount\\n    function claimableFundingAmountKey(address market, address token) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            CLAIMABLE_FUNDING_AMOUNT,\\n            market,\\n            token\\n        ));\\n    }\\n\\n    // @dev key for claimable funding amount by account\\n    // @param market the market to check\\n    // @param token the token to check\\n    // @param account the account to check\\n    // @return key for claimable funding amount\\n    function claimableFundingAmountKey(address market, address token, address account) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            CLAIMABLE_FUNDING_AMOUNT,\\n            market,\\n            token,\\n            account\\n        ));\\n    }\\n\\n    // @dev key for claimable collateral amount\\n    // @param market the market to check\\n    // @param token the token to check\\n    // @param account the account to check\\n    // @param timeKey the time key for the claimable amount\\n    // @return key for claimable funding amount\\n    function claimableCollateralAmountKey(address market, address token) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            CLAIMABLE_COLLATERAL_AMOUNT,\\n            market,\\n            token\\n        ));\\n    }\\n\\n    // @dev key for claimable collateral amount for a timeKey for an account\\n    // @param market the market to check\\n    // @param token the token to check\\n    // @param account the account to check\\n    // @param timeKey the time key for the claimable amount\\n    // @return key for claimable funding amount\\n    function claimableCollateralAmountKey(address market, address token, uint256 timeKey, address account) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            CLAIMABLE_COLLATERAL_AMOUNT,\\n            market,\\n            token,\\n            timeKey,\\n            account\\n        ));\\n    }\\n\\n    // @dev key for claimable collateral factor for a timeKey\\n    // @param market the market to check\\n    // @param token the token to check\\n    // @param timeKey the time key for the claimable amount\\n    // @return key for claimable funding amount\\n    function claimableCollateralFactorKey(address market, address token, uint256 timeKey) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            CLAIMABLE_COLLATERAL_FACTOR,\\n            market,\\n            token,\\n            timeKey\\n        ));\\n    }\\n\\n    // @dev key for claimable collateral factor for a timeKey for an account\\n    // @param market the market to check\\n    // @param token the token to check\\n    // @param timeKey the time key for the claimable amount\\n    // @param account the account to check\\n    // @return key for claimable funding amount\\n    function claimableCollateralFactorKey(address market, address token, uint256 timeKey, address account) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            CLAIMABLE_COLLATERAL_FACTOR,\\n            market,\\n            token,\\n            timeKey,\\n            account\\n        ));\\n    }\\n\\n    // @dev key for claimable collateral factor\\n    // @param market the market to check\\n    // @param token the token to check\\n    // @param account the account to check\\n    // @param timeKey the time key for the claimable amount\\n    // @return key for claimable funding amount\\n    function claimedCollateralAmountKey(address market, address token, uint256 timeKey, address account) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            CLAIMED_COLLATERAL_AMOUNT,\\n            market,\\n            token,\\n            timeKey,\\n            account\\n        ));\\n    }\\n\\n    // @dev key for optimal usage factor\\n    // @param market the market to check\\n    // @param isLong whether to get the key for the long or short side\\n    // @return key for optimal usage factor\\n    function optimalUsageFactorKey(address market, bool isLong) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            OPTIMAL_USAGE_FACTOR,\\n            market,\\n            isLong\\n        ));\\n    }\\n\\n    // @dev key for base borrowing factor\\n    // @param market the market to check\\n    // @param isLong whether to get the key for the long or short side\\n    // @return key for base borrowing factor\\n    function baseBorrowingFactorKey(address market, bool isLong) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            BASE_BORROWING_FACTOR,\\n            market,\\n            isLong\\n        ));\\n    }\\n\\n    // @dev key for above optimal usage borrowing factor\\n    // @param market the market to check\\n    // @param isLong whether to get the key for the long or short side\\n    // @return key for above optimal usage borrowing factor\\n    function aboveOptimalUsageBorrowingFactorKey(address market, bool isLong) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            ABOVE_OPTIMAL_USAGE_BORROWING_FACTOR,\\n            market,\\n            isLong\\n        ));\\n    }\\n\\n    // @dev key for borrowing factor\\n    // @param market the market to check\\n    // @param isLong whether to get the key for the long or short side\\n    // @return key for borrowing factor\\n    function borrowingFactorKey(address market, bool isLong) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            BORROWING_FACTOR,\\n            market,\\n            isLong\\n        ));\\n    }\\n\\n    // @dev the key for borrowing exponent\\n    // @param market the market for the pool\\n    // @param isLong whether to get the key for the long or short side\\n    function borrowingExponentFactorKey(address market, bool isLong) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            BORROWING_EXPONENT_FACTOR,\\n            market,\\n            isLong\\n        ));\\n    }\\n\\n    // @dev key for cumulative borrowing factor\\n    // @param market the market to check\\n    // @param isLong whether to get the key for the long or short side\\n    // @return key for cumulative borrowing factor\\n    function cumulativeBorrowingFactorKey(address market, bool isLong) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            CUMULATIVE_BORROWING_FACTOR,\\n            market,\\n            isLong\\n        ));\\n    }\\n\\n    // @dev key for cumulative borrowing factor updated at\\n    // @param market the market to check\\n    // @param isLong whether to get the key for the long or short side\\n    // @return key for cumulative borrowing factor updated at\\n    function cumulativeBorrowingFactorUpdatedAtKey(address market, bool isLong) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            CUMULATIVE_BORROWING_FACTOR_UPDATED_AT,\\n            market,\\n            isLong\\n        ));\\n    }\\n\\n    // @dev key for total borrowing amount\\n    // @param market the market to check\\n    // @param isLong whether to get the key for the long or short side\\n    // @return key for total borrowing amount\\n    function totalBorrowingKey(address market, bool isLong) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            TOTAL_BORROWING,\\n            market,\\n            isLong\\n        ));\\n    }\\n\\n    // @dev key for affiliate reward amount\\n    // @param market the market to check\\n    // @param token the token to get the key for\\n    // @param account the account to get the key for\\n    // @return key for affiliate reward amount\\n    function affiliateRewardKey(address market, address token) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            AFFILIATE_REWARD,\\n            market,\\n            token\\n        ));\\n    }\\n\\n    function maxAllowedSubaccountActionCountKey(address account, address subaccount, bytes32 actionType) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            MAX_ALLOWED_SUBACCOUNT_ACTION_COUNT,\\n            account,\\n            subaccount,\\n            actionType\\n        ));\\n    }\\n\\n    function subaccountActionCountKey(address account, address subaccount, bytes32 actionType) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            SUBACCOUNT_ACTION_COUNT,\\n            account,\\n            subaccount,\\n            actionType\\n        ));\\n    }\\n\\n    function subaccountAutoTopUpAmountKey(address account, address subaccount) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            SUBACCOUNT_AUTO_TOP_UP_AMOUNT,\\n            account,\\n            subaccount\\n        ));\\n    }\\n\\n    // @dev key for affiliate reward amount for an account\\n    // @param market the market to check\\n    // @param token the token to get the key for\\n    // @param account the account to get the key for\\n    // @return key for affiliate reward amount\\n    function affiliateRewardKey(address market, address token, address account) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            AFFILIATE_REWARD,\\n            market,\\n            token,\\n            account\\n        ));\\n    }\\n\\n    // @dev key for is market disabled\\n    // @param market the market to check\\n    // @return key for is market disabled\\n    function isMarketDisabledKey(address market) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            IS_MARKET_DISABLED,\\n            market\\n        ));\\n    }\\n\\n    // @dev key for min market tokens for first deposit\\n    // @param market the market to check\\n    // @return key for min market tokens for first deposit\\n    function minMarketTokensForFirstDepositKey(address market) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            MIN_MARKET_TOKENS_FOR_FIRST_DEPOSIT,\\n            market\\n        ));\\n    }\\n\\n    // @dev key for price feed address\\n    // @param token the token to get the key for\\n    // @return key for price feed address\\n    function priceFeedKey(address token) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            PRICE_FEED,\\n            token\\n        ));\\n    }\\n\\n    // @dev key for data stream feed ID\\n    // @param token the token to get the key for\\n    // @return key for data stream feed ID\\n    function dataStreamIdKey(address token) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            DATA_STREAM_ID,\\n            token\\n        ));\\n    }\\n\\n    // @dev key for data stream feed multiplier\\n    // @param token the token to get the key for\\n    // @return key for data stream feed multiplier\\n    function dataStreamMultiplierKey(address token) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            DATA_STREAM_MULTIPLIER,\\n            token\\n        ));\\n    }\\n\\n    // @dev key for price feed multiplier\\n    // @param token the token to get the key for\\n    // @return key for price feed multiplier\\n    function priceFeedMultiplierKey(address token) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            PRICE_FEED_MULTIPLIER,\\n            token\\n        ));\\n    }\\n\\n    function priceFeedHeartbeatDurationKey(address token) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            PRICE_FEED_HEARTBEAT_DURATION,\\n            token\\n        ));\\n    }\\n\\n    // @dev key for stable price value\\n    // @param token the token to get the key for\\n    // @return key for stable price value\\n    function stablePriceKey(address token) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            STABLE_PRICE,\\n            token\\n        ));\\n    }\\n\\n    // @dev key for fee distributor swap token index\\n    // @param orderKey the swap order key\\n    // @return key for fee distributor swap token index\\n    function feeDistributorSwapTokenIndexKey(bytes32 orderKey) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            FEE_DISTRIBUTOR_SWAP_TOKEN_INDEX,\\n            orderKey\\n        ));\\n    }\\n\\n    // @dev key for fee distributor swap fee batch key\\n    // @param orderKey the swap order key\\n    // @return key for fee distributor swap fee batch key\\n    function feeDistributorSwapFeeBatchKey(bytes32 orderKey) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            FEE_DISTRIBUTOR_SWAP_FEE_BATCH,\\n            orderKey\\n        ));\\n    }\\n\\n    // @dev key for glv pending shift\\n    // @param glv the glv for the pending shift\\n    function glvPendingShiftKey(address glv) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(GLV_PENDING_SHIFT, glv));\\n    }\\n\\n    function glvPendingShiftBackrefKey(bytes32 shiftKey) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(GLV_PENDING_SHIFT_BACKREF, shiftKey));\\n    }\\n\\n    // @dev key for max market token balance for glv\\n    // @param glv the glv to check the market token balance for\\n    // @param market the market to check balance\\n    function glvMaxMarketTokenBalanceUsdKey(address glv, address market) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(GLV_MAX_MARKET_TOKEN_BALANCE_USD, glv, market));\\n    }\\n\\n    // @dev key for is glv market disabled\\n    // @param glv the glv to check\\n    // @param market the market to check\\n    // @return key for is market disabled\\n    function isGlvMarketDisabledKey(address glv, address market) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            IS_GLV_MARKET_DISABLED,\\n            glv,\\n            market\\n        ));\\n    }\\n}\\n\",\"keccak256\":\"0x27e60290d1ed422751d52a23d4880b8632ca2f43a7fa3d98dc7cc1c91a9a1720\",\"license\":\"BUSL-1.1\"},\"contracts/error/ErrorUtils.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nlibrary ErrorUtils {\\n    // To get the revert reason, referenced from https://ethereum.stackexchange.com/a/83577\\n    function getRevertMessage(bytes memory result) internal pure returns (string memory, bool) {\\n        // If the result length is less than 68, then the transaction either panicked or failed silently\\n        if (result.length < 68) {\\n            return (\\\"\\\", false);\\n        }\\n\\n        bytes4 errorSelector = getErrorSelectorFromData(result);\\n\\n        // 0x08c379a0 is the selector for Error(string)\\n        // referenced from https://blog.soliditylang.org/2021/04/21/custom-errors/\\n        if (errorSelector == bytes4(0x08c379a0)) {\\n            assembly {\\n                result := add(result, 0x04)\\n            }\\n\\n            return (abi.decode(result, (string)), true);\\n        }\\n\\n        // error may be a custom error, return an empty string for this case\\n        return (\\\"\\\", false);\\n    }\\n\\n    function getErrorSelectorFromData(bytes memory data) internal pure returns (bytes4) {\\n        bytes4 errorSelector;\\n\\n        assembly {\\n            errorSelector := mload(add(data, 0x20))\\n        }\\n\\n        return errorSelector;\\n    }\\n\\n    function revertWithParsedMessage(bytes memory result) internal pure {\\n        (string memory revertMessage, bool hasRevertMessage) = getRevertMessage(result);\\n\\n        if (hasRevertMessage) {\\n            revert(revertMessage);\\n        } else {\\n            revertWithCustomError(result);\\n        }\\n    }\\n\\n    function revertWithCustomError(bytes memory result) internal pure {\\n        // referenced from https://ethereum.stackexchange.com/a/123588\\n        uint256 length = result.length;\\n        assembly {\\n            revert(add(result, 0x20), length)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8dad7020da39ccf5759e4d9cefeb8a943cab645ea96f3a27a4f6ce3168f3dcbc\",\"license\":\"BUSL-1.1\"},\"contracts/error/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nlibrary Errors {\\n    // AdlHandler errors\\n    error AdlNotRequired(int256 pnlToPoolFactor, uint256 maxPnlFactorForAdl);\\n    error InvalidAdl(int256 nextPnlToPoolFactor, int256 pnlToPoolFactor);\\n    error PnlOvercorrected(int256 nextPnlToPoolFactor, uint256 minPnlFactorForAdl);\\n\\n    // AdlUtils errors\\n    error InvalidSizeDeltaForAdl(uint256 sizeDeltaUsd, uint256 positionSizeInUsd);\\n    error AdlNotEnabled();\\n\\n    // AutoCancelUtils errors\\n    error MaxAutoCancelOrdersExceeded(uint256 count, uint256 maxAutoCancelOrders);\\n\\n    // Bank errors\\n    error SelfTransferNotSupported(address receiver);\\n    error InvalidNativeTokenSender(address msgSender);\\n\\n    // BaseHandler errors\\n    error RequestNotYetCancellable(uint256 requestAge, uint256 requestExpirationAge, string requestType);\\n\\n    // CallbackUtils errors\\n    error MaxCallbackGasLimitExceeded(uint256 callbackGasLimit, uint256 maxCallbackGasLimit);\\n    error InsufficientGasLeftForCallback(uint256 gasToBeForwarded, uint256 callbackGasLimit);\\n\\n    // Config errors\\n    error InvalidBaseKey(bytes32 baseKey);\\n    error ConfigValueExceedsAllowedRange(bytes32 baseKey, uint256 value);\\n    error InvalidClaimableFactor(uint256 value);\\n    error PriceFeedAlreadyExistsForToken(address token);\\n    error DataStreamIdAlreadyExistsForToken(address token);\\n    error MaxFundingFactorPerSecondLimitExceeded(uint256 maxFundingFactorPerSecond, uint256 limit);\\n\\n    // Timelock errors\\n    error ActionAlreadySignalled();\\n    error ActionNotSignalled();\\n    error SignalTimeNotYetPassed(uint256 signalTime);\\n    error InvalidTimelockDelay(uint256 timelockDelay);\\n    error MaxTimelockDelayExceeded(uint256 timelockDelay);\\n    error InvalidFeeReceiver(address receiver);\\n    error InvalidOracleSigner(address receiver);\\n\\n    // GlvDepositStoreUtils errors\\n    error GlvDepositNotFound(bytes32 key);\\n    // GlvDepositUtils errors\\n    error EmptyGlvDepositAmounts();\\n    error EmptyGlvDeposit();\\n    // GlvUtils errors\\n    error EmptyGlv(address glv);\\n    error GlvUnsupportedMarket(address glv, address market);\\n    error GlvDisabledMarket(address glv, address market);\\n    error GlvMaxMarketTokenBalanceExceeded(address glv, address market, uint256 maxMarketTokenBalanceUsd, uint256 marketTokenBalanceUsd);\\n    error GlvInsufficientMarketTokenBalance(address glv, address market, uint256 marketTokenBalance, uint256 marketTokenAmount);\\n    error GlvHasPendingShift(address glv);\\n    error GlvShiftNotFound(bytes32 shiftKey);\\n    error GlvInvalidReceiver(address glv, address receiver);\\n    error GlvInvalidCallbackContract(address glvHandler, address callbackContract);\\n    error GlvMarketAlreadyExists(address glv, address market);\\n    error InvalidMarketTokenPrice(address market, int256 price);\\n    // GlvFactory\\n    error GlvAlreadyExists(address glv);\\n\\n    // DepositStoreUtils errors\\n    error DepositNotFound(bytes32 key);\\n\\n    // DepositUtils errors\\n    error EmptyDeposit();\\n    error EmptyDepositAmounts();\\n\\n    // ExecuteDepositUtils errors\\n    error MinMarketTokens(uint256 received, uint256 expected);\\n    error EmptyDepositAmountsAfterSwap();\\n    error InvalidPoolValueForDeposit(int256 poolValue);\\n    error InvalidSwapOutputToken(address outputToken, address expectedOutputToken);\\n    error InvalidReceiverForFirstDeposit(address receiver, address expectedReceiver);\\n    error InvalidMinMarketTokensForFirstDeposit(uint256 minMarketTokens, uint256 expectedMinMarketTokens);\\n\\n    // ExternalHandler errors\\n    error ExternalCallFailed(bytes data);\\n    error InvalidExternalCallInput(uint256 targetsLength, uint256 dataListLength);\\n    error InvalidExternalReceiversInput(uint256 refundTokensLength, uint256 refundReceiversLength);\\n    error InvalidExternalCallTarget(address target);\\n\\n    // FeeBatchStoreUtils errors\\n    error FeeBatchNotFound(bytes32 key);\\n\\n    // FeeDistributor errors\\n    error InvalidFeeBatchTokenIndex(uint256 tokenIndex, uint256 feeBatchTokensLength);\\n    error InvalidAmountInForFeeBatch(uint256 amountIn, uint256 remainingAmount);\\n    error InvalidSwapPathForV1(address[] path, address bridgingToken);\\n\\n    // GlpMigrator errors\\n    error InvalidGlpAmount(uint256 totalGlpAmountToRedeem, uint256 totalGlpAmount);\\n    error InvalidExecutionFeeForMigration(uint256 totalExecutionFee, uint256 msgValue);\\n\\n    // GlvHandler errors\\n    error InvalidGlvDepositInitialShortToken(address initialLongToken, address initialShortToken);\\n    error InvalidGlvDepositSwapPath(uint256 longTokenSwapPathLength, uint256 shortTokenSwapPathLength);\\n    error MinGlvTokens(uint256 received, uint256 expected);\\n\\n    // OrderHandler errors\\n    error OrderNotUpdatable(uint256 orderType);\\n    error InvalidKeeperForFrozenOrder(address keeper);\\n\\n    // FeatureUtils errors\\n    error DisabledFeature(bytes32 key);\\n\\n    // FeeHandler errors\\n    error InvalidClaimFeesInput(uint256 marketsLength, uint256 tokensLength);\\n\\n    // GasUtils errors\\n    error InsufficientExecutionFee(uint256 minExecutionFee, uint256 executionFee);\\n    error InsufficientWntAmountForExecutionFee(uint256 wntAmount, uint256 executionFee);\\n    error InsufficientExecutionGasForErrorHandling(uint256 startingGas, uint256 minHandleErrorGas);\\n    error InsufficientExecutionGas(uint256 startingGas, uint256 estimatedGasLimit, uint256 minAdditionalGasForExecution);\\n    error InsufficientHandleExecutionErrorGas(uint256 gas, uint256 minHandleExecutionErrorGas);\\n    error InsufficientGasForCancellation(uint256 gas, uint256 minHandleExecutionErrorGas);\\n\\n    // MarketFactory errors\\n    error MarketAlreadyExists(bytes32 salt, address existingMarketAddress);\\n\\n    // MarketStoreUtils errors\\n    error MarketNotFound(address key);\\n\\n    // MarketUtils errors\\n    error EmptyMarket();\\n    error DisabledMarket(address market);\\n    error MaxSwapPathLengthExceeded(uint256 swapPathLengh, uint256 maxSwapPathLength);\\n    error InsufficientPoolAmount(uint256 poolAmount, uint256 amount);\\n    error InsufficientReserve(uint256 reservedUsd, uint256 maxReservedUsd);\\n    error InsufficientReserveForOpenInterest(uint256 reservedUsd, uint256 maxReservedUsd);\\n    error UnableToGetOppositeToken(address inputToken, address market);\\n    error UnexpectedTokenForVirtualInventory(address token, address market);\\n    error EmptyMarketTokenSupply();\\n    error InvalidSwapMarket(address market);\\n    error UnableToGetCachedTokenPrice(address token, address market);\\n    error CollateralAlreadyClaimed(uint256 adjustedClaimableAmount, uint256 claimedAmount);\\n    error OpenInterestCannotBeUpdatedForSwapOnlyMarket(address market);\\n    error MaxOpenInterestExceeded(uint256 openInterest, uint256 maxOpenInterest);\\n    error MaxPoolAmountExceeded(uint256 poolAmount, uint256 maxPoolAmount);\\n    error MaxPoolUsdForDepositExceeded(uint256 poolUsd, uint256 maxPoolUsdForDeposit);\\n    error UnexpectedBorrowingFactor(uint256 positionBorrowingFactor, uint256 cumulativeBorrowingFactor);\\n    error UnableToGetBorrowingFactorEmptyPoolUsd();\\n    error UnableToGetFundingFactorEmptyOpenInterest();\\n    error InvalidPositionMarket(address market);\\n    error InvalidCollateralTokenForMarket(address market, address token);\\n    error PnlFactorExceededForLongs(int256 pnlToPoolFactor, uint256 maxPnlFactor);\\n    error PnlFactorExceededForShorts(int256 pnlToPoolFactor, uint256 maxPnlFactor);\\n    error InvalidUiFeeFactor(uint256 uiFeeFactor, uint256 maxUiFeeFactor);\\n    error EmptyAddressInMarketTokenBalanceValidation(address market, address token);\\n    error InvalidMarketTokenBalance(address market, address token, uint256 balance, uint256 expectedMinBalance);\\n    error InvalidMarketTokenBalanceForCollateralAmount(address market, address token, uint256 balance, uint256 collateralAmount);\\n    error InvalidMarketTokenBalanceForClaimableFunding(address market, address token, uint256 balance, uint256 claimableFundingFeeAmount);\\n    error UnexpectedPoolValue(int256 poolValue);\\n\\n    // Oracle errors\\n    error SequencerDown();\\n    error SequencerGraceDurationNotYetPassed(uint256 timeSinceUp, uint256 sequencerGraceDuration);\\n    error EmptyValidatedPrices();\\n    error InvalidOracleProvider(address provider);\\n    error InvalidOracleProviderForToken(address provider, address expectedProvider);\\n    error GmEmptySigner(uint256 signerIndex);\\n    error InvalidOracleSetPricesProvidersParam(uint256 tokensLength, uint256 providersLength);\\n    error InvalidOracleSetPricesDataParam(uint256 tokensLength, uint256 dataLength);\\n    error GmInvalidBlockNumber(uint256 minOracleBlockNumber, uint256 currentBlockNumber);\\n    error GmInvalidMinMaxBlockNumber(uint256 minOracleBlockNumber, uint256 maxOracleBlockNumber);\\n    error EmptyDataStreamFeedId(address token);\\n    error InvalidDataStreamFeedId(address token, bytes32 feedId, bytes32 expectedFeedId);\\n    error InvalidDataStreamBidAsk(address token, int192 bid, int192 ask);\\n    error InvalidDataStreamPrices(address token, int192 bid, int192 ask);\\n    error MaxPriceAgeExceeded(uint256 oracleTimestamp, uint256 currentTimestamp);\\n    error MaxOracleTimestampRangeExceeded(uint256 range, uint256 maxRange);\\n    error GmMinOracleSigners(uint256 oracleSigners, uint256 minOracleSigners);\\n    error GmMaxOracleSigners(uint256 oracleSigners, uint256 maxOracleSigners);\\n    error BlockNumbersNotSorted(uint256 minOracleBlockNumber, uint256 prevMinOracleBlockNumber);\\n    error GmMinPricesNotSorted(address token, uint256 price, uint256 prevPrice);\\n    error GmMaxPricesNotSorted(address token, uint256 price, uint256 prevPrice);\\n    error EmptyChainlinkPriceFeedMultiplier(address token);\\n    error EmptyDataStreamMultiplier(address token);\\n    error InvalidFeedPrice(address token, int256 price);\\n    error ChainlinkPriceFeedNotUpdated(address token, uint256 timestamp, uint256 heartbeatDuration);\\n    error GmMaxSignerIndex(uint256 signerIndex, uint256 maxSignerIndex);\\n    error InvalidGmOraclePrice(address token);\\n    error InvalidGmSignerMinMaxPrice(uint256 minPrice, uint256 maxPrice);\\n    error InvalidGmMedianMinMaxPrice(uint256 minPrice, uint256 maxPrice);\\n    error NonEmptyTokensWithPrices(uint256 tokensWithPricesLength);\\n    error InvalidMinMaxForPrice(address token, uint256 min, uint256 max);\\n    error EmptyChainlinkPriceFeed(address token);\\n    error PriceAlreadySet(address token, uint256 minPrice, uint256 maxPrice);\\n    error MaxRefPriceDeviationExceeded(\\n        address token,\\n        uint256 price,\\n        uint256 refPrice,\\n        uint256 maxRefPriceDeviationFactor\\n    );\\n    error InvalidBlockRangeSet(uint256 largestMinBlockNumber, uint256 smallestMaxBlockNumber);\\n    error EmptyChainlinkPaymentToken();\\n    error NonAtomicOracleProvider(address provider);\\n\\n    // OracleModule errors\\n    error InvalidPrimaryPricesForSimulation(uint256 primaryTokensLength, uint256 primaryPricesLength);\\n    error EndOfOracleSimulation();\\n\\n    // OracleUtils errors\\n    error InvalidGmSignature(address recoveredSigner, address expectedSigner);\\n\\n    error EmptyPrimaryPrice(address token);\\n\\n    error OracleTimestampsAreSmallerThanRequired(uint256 minOracleTimestamp, uint256 expectedTimestamp);\\n    error OracleTimestampsAreLargerThanRequestExpirationTime(uint256 maxOracleTimestamp, uint256 requestTimestamp, uint256 requestExpirationTime);\\n\\n    // BaseOrderUtils errors\\n    error EmptyOrder();\\n    error UnsupportedOrderType(uint256 orderType);\\n    error InvalidOrderPrices(\\n        uint256 primaryPriceMin,\\n        uint256 primaryPriceMax,\\n        uint256 triggerPrice,\\n        uint256 orderType\\n    );\\n    error EmptySizeDeltaInTokens();\\n    error PriceImpactLargerThanOrderSize(int256 priceImpactUsd, uint256 sizeDeltaUsd);\\n    error NegativeExecutionPrice(int256 executionPrice, uint256 price, uint256 positionSizeInUsd, int256 priceImpactUsd, uint256 sizeDeltaUsd);\\n    error OrderNotFulfillableAtAcceptablePrice(uint256 price, uint256 acceptablePrice);\\n\\n    // IncreaseOrderUtils errors\\n    error UnexpectedPositionState();\\n\\n    // OrderUtils errors\\n    error OrderTypeCannotBeCreated(uint256 orderType);\\n    error OrderAlreadyFrozen();\\n    error MaxTotalCallbackGasLimitForAutoCancelOrdersExceeded(uint256 totalCallbackGasLimit, uint256 maxTotalCallbackGasLimit);\\n    error InvalidReceiver(address receiver);\\n\\n    // OrderStoreUtils errors\\n    error OrderNotFound(bytes32 key);\\n\\n    // SwapOrderUtils errors\\n    error UnexpectedMarket();\\n\\n    // DecreasePositionCollateralUtils errors\\n    error InsufficientFundsToPayForCosts(uint256 remainingCostUsd, string step);\\n    error InvalidOutputToken(address tokenOut, address expectedTokenOut);\\n\\n    // DecreasePositionUtils errors\\n    error InvalidDecreaseOrderSize(uint256 sizeDeltaUsd, uint256 positionSizeInUsd);\\n    error UnableToWithdrawCollateral(int256 estimatedRemainingCollateralUsd);\\n    error InvalidDecreasePositionSwapType(uint256 decreasePositionSwapType);\\n    error PositionShouldNotBeLiquidated(\\n        string reason,\\n        int256 remainingCollateralUsd,\\n        int256 minCollateralUsd,\\n        int256 minCollateralUsdForLeverage\\n    );\\n\\n    // IncreasePositionUtils errors\\n    error InsufficientCollateralAmount(uint256 collateralAmount, int256 collateralDeltaAmount);\\n    error InsufficientCollateralUsd(int256 remainingCollateralUsd);\\n\\n    // PositionStoreUtils errors\\n    error PositionNotFound(bytes32 key);\\n\\n    // PositionUtils errors\\n    error LiquidatablePosition(\\n        string reason,\\n        int256 remainingCollateralUsd,\\n        int256 minCollateralUsd,\\n        int256 minCollateralUsdForLeverage\\n    );\\n\\n    error EmptyPosition();\\n    error InvalidPositionSizeValues(uint256 sizeInUsd, uint256 sizeInTokens);\\n    error MinPositionSize(uint256 positionSizeInUsd, uint256 minPositionSizeUsd);\\n\\n    // PositionPricingUtils errors\\n    error UsdDeltaExceedsLongOpenInterest(int256 usdDelta, uint256 longOpenInterest);\\n    error UsdDeltaExceedsShortOpenInterest(int256 usdDelta, uint256 shortOpenInterest);\\n\\n    // ShiftStoreUtils errors\\n    error ShiftNotFound(bytes32 key);\\n\\n    // ShiftUtils errors\\n    error EmptyShift();\\n    error EmptyShiftAmount();\\n    error ShiftFromAndToMarketAreEqual(address market);\\n    error LongTokensAreNotEqual(address fromMarketLongToken, address toMarketLongToken);\\n    error ShortTokensAreNotEqual(address fromMarketLongToken, address toMarketLongToken);\\n\\n    // SwapPricingUtils errors\\n    error UsdDeltaExceedsPoolValue(int256 usdDelta, uint256 poolUsd);\\n\\n    // RoleModule errors\\n    error Unauthorized(address msgSender, string role);\\n\\n    // RoleStore errors\\n    error ThereMustBeAtLeastOneRoleAdmin();\\n    error ThereMustBeAtLeastOneTimelockMultiSig();\\n\\n    // ExchangeRouter errors\\n    error InvalidClaimFundingFeesInput(uint256 marketsLength, uint256 tokensLength);\\n    error InvalidClaimCollateralInput(uint256 marketsLength, uint256 tokensLength, uint256 timeKeysLength);\\n    error InvalidClaimAffiliateRewardsInput(uint256 marketsLength, uint256 tokensLength);\\n    error InvalidClaimUiFeesInput(uint256 marketsLength, uint256 tokensLength);\\n\\n    // SwapUtils errors\\n    error InvalidTokenIn(address tokenIn, address market);\\n    error InsufficientOutputAmount(uint256 outputAmount, uint256 minOutputAmount);\\n    error InsufficientSwapOutputAmount(uint256 outputAmount, uint256 minOutputAmount);\\n    error DuplicatedMarketInSwapPath(address market);\\n    error SwapPriceImpactExceedsAmountIn(uint256 amountAfterFees, int256 negativeImpactAmount);\\n\\n    // SubaccountRouter errors\\n    error InvalidReceiverForSubaccountOrder(address receiver, address expectedReceiver);\\n\\n    // SubaccountUtils errors\\n    error SubaccountNotAuthorized(address account, address subaccount);\\n    error MaxSubaccountActionCountExceeded(address account, address subaccount, uint256 count, uint256 maxCount);\\n\\n    // TokenUtils errors\\n    error EmptyTokenTranferGasLimit(address token);\\n    error TokenTransferError(address token, address receiver, uint256 amount);\\n    error EmptyHoldingAddress();\\n\\n    // AccountUtils errors\\n    error EmptyAccount();\\n    error EmptyReceiver();\\n\\n    // Array errors\\n    error CompactedArrayOutOfBounds(\\n        uint256[] compactedValues,\\n        uint256 index,\\n        uint256 slotIndex,\\n        string label\\n    );\\n\\n    error ArrayOutOfBoundsUint256(\\n        uint256[] values,\\n        uint256 index,\\n        string label\\n    );\\n\\n    error ArrayOutOfBoundsBytes(\\n        bytes[] values,\\n        uint256 index,\\n        string label\\n    );\\n\\n    // WithdrawalHandler errors\\n    error SwapsNotAllowedForAtomicWithdrawal(uint256 longTokenSwapPathLength, uint256 shortTokenSwapPathLength);\\n\\n    // WithdrawalStoreUtils errors\\n    error WithdrawalNotFound(bytes32 key);\\n\\n    // WithdrawalUtils errors\\n    error EmptyWithdrawal();\\n    error EmptyWithdrawalAmount();\\n    error MinLongTokens(uint256 received, uint256 expected);\\n    error MinShortTokens(uint256 received, uint256 expected);\\n    error InsufficientMarketTokens(uint256 balance, uint256 expected);\\n    error InsufficientWntAmount(uint256 wntAmount, uint256 executionFee);\\n    error InvalidPoolValueForWithdrawal(int256 poolValue);\\n\\n    // Uint256Mask errors\\n    error MaskIndexOutOfBounds(uint256 index, string label);\\n    error DuplicatedIndex(uint256 index, string label);\\n}\\n\",\"keccak256\":\"0xe9b3c4b94654dc46f2049bb551f8a1551fffdbbd194bfb58f669420ac89e9b0d\",\"license\":\"BUSL-1.1\"},\"contracts/event/EventEmitter.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../role/RoleModule.sol\\\";\\nimport \\\"./EventUtils.sol\\\";\\n\\n// @title EventEmitter\\n// @dev Contract to emit events\\n// This allows main events to be emitted from a single contract\\n// Logic contracts can be updated while re-using the same eventEmitter contract\\n// Peripheral services like monitoring or analytics would be able to continue\\n// to work without an update and without segregating historical data\\ncontract EventEmitter is RoleModule {\\n    event EventLog(\\n        address msgSender,\\n        string eventName,\\n        string indexed eventNameHash,\\n        EventUtils.EventLogData eventData\\n    );\\n\\n    event EventLog1(\\n        address msgSender,\\n        string eventName,\\n        string indexed eventNameHash,\\n        bytes32 indexed topic1,\\n        EventUtils.EventLogData eventData\\n    );\\n\\n    event EventLog2(\\n        address msgSender,\\n        string eventName,\\n        string indexed eventNameHash,\\n        bytes32 indexed topic1,\\n        bytes32 indexed topic2,\\n        EventUtils.EventLogData eventData\\n    );\\n\\n    constructor(RoleStore _roleStore) RoleModule(_roleStore) {}\\n\\n    // @dev emit a general event log\\n    // @param eventName the name of the event\\n    // @param eventData the event data\\n    function emitEventLog(\\n        string memory eventName,\\n        EventUtils.EventLogData memory eventData\\n    ) external onlyController {\\n        emit EventLog(\\n            msg.sender,\\n            eventName,\\n            eventName,\\n            eventData\\n        );\\n    }\\n\\n    // @dev emit a general event log\\n    // @param eventName the name of the event\\n    // @param topic1 topic1 for indexing\\n    // @param eventData the event data\\n    function emitEventLog1(\\n        string memory eventName,\\n        bytes32 topic1,\\n        EventUtils.EventLogData memory eventData\\n    ) external onlyController {\\n        emit EventLog1(\\n            msg.sender,\\n            eventName,\\n            eventName,\\n            topic1,\\n            eventData\\n        );\\n    }\\n\\n    // @dev emit a general event log\\n    // @param eventName the name of the event\\n    // @param topic1 topic1 for indexing\\n    // @param topic2 topic2 for indexing\\n    // @param eventData the event data\\n    function emitEventLog2(\\n        string memory eventName,\\n        bytes32 topic1,\\n        bytes32 topic2,\\n        EventUtils.EventLogData memory eventData\\n    ) external onlyController {\\n        emit EventLog2(\\n            msg.sender,\\n            eventName,\\n            eventName,\\n            topic1,\\n            topic2,\\n            eventData\\n        );\\n    }\\n    // @dev event log for general use\\n    // @param topic1 event topic 1\\n    // @param data additional data\\n    function emitDataLog1(bytes32 topic1, bytes memory data) external onlyController {\\n        uint256 len = data.length;\\n        assembly {\\n            log1(add(data, 32), len, topic1)\\n        }\\n    }\\n\\n    // @dev event log for general use\\n    // @param topic1 event topic 1\\n    // @param topic2 event topic 2\\n    // @param data additional data\\n    function emitDataLog2(bytes32 topic1, bytes32 topic2, bytes memory data) external onlyController {\\n        uint256 len = data.length;\\n        assembly {\\n            log2(add(data, 32), len, topic1, topic2)\\n        }\\n    }\\n\\n    // @dev event log for general use\\n    // @param topic1 event topic 1\\n    // @param topic2 event topic 2\\n    // @param topic3 event topic 3\\n    // @param data additional data\\n    function emitDataLog3(bytes32 topic1, bytes32 topic2, bytes32 topic3, bytes memory data) external onlyController {\\n        uint256 len = data.length;\\n        assembly {\\n            log3(add(data, 32), len, topic1, topic2, topic3)\\n        }\\n    }\\n\\n    // @dev event log for general use\\n    // @param topic1 event topic 1\\n    // @param topic2 event topic 2\\n    // @param topic3 event topic 3\\n    // @param topic4 event topic 4\\n    // @param data additional data\\n    function emitDataLog4(bytes32 topic1, bytes32 topic2, bytes32 topic3, bytes32 topic4, bytes memory data) external onlyController {\\n        uint256 len = data.length;\\n        assembly {\\n            log4(add(data, 32), len, topic1, topic2, topic3, topic4)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x160c1835150b3cc703cfc9ffdb74138b3c4939a0f6988171113e37cbf1f0f90e\",\"license\":\"BUSL-1.1\"},\"contracts/event/EventUtils.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nlibrary EventUtils {\\n    struct EmitPositionDecreaseParams {\\n        bytes32 key;\\n        address account;\\n        address market;\\n        address collateralToken;\\n        bool isLong;\\n    }\\n\\n    struct EventLogData {\\n        AddressItems addressItems;\\n        UintItems uintItems;\\n        IntItems intItems;\\n        BoolItems boolItems;\\n        Bytes32Items bytes32Items;\\n        BytesItems bytesItems;\\n        StringItems stringItems;\\n    }\\n\\n    struct AddressItems {\\n        AddressKeyValue[] items;\\n        AddressArrayKeyValue[] arrayItems;\\n    }\\n\\n    struct UintItems {\\n        UintKeyValue[] items;\\n        UintArrayKeyValue[] arrayItems;\\n    }\\n\\n    struct IntItems {\\n        IntKeyValue[] items;\\n        IntArrayKeyValue[] arrayItems;\\n    }\\n\\n    struct BoolItems {\\n        BoolKeyValue[] items;\\n        BoolArrayKeyValue[] arrayItems;\\n    }\\n\\n    struct Bytes32Items {\\n        Bytes32KeyValue[] items;\\n        Bytes32ArrayKeyValue[] arrayItems;\\n    }\\n\\n    struct BytesItems {\\n        BytesKeyValue[] items;\\n        BytesArrayKeyValue[] arrayItems;\\n    }\\n\\n    struct StringItems {\\n        StringKeyValue[] items;\\n        StringArrayKeyValue[] arrayItems;\\n    }\\n\\n    struct AddressKeyValue {\\n        string key;\\n        address value;\\n    }\\n\\n    struct AddressArrayKeyValue {\\n        string key;\\n        address[] value;\\n    }\\n\\n    struct UintKeyValue {\\n        string key;\\n        uint256 value;\\n    }\\n\\n    struct UintArrayKeyValue {\\n        string key;\\n        uint256[] value;\\n    }\\n\\n    struct IntKeyValue {\\n        string key;\\n        int256 value;\\n    }\\n\\n    struct IntArrayKeyValue {\\n        string key;\\n        int256[] value;\\n    }\\n\\n    struct BoolKeyValue {\\n        string key;\\n        bool value;\\n    }\\n\\n    struct BoolArrayKeyValue {\\n        string key;\\n        bool[] value;\\n    }\\n\\n    struct Bytes32KeyValue {\\n        string key;\\n        bytes32 value;\\n    }\\n\\n    struct Bytes32ArrayKeyValue {\\n        string key;\\n        bytes32[] value;\\n    }\\n\\n    struct BytesKeyValue {\\n        string key;\\n        bytes value;\\n    }\\n\\n    struct BytesArrayKeyValue {\\n        string key;\\n        bytes[] value;\\n    }\\n\\n    struct StringKeyValue {\\n        string key;\\n        string value;\\n    }\\n\\n    struct StringArrayKeyValue {\\n        string key;\\n        string[] value;\\n    }\\n\\n    function initItems(AddressItems memory items, uint256 size) internal pure {\\n        items.items = new EventUtils.AddressKeyValue[](size);\\n    }\\n\\n    function initArrayItems(AddressItems memory items, uint256 size) internal pure {\\n        items.arrayItems = new EventUtils.AddressArrayKeyValue[](size);\\n    }\\n\\n    function setItem(AddressItems memory items, uint256 index, string memory key, address value) internal pure {\\n        items.items[index].key = key;\\n        items.items[index].value = value;\\n    }\\n\\n    function setItem(AddressItems memory items, uint256 index, string memory key, address[] memory value) internal pure {\\n        items.arrayItems[index].key = key;\\n        items.arrayItems[index].value = value;\\n    }\\n\\n    function initItems(UintItems memory items, uint256 size) internal pure {\\n        items.items = new EventUtils.UintKeyValue[](size);\\n    }\\n\\n    function initArrayItems(UintItems memory items, uint256 size) internal pure {\\n        items.arrayItems = new EventUtils.UintArrayKeyValue[](size);\\n    }\\n\\n    function setItem(UintItems memory items, uint256 index, string memory key, uint256 value) internal pure {\\n        items.items[index].key = key;\\n        items.items[index].value = value;\\n    }\\n\\n    function setItem(UintItems memory items, uint256 index, string memory key, uint256[] memory value) internal pure {\\n        items.arrayItems[index].key = key;\\n        items.arrayItems[index].value = value;\\n    }\\n\\n    function initItems(IntItems memory items, uint256 size) internal pure {\\n        items.items = new EventUtils.IntKeyValue[](size);\\n    }\\n\\n    function initArrayItems(IntItems memory items, uint256 size) internal pure {\\n        items.arrayItems = new EventUtils.IntArrayKeyValue[](size);\\n    }\\n\\n    function setItem(IntItems memory items, uint256 index, string memory key, int256 value) internal pure {\\n        items.items[index].key = key;\\n        items.items[index].value = value;\\n    }\\n\\n    function setItem(IntItems memory items, uint256 index, string memory key, int256[] memory value) internal pure {\\n        items.arrayItems[index].key = key;\\n        items.arrayItems[index].value = value;\\n    }\\n\\n    function initItems(BoolItems memory items, uint256 size) internal pure {\\n        items.items = new EventUtils.BoolKeyValue[](size);\\n    }\\n\\n    function initArrayItems(BoolItems memory items, uint256 size) internal pure {\\n        items.arrayItems = new EventUtils.BoolArrayKeyValue[](size);\\n    }\\n\\n    function setItem(BoolItems memory items, uint256 index, string memory key, bool value) internal pure {\\n        items.items[index].key = key;\\n        items.items[index].value = value;\\n    }\\n\\n    function setItem(BoolItems memory items, uint256 index, string memory key, bool[] memory value) internal pure {\\n        items.arrayItems[index].key = key;\\n        items.arrayItems[index].value = value;\\n    }\\n\\n    function initItems(Bytes32Items memory items, uint256 size) internal pure {\\n        items.items = new EventUtils.Bytes32KeyValue[](size);\\n    }\\n\\n    function initArrayItems(Bytes32Items memory items, uint256 size) internal pure {\\n        items.arrayItems = new EventUtils.Bytes32ArrayKeyValue[](size);\\n    }\\n\\n    function setItem(Bytes32Items memory items, uint256 index, string memory key, bytes32 value) internal pure {\\n        items.items[index].key = key;\\n        items.items[index].value = value;\\n    }\\n\\n    function setItem(Bytes32Items memory items, uint256 index, string memory key, bytes32[] memory value) internal pure {\\n        items.arrayItems[index].key = key;\\n        items.arrayItems[index].value = value;\\n    }\\n\\n    function initItems(BytesItems memory items, uint256 size) internal pure {\\n        items.items = new EventUtils.BytesKeyValue[](size);\\n    }\\n\\n    function initArrayItems(BytesItems memory items, uint256 size) internal pure {\\n        items.arrayItems = new EventUtils.BytesArrayKeyValue[](size);\\n    }\\n\\n    function setItem(BytesItems memory items, uint256 index, string memory key, bytes memory value) internal pure {\\n        items.items[index].key = key;\\n        items.items[index].value = value;\\n    }\\n\\n    function setItem(BytesItems memory items, uint256 index, string memory key, bytes[] memory value) internal pure {\\n        items.arrayItems[index].key = key;\\n        items.arrayItems[index].value = value;\\n    }\\n\\n    function initItems(StringItems memory items, uint256 size) internal pure {\\n        items.items = new EventUtils.StringKeyValue[](size);\\n    }\\n\\n    function initArrayItems(StringItems memory items, uint256 size) internal pure {\\n        items.arrayItems = new EventUtils.StringArrayKeyValue[](size);\\n    }\\n\\n    function setItem(StringItems memory items, uint256 index, string memory key, string memory value) internal pure {\\n        items.items[index].key = key;\\n        items.items[index].value = value;\\n    }\\n\\n    function setItem(StringItems memory items, uint256 index, string memory key, string[] memory value) internal pure {\\n        items.arrayItems[index].key = key;\\n        items.arrayItems[index].value = value;\\n    }\\n}\\n\",\"keccak256\":\"0x42c23cd06e17a2eb9c6d86015316f42acef002eaab1010aad9df98450523bad9\",\"license\":\"BUSL-1.1\"},\"contracts/exchange/IOrderHandler.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../order/IBaseOrderUtils.sol\\\";\\nimport \\\"../oracle/OracleUtils.sol\\\";\\n\\ninterface IOrderHandler {\\n    function createOrder(address account, IBaseOrderUtils.CreateOrderParams calldata params) external returns (bytes32);\\n\\n    function simulateExecuteOrder(bytes32 key, OracleUtils.SimulatePricesParams memory params) external;\\n\\n    function updateOrder(\\n        bytes32 key,\\n        uint256 sizeDeltaUsd,\\n        uint256 acceptablePrice,\\n        uint256 triggerPrice,\\n        uint256 minOutputAmount,\\n        bool autoCancel,\\n        Order.Props memory order\\n    ) external;\\n\\n    function cancelOrder(bytes32 key) external;\\n}\\n\",\"keccak256\":\"0x3993b5dc8be735fab828bd5f93cdd5146df3e7f4c852ef282251ce9f778ec114\",\"license\":\"BUSL-1.1\"},\"contracts/feature/FeatureUtils.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../data/DataStore.sol\\\";\\nimport \\\"../data/Keys.sol\\\";\\n\\n// @title FeatureUtils\\n// @dev Library to validate if a feature is enabled or disabled\\n// disabling a feature should only be used if it is absolutely necessary\\n// disabling of features could lead to unexpected effects, e.g. increasing / decreasing of orders\\n// could be disabled while liquidations may remain enabled\\n// this could also occur if the chain is not producing blocks and lead to liquidatable positions\\n// when block production resumes\\n// the effects of disabling features should be carefully considered\\nlibrary FeatureUtils {\\n    // @dev get whether a feature is disabled\\n    // @param dataStore DataStore\\n    // @param key the feature key\\n    // @return whether the feature is disabled\\n    function isFeatureDisabled(DataStore dataStore, bytes32 key) internal view returns (bool) {\\n        return dataStore.getBool(key);\\n    }\\n\\n    // @dev validate whether a feature is enabled, reverts if the feature is disabled\\n    // @param dataStore DataStore\\n    // @param key the feature key\\n    function validateFeature(DataStore dataStore, bytes32 key) internal view {\\n        if (isFeatureDisabled(dataStore, key)) {\\n            revert Errors.DisabledFeature(key);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe8d751714c1b94c26130f8bce18e316467813e7c2b36222be7a97f58360fba93\",\"license\":\"BUSL-1.1\"},\"contracts/oracle/OracleUtils.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Array.sol\\\";\\nimport \\\"../utils/Bits.sol\\\";\\nimport \\\"../price/Price.sol\\\";\\nimport \\\"../utils/Printer.sol\\\";\\n\\n// @title OracleUtils\\n// @dev Library for oracle functions\\nlibrary OracleUtils {\\n    using Array for uint256[];\\n\\n    struct SetPricesParams {\\n        address[] tokens;\\n        address[] providers;\\n        bytes[] data;\\n    }\\n\\n    struct ValidatedPrice {\\n        address token;\\n        uint256 min;\\n        uint256 max;\\n        uint256 timestamp;\\n        address provider;\\n    }\\n\\n    struct SimulatePricesParams {\\n        address[] primaryTokens;\\n        Price.Props[] primaryPrices;\\n        uint256 minTimestamp;\\n        uint256 maxTimestamp;\\n    }\\n\\n    function isOracleError(bytes4 errorSelector) internal pure returns (bool) {\\n        if (isOracleTimestampError(errorSelector)) {\\n            return true;\\n        }\\n\\n        if (isEmptyPriceError(errorSelector)) {\\n            return true;\\n        }\\n\\n        return false;\\n    }\\n\\n    function isEmptyPriceError(bytes4 errorSelector) internal pure returns (bool) {\\n        if (errorSelector == Errors.EmptyPrimaryPrice.selector) {\\n            return true;\\n        }\\n\\n        return false;\\n    }\\n\\n    function isOracleTimestampError(bytes4 errorSelector) internal pure returns (bool) {\\n        if (errorSelector == Errors.OracleTimestampsAreLargerThanRequestExpirationTime.selector) {\\n            return true;\\n        }\\n\\n        if (errorSelector == Errors.OracleTimestampsAreSmallerThanRequired.selector) {\\n            return true;\\n        }\\n\\n        return false;\\n    }\\n}\\n\",\"keccak256\":\"0xabe575febb3fe7ce544b02215a0b870f1f00219df077d7fd6b73175e807f0454\",\"license\":\"BUSL-1.1\"},\"contracts/order/IBaseOrderUtils.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Order.sol\\\";\\n\\ninterface IBaseOrderUtils {\\n    // @dev CreateOrderParams struct used in createOrder to avoid stack\\n    // too deep errors\\n    //\\n    // @param addresses address values\\n    // @param numbers number values\\n    // @param orderType for order.orderType\\n    // @param decreasePositionSwapType for order.decreasePositionSwapType\\n    // @param isLong for order.isLong\\n    // @param shouldUnwrapNativeToken for order.shouldUnwrapNativeToken\\n    struct CreateOrderParams {\\n        CreateOrderParamsAddresses addresses;\\n        CreateOrderParamsNumbers numbers;\\n        Order.OrderType orderType;\\n        Order.DecreasePositionSwapType decreasePositionSwapType;\\n        bool isLong;\\n        bool shouldUnwrapNativeToken;\\n        bool autoCancel;\\n        bytes32 referralCode;\\n    }\\n\\n    struct CreateOrderParamsAddresses {\\n        address receiver;\\n        address cancellationReceiver;\\n        address callbackContract;\\n        address uiFeeReceiver;\\n        address market;\\n        address initialCollateralToken;\\n        address[] swapPath;\\n    }\\n\\n    // @param sizeDeltaUsd for order.sizeDeltaUsd\\n    // @param triggerPrice for order.triggerPrice\\n    // @param acceptablePrice for order.acceptablePrice\\n    // @param executionFee for order.executionFee\\n    // @param callbackGasLimit for order.callbackGasLimit\\n    // @param minOutputAmount for order.minOutputAmount\\n    struct CreateOrderParamsNumbers {\\n        uint256 sizeDeltaUsd;\\n        uint256 initialCollateralDeltaAmount;\\n        uint256 triggerPrice;\\n        uint256 acceptablePrice;\\n        uint256 executionFee;\\n        uint256 callbackGasLimit;\\n        uint256 minOutputAmount;\\n    }\\n}\\n\",\"keccak256\":\"0xab971a98ad7ab69222bc28ae950a7b39c97e2e2981f58fadba779d5957e0fd5f\",\"license\":\"BUSL-1.1\"},\"contracts/order/Order.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../chain/Chain.sol\\\";\\n\\n// @title Order\\n// @dev Struct for orders\\nlibrary Order {\\n    using Order for Props;\\n\\n    enum OrderType {\\n        // @dev MarketSwap: swap token A to token B at the current market price\\n        // the order will be cancelled if the minOutputAmount cannot be fulfilled\\n        MarketSwap,\\n        // @dev LimitSwap: swap token A to token B if the minOutputAmount can be fulfilled\\n        LimitSwap,\\n        // @dev MarketIncrease: increase position at the current market price\\n        // the order will be cancelled if the position cannot be increased at the acceptablePrice\\n        MarketIncrease,\\n        // @dev LimitIncrease: increase position if the triggerPrice is reached and the acceptablePrice can be fulfilled\\n        LimitIncrease,\\n        // @dev MarketDecrease: decrease position at the current market price\\n        // the order will be cancelled if the position cannot be decreased at the acceptablePrice\\n        MarketDecrease,\\n        // @dev LimitDecrease: decrease position if the triggerPrice is reached and the acceptablePrice can be fulfilled\\n        LimitDecrease,\\n        // @dev StopLossDecrease: decrease position if the triggerPrice is reached and the acceptablePrice can be fulfilled\\n        StopLossDecrease,\\n        // @dev Liquidation: allows liquidation of positions if the criteria for liquidation are met\\n        Liquidation\\n    }\\n\\n    // to help further differentiate orders\\n    enum SecondaryOrderType {\\n        None,\\n        Adl\\n    }\\n\\n    enum DecreasePositionSwapType {\\n        NoSwap,\\n        SwapPnlTokenToCollateralToken,\\n        SwapCollateralTokenToPnlToken\\n    }\\n\\n    // @dev there is a limit on the number of fields a struct can have when being passed\\n    // or returned as a memory variable which can cause \\\"Stack too deep\\\" errors\\n    // use sub-structs to avoid this issue\\n    // @param addresses address values\\n    // @param numbers number values\\n    // @param flags boolean values\\n    struct Props {\\n        Addresses addresses;\\n        Numbers numbers;\\n        Flags flags;\\n    }\\n\\n    // @param account the account of the order\\n    // @param receiver the receiver for any token transfers\\n    // this field is meant to allow the output of an order to be\\n    // received by an address that is different from the creator of the\\n    // order whether this is for swaps or whether the account is the owner\\n    // of a position\\n    // for funding fees and claimable collateral, the funds are still\\n    // credited to the owner of the position indicated by order.account\\n    // @param callbackContract the contract to call for callbacks\\n    // @param uiFeeReceiver the ui fee receiver\\n    // @param market the trading market\\n    // @param initialCollateralToken for increase orders, initialCollateralToken\\n    // is the token sent in by the user, the token will be swapped through the\\n    // specified swapPath, before being deposited into the position as collateral\\n    // for decrease orders, initialCollateralToken is the collateral token of the position\\n    // withdrawn collateral from the decrease of the position will be swapped\\n    // through the specified swapPath\\n    // for swaps, initialCollateralToken is the initial token sent for the swap\\n    // @param swapPath an array of market addresses to swap through\\n    struct Addresses {\\n        address account;\\n        address receiver;\\n        address cancellationReceiver;\\n        address callbackContract;\\n        address uiFeeReceiver;\\n        address market;\\n        address initialCollateralToken;\\n        address[] swapPath;\\n    }\\n\\n    // @param sizeDeltaUsd the requested change in position size\\n    // @param initialCollateralDeltaAmount for increase orders, initialCollateralDeltaAmount\\n    // is the amount of the initialCollateralToken sent in by the user\\n    // for decrease orders, initialCollateralDeltaAmount is the amount of the position's\\n    // collateralToken to withdraw\\n    // for swaps, initialCollateralDeltaAmount is the amount of initialCollateralToken sent\\n    // in for the swap\\n    // @param orderType the order type\\n    // @param triggerPrice the trigger price for non-market orders\\n    // @param acceptablePrice the acceptable execution price for increase / decrease orders\\n    // @param executionFee the execution fee for keepers\\n    // @param callbackGasLimit the gas limit for the callbackContract\\n    // @param minOutputAmount the minimum output amount for decrease orders and swaps\\n    // note that for decrease orders, multiple tokens could be received, for this reason, the\\n    // minOutputAmount value is treated as a USD value for validation in decrease orders\\n    // @param updatedAtBlock the block at which the order was last updated\\n    struct Numbers {\\n        OrderType orderType;\\n        DecreasePositionSwapType decreasePositionSwapType;\\n        uint256 sizeDeltaUsd;\\n        uint256 initialCollateralDeltaAmount;\\n        uint256 triggerPrice;\\n        uint256 acceptablePrice;\\n        uint256 executionFee;\\n        uint256 callbackGasLimit;\\n        uint256 minOutputAmount;\\n        uint256 updatedAtBlock;\\n        uint256 updatedAtTime;\\n    }\\n\\n    // @param isLong whether the order is for a long or short\\n    // @param shouldUnwrapNativeToken whether to unwrap native tokens before\\n    // transferring to the user\\n    // @param isFrozen whether the order is frozen\\n    struct Flags {\\n        bool isLong;\\n        bool shouldUnwrapNativeToken;\\n        bool isFrozen;\\n        bool autoCancel;\\n    }\\n\\n    // @dev the order account\\n    // @param props Props\\n    // @return the order account\\n    function account(Props memory props) internal pure returns (address) {\\n        return props.addresses.account;\\n    }\\n\\n    // @dev set the order account\\n    // @param props Props\\n    // @param value the value to set to\\n    function setAccount(Props memory props, address value) internal pure {\\n        props.addresses.account = value;\\n    }\\n\\n    // @dev the order receiver\\n    // @param props Props\\n    // @return the order receiver\\n    function receiver(Props memory props) internal pure returns (address) {\\n        return props.addresses.receiver;\\n    }\\n\\n    // @dev set the order receiver\\n    // @param props Props\\n    // @param value the value to set to\\n    function setReceiver(Props memory props, address value) internal pure {\\n        props.addresses.receiver = value;\\n    }\\n\\n    function cancellationReceiver(Props memory props) internal pure returns (address) {\\n        return props.addresses.cancellationReceiver;\\n    }\\n\\n    function setCancellationReceiver(Props memory props, address value) internal pure {\\n        props.addresses.cancellationReceiver = value;\\n    }\\n\\n    // @dev the order callbackContract\\n    // @param props Props\\n    // @return the order callbackContract\\n    function callbackContract(Props memory props) internal pure returns (address) {\\n        return props.addresses.callbackContract;\\n    }\\n\\n    // @dev set the order callbackContract\\n    // @param props Props\\n    // @param value the value to set to\\n    function setCallbackContract(Props memory props, address value) internal pure {\\n        props.addresses.callbackContract = value;\\n    }\\n\\n    // @dev the order market\\n    // @param props Props\\n    // @return the order market\\n    function market(Props memory props) internal pure returns (address) {\\n        return props.addresses.market;\\n    }\\n\\n    // @dev set the order market\\n    // @param props Props\\n    // @param value the value to set to\\n    function setMarket(Props memory props, address value) internal pure {\\n        props.addresses.market = value;\\n    }\\n\\n    // @dev the order initialCollateralToken\\n    // @param props Props\\n    // @return the order initialCollateralToken\\n    function initialCollateralToken(Props memory props) internal pure returns (address) {\\n        return props.addresses.initialCollateralToken;\\n    }\\n\\n    // @dev set the order initialCollateralToken\\n    // @param props Props\\n    // @param value the value to set to\\n    function setInitialCollateralToken(Props memory props, address value) internal pure {\\n        props.addresses.initialCollateralToken = value;\\n    }\\n\\n    // @dev the order uiFeeReceiver\\n    // @param props Props\\n    // @return the order uiFeeReceiver\\n    function uiFeeReceiver(Props memory props) internal pure returns (address) {\\n        return props.addresses.uiFeeReceiver;\\n    }\\n\\n    // @dev set the order uiFeeReceiver\\n    // @param props Props\\n    // @param value the value to set to\\n    function setUiFeeReceiver(Props memory props, address value) internal pure {\\n        props.addresses.uiFeeReceiver = value;\\n    }\\n\\n    // @dev the order swapPath\\n    // @param props Props\\n    // @return the order swapPath\\n    function swapPath(Props memory props) internal pure returns (address[] memory) {\\n        return props.addresses.swapPath;\\n    }\\n\\n    // @dev set the order swapPath\\n    // @param props Props\\n    // @param value the value to set to\\n    function setSwapPath(Props memory props, address[] memory value) internal pure {\\n        props.addresses.swapPath = value;\\n    }\\n\\n    // @dev the order type\\n    // @param props Props\\n    // @return the order type\\n    function orderType(Props memory props) internal pure returns (OrderType) {\\n        return props.numbers.orderType;\\n    }\\n\\n    // @dev set the order type\\n    // @param props Props\\n    // @param value the value to set to\\n    function setOrderType(Props memory props, OrderType value) internal pure {\\n        props.numbers.orderType = value;\\n    }\\n\\n    function decreasePositionSwapType(Props memory props) internal pure returns (DecreasePositionSwapType) {\\n        return props.numbers.decreasePositionSwapType;\\n    }\\n\\n    function setDecreasePositionSwapType(Props memory props, DecreasePositionSwapType value) internal pure {\\n        props.numbers.decreasePositionSwapType = value;\\n    }\\n\\n    // @dev the order sizeDeltaUsd\\n    // @param props Props\\n    // @return the order sizeDeltaUsd\\n    function sizeDeltaUsd(Props memory props) internal pure returns (uint256) {\\n        return props.numbers.sizeDeltaUsd;\\n    }\\n\\n    // @dev set the order sizeDeltaUsd\\n    // @param props Props\\n    // @param value the value to set to\\n    function setSizeDeltaUsd(Props memory props, uint256 value) internal pure {\\n        props.numbers.sizeDeltaUsd = value;\\n    }\\n\\n    // @dev the order initialCollateralDeltaAmount\\n    // @param props Props\\n    // @return the order initialCollateralDeltaAmount\\n    function initialCollateralDeltaAmount(Props memory props) internal pure returns (uint256) {\\n        return props.numbers.initialCollateralDeltaAmount;\\n    }\\n\\n    // @dev set the order initialCollateralDeltaAmount\\n    // @param props Props\\n    // @param value the value to set to\\n    function setInitialCollateralDeltaAmount(Props memory props, uint256 value) internal pure {\\n        props.numbers.initialCollateralDeltaAmount = value;\\n    }\\n\\n    // @dev the order triggerPrice\\n    // @param props Props\\n    // @return the order triggerPrice\\n    function triggerPrice(Props memory props) internal pure returns (uint256) {\\n        return props.numbers.triggerPrice;\\n    }\\n\\n    // @dev set the order triggerPrice\\n    // @param props Props\\n    // @param value the value to set to\\n    function setTriggerPrice(Props memory props, uint256 value) internal pure {\\n        props.numbers.triggerPrice = value;\\n    }\\n\\n    // @dev the order acceptablePrice\\n    // @param props Props\\n    // @return the order acceptablePrice\\n    function acceptablePrice(Props memory props) internal pure returns (uint256) {\\n        return props.numbers.acceptablePrice;\\n    }\\n\\n    // @dev set the order acceptablePrice\\n    // @param props Props\\n    // @param value the value to set to\\n    function setAcceptablePrice(Props memory props, uint256 value) internal pure {\\n        props.numbers.acceptablePrice = value;\\n    }\\n\\n    // @dev set the order executionFee\\n    // @param props Props\\n    // @param value the value to set to\\n    function setExecutionFee(Props memory props, uint256 value) internal pure {\\n        props.numbers.executionFee = value;\\n    }\\n\\n    // @dev the order executionFee\\n    // @param props Props\\n    // @return the order executionFee\\n    function executionFee(Props memory props) internal pure returns (uint256) {\\n        return props.numbers.executionFee;\\n    }\\n\\n    // @dev the order callbackGasLimit\\n    // @param props Props\\n    // @return the order callbackGasLimit\\n    function callbackGasLimit(Props memory props) internal pure returns (uint256) {\\n        return props.numbers.callbackGasLimit;\\n    }\\n\\n    // @dev set the order callbackGasLimit\\n    // @param props Props\\n    // @param value the value to set to\\n    function setCallbackGasLimit(Props memory props, uint256 value) internal pure {\\n        props.numbers.callbackGasLimit = value;\\n    }\\n\\n    // @dev the order minOutputAmount\\n    // @param props Props\\n    // @return the order minOutputAmount\\n    function minOutputAmount(Props memory props) internal pure returns (uint256) {\\n        return props.numbers.minOutputAmount;\\n    }\\n\\n    // @dev set the order minOutputAmount\\n    // @param props Props\\n    // @param value the value to set to\\n    function setMinOutputAmount(Props memory props, uint256 value) internal pure {\\n        props.numbers.minOutputAmount = value;\\n    }\\n\\n    // @dev the order updatedAtBlock\\n    // @param props Props\\n    // @return the order updatedAtBlock\\n    function updatedAtBlock(Props memory props) internal pure returns (uint256) {\\n        return props.numbers.updatedAtBlock;\\n    }\\n\\n    // @dev set the order updatedAtBlock\\n    // @param props Props\\n    // @param value the value to set to\\n    function setUpdatedAtBlock(Props memory props, uint256 value) internal pure {\\n        props.numbers.updatedAtBlock = value;\\n    }\\n\\n    // @dev the order updatedAtTime\\n    // @param props Props\\n    // @return the order updatedAtTime\\n    function updatedAtTime(Props memory props) internal pure returns (uint256) {\\n        return props.numbers.updatedAtTime;\\n    }\\n\\n    // @dev set the order updatedAtTime\\n    // @param props Props\\n    // @param value the value to set to\\n    function setUpdatedAtTime(Props memory props, uint256 value) internal pure {\\n        props.numbers.updatedAtTime = value;\\n    }\\n\\n    // @dev whether the order is for a long or short\\n    // @param props Props\\n    // @return whether the order is for a long or short\\n    function isLong(Props memory props) internal pure returns (bool) {\\n        return props.flags.isLong;\\n    }\\n\\n    // @dev set whether the order is for a long or short\\n    // @param props Props\\n    // @param value the value to set to\\n    function setIsLong(Props memory props, bool value) internal pure {\\n        props.flags.isLong = value;\\n    }\\n\\n    // @dev whether to unwrap the native token before transfers to the user\\n    // @param props Props\\n    // @return whether to unwrap the native token before transfers to the user\\n    function shouldUnwrapNativeToken(Props memory props) internal pure returns (bool) {\\n        return props.flags.shouldUnwrapNativeToken;\\n    }\\n\\n    // @dev set whether the native token should be unwrapped before being\\n    // transferred to the receiver\\n    // @param props Props\\n    // @param value the value to set to\\n    function setShouldUnwrapNativeToken(Props memory props, bool value) internal pure {\\n        props.flags.shouldUnwrapNativeToken = value;\\n    }\\n\\n    // @dev whether the order is frozen\\n    // @param props Props\\n    // @return whether the order is frozen\\n    function isFrozen(Props memory props) internal pure returns (bool) {\\n        return props.flags.isFrozen;\\n    }\\n\\n    // @dev set whether the order is frozen\\n    // transferred to the receiver\\n    // @param props Props\\n    // @param value the value to set to\\n    function setIsFrozen(Props memory props, bool value) internal pure {\\n        props.flags.isFrozen = value;\\n    }\\n\\n    function autoCancel(Props memory props) internal pure returns (bool) {\\n        return props.flags.autoCancel;\\n    }\\n\\n    function setAutoCancel(Props memory props, bool value) internal pure {\\n        props.flags.autoCancel = value;\\n    }\\n\\n    // @dev set the order.updatedAtBlock to the current block number\\n    // @param props Props\\n    function touch(Props memory props) internal view {\\n        props.setUpdatedAtBlock(Chain.currentBlockNumber());\\n        props.setUpdatedAtTime(Chain.currentTimestamp());\\n    }\\n}\\n\",\"keccak256\":\"0x91aa72247e49db361cab1a026c1239e206e8eecb990e9f014c8453bda1b42c46\",\"license\":\"BUSL-1.1\"},\"contracts/order/OrderStoreUtils.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../data/Keys.sol\\\";\\nimport \\\"../data/DataStore.sol\\\";\\n\\nimport \\\"./Order.sol\\\";\\n\\n/**\\n * @title OrderStoreUtils\\n * @dev Library for order storage functions\\n */\\nlibrary OrderStoreUtils {\\n    using Order for Order.Props;\\n\\n    bytes32 public constant ACCOUNT = keccak256(abi.encode(\\\"ACCOUNT\\\"));\\n    bytes32 public constant RECEIVER = keccak256(abi.encode(\\\"RECEIVER\\\"));\\n    bytes32 public constant CANCELLATION_RECEIVER = keccak256(abi.encode(\\\"CANCELLATION_RECEIVER\\\"));\\n    bytes32 public constant CALLBACK_CONTRACT = keccak256(abi.encode(\\\"CALLBACK_CONTRACT\\\"));\\n    bytes32 public constant UI_FEE_RECEIVER = keccak256(abi.encode(\\\"UI_FEE_RECEIVER\\\"));\\n    bytes32 public constant MARKET = keccak256(abi.encode(\\\"MARKET\\\"));\\n    bytes32 public constant INITIAL_COLLATERAL_TOKEN = keccak256(abi.encode(\\\"INITIAL_COLLATERAL_TOKEN\\\"));\\n    bytes32 public constant SWAP_PATH = keccak256(abi.encode(\\\"SWAP_PATH\\\"));\\n\\n    bytes32 public constant ORDER_TYPE = keccak256(abi.encode(\\\"ORDER_TYPE\\\"));\\n    bytes32 public constant DECREASE_POSITION_SWAP_TYPE = keccak256(abi.encode(\\\"DECREASE_POSITION_SWAP_TYPE\\\"));\\n    bytes32 public constant SIZE_DELTA_USD = keccak256(abi.encode(\\\"SIZE_DELTA_USD\\\"));\\n    bytes32 public constant INITIAL_COLLATERAL_DELTA_AMOUNT = keccak256(abi.encode(\\\"INITIAL_COLLATERAL_DELTA_AMOUNT\\\"));\\n    bytes32 public constant TRIGGER_PRICE = keccak256(abi.encode(\\\"TRIGGER_PRICE\\\"));\\n    bytes32 public constant ACCEPTABLE_PRICE = keccak256(abi.encode(\\\"ACCEPTABLE_PRICE\\\"));\\n    bytes32 public constant EXECUTION_FEE = keccak256(abi.encode(\\\"EXECUTION_FEE\\\"));\\n    bytes32 public constant CALLBACK_GAS_LIMIT = keccak256(abi.encode(\\\"CALLBACK_GAS_LIMIT\\\"));\\n    bytes32 public constant MIN_OUTPUT_AMOUNT = keccak256(abi.encode(\\\"MIN_OUTPUT_AMOUNT\\\"));\\n    bytes32 public constant UPDATED_AT_BLOCK = keccak256(abi.encode(\\\"UPDATED_AT_BLOCK\\\"));\\n    bytes32 public constant UPDATED_AT_TIME = keccak256(abi.encode(\\\"UPDATED_AT_TIME\\\"));\\n\\n    bytes32 public constant IS_LONG = keccak256(abi.encode(\\\"IS_LONG\\\"));\\n    bytes32 public constant SHOULD_UNWRAP_NATIVE_TOKEN = keccak256(abi.encode(\\\"SHOULD_UNWRAP_NATIVE_TOKEN\\\"));\\n    bytes32 public constant IS_FROZEN = keccak256(abi.encode(\\\"IS_FROZEN\\\"));\\n    bytes32 public constant AUTO_CANCEL = keccak256(abi.encode(\\\"AUTO_CANCEL\\\"));\\n\\n    function get(DataStore dataStore, bytes32 key) external view returns (Order.Props memory) {\\n        Order.Props memory order;\\n        if (!dataStore.containsBytes32(Keys.ORDER_LIST, key)) {\\n            return order;\\n        }\\n\\n        order.setAccount(dataStore.getAddress(\\n            keccak256(abi.encode(key, ACCOUNT))\\n        ));\\n\\n        order.setReceiver(dataStore.getAddress(\\n            keccak256(abi.encode(key, RECEIVER))\\n        ));\\n\\n        order.setCancellationReceiver(dataStore.getAddress(\\n            keccak256(abi.encode(key, CANCELLATION_RECEIVER))\\n        ));\\n\\n        order.setCallbackContract(dataStore.getAddress(\\n            keccak256(abi.encode(key, CALLBACK_CONTRACT))\\n        ));\\n\\n        order.setUiFeeReceiver(dataStore.getAddress(\\n            keccak256(abi.encode(key, UI_FEE_RECEIVER))\\n        ));\\n\\n        order.setMarket(dataStore.getAddress(\\n            keccak256(abi.encode(key, MARKET))\\n        ));\\n\\n        order.setInitialCollateralToken(dataStore.getAddress(\\n            keccak256(abi.encode(key, INITIAL_COLLATERAL_TOKEN))\\n        ));\\n\\n        order.setSwapPath(dataStore.getAddressArray(\\n            keccak256(abi.encode(key, SWAP_PATH))\\n        ));\\n\\n        order.setOrderType(Order.OrderType(dataStore.getUint(\\n            keccak256(abi.encode(key, ORDER_TYPE))\\n        )));\\n\\n        order.setDecreasePositionSwapType(Order.DecreasePositionSwapType(dataStore.getUint(\\n            keccak256(abi.encode(key, DECREASE_POSITION_SWAP_TYPE))\\n        )));\\n\\n        order.setSizeDeltaUsd(dataStore.getUint(\\n            keccak256(abi.encode(key, SIZE_DELTA_USD))\\n        ));\\n\\n        order.setInitialCollateralDeltaAmount(dataStore.getUint(\\n            keccak256(abi.encode(key, INITIAL_COLLATERAL_DELTA_AMOUNT))\\n        ));\\n\\n        order.setTriggerPrice(dataStore.getUint(\\n            keccak256(abi.encode(key, TRIGGER_PRICE))\\n        ));\\n\\n        order.setAcceptablePrice(dataStore.getUint(\\n            keccak256(abi.encode(key, ACCEPTABLE_PRICE))\\n        ));\\n\\n        order.setExecutionFee(dataStore.getUint(\\n            keccak256(abi.encode(key, EXECUTION_FEE))\\n        ));\\n\\n        order.setCallbackGasLimit(dataStore.getUint(\\n            keccak256(abi.encode(key, CALLBACK_GAS_LIMIT))\\n        ));\\n\\n        order.setMinOutputAmount(dataStore.getUint(\\n            keccak256(abi.encode(key, MIN_OUTPUT_AMOUNT))\\n        ));\\n\\n        order.setUpdatedAtBlock(dataStore.getUint(\\n            keccak256(abi.encode(key, UPDATED_AT_BLOCK))\\n        ));\\n\\n        order.setUpdatedAtTime(dataStore.getUint(\\n            keccak256(abi.encode(key, UPDATED_AT_TIME))\\n        ));\\n\\n        order.setIsLong(dataStore.getBool(\\n            keccak256(abi.encode(key, IS_LONG))\\n        ));\\n\\n        order.setShouldUnwrapNativeToken(dataStore.getBool(\\n            keccak256(abi.encode(key, SHOULD_UNWRAP_NATIVE_TOKEN))\\n        ));\\n\\n        order.setIsFrozen(dataStore.getBool(\\n            keccak256(abi.encode(key, IS_FROZEN))\\n        ));\\n\\n        order.setAutoCancel(dataStore.getBool(\\n            keccak256(abi.encode(key, AUTO_CANCEL))\\n        ));\\n\\n        return order;\\n    }\\n\\n    function set(DataStore dataStore, bytes32 key, Order.Props memory order) external {\\n        dataStore.addBytes32(\\n            Keys.ORDER_LIST,\\n            key\\n        );\\n\\n        dataStore.addBytes32(\\n            Keys.accountOrderListKey(order.account()),\\n            key\\n        );\\n\\n        dataStore.setAddress(\\n            keccak256(abi.encode(key, ACCOUNT)),\\n            order.account()\\n        );\\n\\n        dataStore.setAddress(\\n            keccak256(abi.encode(key, RECEIVER)),\\n            order.receiver()\\n        );\\n\\n        dataStore.setAddress(\\n            keccak256(abi.encode(key, CANCELLATION_RECEIVER)),\\n            order.cancellationReceiver()\\n        );\\n\\n        dataStore.setAddress(\\n            keccak256(abi.encode(key, CALLBACK_CONTRACT)),\\n            order.callbackContract()\\n        );\\n\\n        dataStore.setAddress(\\n            keccak256(abi.encode(key, UI_FEE_RECEIVER)),\\n            order.uiFeeReceiver()\\n        );\\n\\n        dataStore.setAddress(\\n            keccak256(abi.encode(key, MARKET)),\\n            order.market()\\n        );\\n\\n        dataStore.setAddress(\\n            keccak256(abi.encode(key, INITIAL_COLLATERAL_TOKEN)),\\n            order.initialCollateralToken()\\n        );\\n\\n        dataStore.setAddressArray(\\n            keccak256(abi.encode(key, SWAP_PATH)),\\n            order.swapPath()\\n        );\\n\\n        dataStore.setUint(\\n            keccak256(abi.encode(key, ORDER_TYPE)),\\n            uint256(order.orderType())\\n        );\\n\\n        dataStore.setUint(\\n            keccak256(abi.encode(key, DECREASE_POSITION_SWAP_TYPE)),\\n            uint256(order.decreasePositionSwapType())\\n        );\\n\\n        dataStore.setUint(\\n            keccak256(abi.encode(key, SIZE_DELTA_USD)),\\n            order.sizeDeltaUsd()\\n        );\\n\\n        dataStore.setUint(\\n            keccak256(abi.encode(key, INITIAL_COLLATERAL_DELTA_AMOUNT)),\\n            order.initialCollateralDeltaAmount()\\n        );\\n\\n        dataStore.setUint(\\n            keccak256(abi.encode(key, TRIGGER_PRICE)),\\n            order.triggerPrice()\\n        );\\n\\n        dataStore.setUint(\\n            keccak256(abi.encode(key, ACCEPTABLE_PRICE)),\\n            order.acceptablePrice()\\n        );\\n\\n        dataStore.setUint(\\n            keccak256(abi.encode(key, EXECUTION_FEE)),\\n            order.executionFee()\\n        );\\n\\n        dataStore.setUint(\\n            keccak256(abi.encode(key, CALLBACK_GAS_LIMIT)),\\n            order.callbackGasLimit()\\n        );\\n\\n        dataStore.setUint(\\n            keccak256(abi.encode(key, MIN_OUTPUT_AMOUNT)),\\n            order.minOutputAmount()\\n        );\\n\\n        dataStore.setUint(\\n            keccak256(abi.encode(key, UPDATED_AT_BLOCK)),\\n            order.updatedAtBlock()\\n        );\\n\\n        dataStore.setUint(\\n            keccak256(abi.encode(key, UPDATED_AT_TIME)),\\n            order.updatedAtTime()\\n        );\\n\\n        dataStore.setBool(\\n            keccak256(abi.encode(key, IS_LONG)),\\n            order.isLong()\\n        );\\n\\n        dataStore.setBool(\\n            keccak256(abi.encode(key, SHOULD_UNWRAP_NATIVE_TOKEN)),\\n            order.shouldUnwrapNativeToken()\\n        );\\n\\n        dataStore.setBool(\\n            keccak256(abi.encode(key, IS_FROZEN)),\\n            order.isFrozen()\\n        );\\n\\n        dataStore.setBool(\\n            keccak256(abi.encode(key, AUTO_CANCEL)),\\n            order.autoCancel()\\n        );\\n    }\\n\\n    function remove(DataStore dataStore, bytes32 key, address account) external {\\n        if (!dataStore.containsBytes32(Keys.ORDER_LIST, key)) {\\n            revert Errors.OrderNotFound(key);\\n        }\\n\\n        dataStore.removeBytes32(\\n            Keys.ORDER_LIST,\\n            key\\n        );\\n\\n        dataStore.removeBytes32(\\n            Keys.accountOrderListKey(account),\\n            key\\n        );\\n\\n        dataStore.removeAddress(\\n            keccak256(abi.encode(key, ACCOUNT))\\n        );\\n\\n        dataStore.removeAddress(\\n            keccak256(abi.encode(key, RECEIVER))\\n        );\\n\\n        dataStore.removeAddress(\\n            keccak256(abi.encode(key, CANCELLATION_RECEIVER))\\n        );\\n\\n        dataStore.removeAddress(\\n            keccak256(abi.encode(key, CALLBACK_CONTRACT))\\n        );\\n\\n        dataStore.removeAddress(\\n            keccak256(abi.encode(key, UI_FEE_RECEIVER))\\n        );\\n\\n        dataStore.removeAddress(\\n            keccak256(abi.encode(key, MARKET))\\n        );\\n\\n        dataStore.removeAddress(\\n            keccak256(abi.encode(key, INITIAL_COLLATERAL_TOKEN))\\n        );\\n\\n        dataStore.removeAddressArray(\\n            keccak256(abi.encode(key, SWAP_PATH))\\n        );\\n\\n        dataStore.removeUint(\\n            keccak256(abi.encode(key, ORDER_TYPE))\\n        );\\n\\n        dataStore.removeUint(\\n            keccak256(abi.encode(key, DECREASE_POSITION_SWAP_TYPE))\\n        );\\n\\n        dataStore.removeUint(\\n            keccak256(abi.encode(key, SIZE_DELTA_USD))\\n        );\\n\\n        dataStore.removeUint(\\n            keccak256(abi.encode(key, INITIAL_COLLATERAL_DELTA_AMOUNT))\\n        );\\n\\n        dataStore.removeUint(\\n            keccak256(abi.encode(key, TRIGGER_PRICE))\\n        );\\n\\n        dataStore.removeUint(\\n            keccak256(abi.encode(key, ACCEPTABLE_PRICE))\\n        );\\n\\n        dataStore.removeUint(\\n            keccak256(abi.encode(key, EXECUTION_FEE))\\n        );\\n\\n        dataStore.removeUint(\\n            keccak256(abi.encode(key, CALLBACK_GAS_LIMIT))\\n        );\\n\\n        dataStore.removeUint(\\n            keccak256(abi.encode(key, MIN_OUTPUT_AMOUNT))\\n        );\\n\\n        dataStore.removeUint(\\n            keccak256(abi.encode(key, UPDATED_AT_BLOCK))\\n        );\\n\\n        dataStore.removeUint(\\n            keccak256(abi.encode(key, UPDATED_AT_TIME))\\n        );\\n\\n        dataStore.removeBool(\\n            keccak256(abi.encode(key, IS_LONG))\\n        );\\n\\n        dataStore.removeBool(\\n            keccak256(abi.encode(key, SHOULD_UNWRAP_NATIVE_TOKEN))\\n        );\\n\\n        dataStore.removeBool(\\n            keccak256(abi.encode(key, IS_FROZEN))\\n        );\\n\\n        dataStore.removeBool(\\n            keccak256(abi.encode(key, AUTO_CANCEL))\\n        );\\n    }\\n\\n    function getOrderCount(DataStore dataStore) internal view returns (uint256) {\\n        return dataStore.getBytes32Count(Keys.ORDER_LIST);\\n    }\\n\\n    function getOrderKeys(DataStore dataStore, uint256 start, uint256 end) internal view returns (bytes32[] memory) {\\n        return dataStore.getBytes32ValuesAt(Keys.ORDER_LIST, start, end);\\n    }\\n\\n    function getAccountOrderCount(DataStore dataStore, address account) internal view returns (uint256) {\\n        return dataStore.getBytes32Count(Keys.accountOrderListKey(account));\\n    }\\n\\n    function getAccountOrderKeys(DataStore dataStore, address account, uint256 start, uint256 end) internal view returns (bytes32[] memory) {\\n        return dataStore.getBytes32ValuesAt(Keys.accountOrderListKey(account), start, end);\\n    }\\n}\\n\",\"keccak256\":\"0xc4889b5eca378162e6392f583627293ce264b1a487977dc8b773cd70ecbccaf2\",\"license\":\"BUSL-1.1\"},\"contracts/order/OrderVault.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../bank/StrictBank.sol\\\";\\n\\n// @title OrderVault\\n// @dev Vault for orders\\ncontract OrderVault is StrictBank {\\n    constructor(RoleStore _roleStore, DataStore _dataStore) StrictBank(_roleStore, _dataStore) {}\\n}\\n\",\"keccak256\":\"0x5c4378e51db582baa867cf83627f8d567a5724f9c52d684c3db31535424fa4a2\",\"license\":\"BUSL-1.1\"},\"contracts/price/Price.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\n// @title Price\\n// @dev Struct for prices\\nlibrary Price {\\n    // @param min the min price\\n    // @param max the max price\\n    struct Props {\\n        uint256 min;\\n        uint256 max;\\n    }\\n\\n    // @dev check if a price is empty\\n    // @param props Props\\n    // @return whether a price is empty\\n    function isEmpty(Props memory props) internal pure returns (bool) {\\n        return props.min == 0 || props.max == 0;\\n    }\\n\\n    // @dev get the average of the min and max values\\n    // @param props Props\\n    // @return the average of the min and max values\\n    function midPrice(Props memory props) internal pure returns (uint256) {\\n        return (props.max + props.min) / 2;\\n    }\\n\\n    // @dev pick either the min or max value\\n    // @param props Props\\n    // @param maximize whether to pick the min or max value\\n    // @return either the min or max value\\n    function pickPrice(Props memory props, bool maximize) internal pure returns (uint256) {\\n        return maximize ? props.max : props.min;\\n    }\\n\\n    // @dev pick the min or max price depending on whether it is for a long or short position\\n    // and whether the pending pnl should be maximized or not\\n    // @param props Props\\n    // @param isLong whether it is for a long or short position\\n    // @param maximize whether the pnl should be maximized or not\\n    // @return the min or max price\\n    function pickPriceForPnl(Props memory props, bool isLong, bool maximize) internal pure returns (uint256) {\\n        // for long positions, pick the larger price to maximize pnl\\n        // for short positions, pick the smaller price to maximize pnl\\n        if (isLong) {\\n            return maximize ? props.max : props.min;\\n        }\\n\\n        return maximize ? props.min : props.max;\\n    }\\n}\\n\",\"keccak256\":\"0x39783950d37d565ee3fbff5023206cfb6993bb49523e7fe37f367393cb54bedd\",\"license\":\"BUSL-1.1\"},\"contracts/role/Role.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Role\\n * @dev Library for role keys\\n */\\nlibrary Role {\\n    /**\\n     * @dev The ROLE_ADMIN role.\\n     * Hash: 0x56908b85b56869d7c69cd020749874f238259af9646ca930287866cdd660b7d9\\n     */\\n    bytes32 public constant ROLE_ADMIN = keccak256(abi.encode(\\\"ROLE_ADMIN\\\"));\\n\\n    /**\\n     * @dev The TIMELOCK_ADMIN role.\\n     * Hash: 0xf49b0c86b385620e25b0985905d1a112a5f1bc1d51a7a292a8cdf112b3a7c47c\\n     */\\n    bytes32 public constant TIMELOCK_ADMIN = keccak256(abi.encode(\\\"TIMELOCK_ADMIN\\\"));\\n\\n    /**\\n     * @dev The TIMELOCK_MULTISIG role.\\n     * Hash: 0xe068a8d811c3c8290a8be34607cfa3184b26ffb8dea4dde7a451adfba9fa173a\\n     */\\n    bytes32 public constant TIMELOCK_MULTISIG = keccak256(abi.encode(\\\"TIMELOCK_MULTISIG\\\"));\\n\\n    /**\\n     * @dev The CONFIG_KEEPER role.\\n     * Hash: 0x901fb3de937a1dcb6ecaf26886fda47a088e74f36232a0673eade97079dc225b\\n     */\\n    bytes32 public constant CONFIG_KEEPER = keccak256(abi.encode(\\\"CONFIG_KEEPER\\\"));\\n\\n    /**\\n     * @dev The LIMITED_CONFIG_KEEPER role.\\n     * Hash: 0xb49beded4d572a2d32002662fc5c735817329f4337b3a488aab0b5e835c01ba7\\n     */\\n    bytes32 public constant LIMITED_CONFIG_KEEPER = keccak256(abi.encode(\\\"LIMITED_CONFIG_KEEPER\\\"));\\n\\n    /**\\n     * @dev The CONTROLLER role.\\n     * Hash: 0x97adf037b2472f4a6a9825eff7d2dd45e37f2dc308df2a260d6a72af4189a65b\\n     */\\n    bytes32 public constant CONTROLLER = keccak256(abi.encode(\\\"CONTROLLER\\\"));\\n\\n    /**\\n     * @dev The GOV_TOKEN_CONTROLLER role.\\n     * Hash: 0x16a157db08319d4eaf6b157a71f5d2e18c6500cab8a25bee0b4f9c753cb13690\\n     */\\n    bytes32 public constant GOV_TOKEN_CONTROLLER = keccak256(abi.encode(\\\"GOV_TOKEN_CONTROLLER\\\"));\\n\\n    /**\\n     * @dev The ROUTER_PLUGIN role.\\n     * Hash: 0xc82e6cc76072f8edb32d42796e58e13ab6e145524eb6b36c073be82f20d410f3\\n     */\\n    bytes32 public constant ROUTER_PLUGIN = keccak256(abi.encode(\\\"ROUTER_PLUGIN\\\"));\\n\\n    /**\\n     * @dev The MARKET_KEEPER role.\\n     * Hash: 0xd66692c70b60cf1337e643d6a6473f6865d8c03f3c26b460df3d19b504fb46ae\\n     */\\n    bytes32 public constant MARKET_KEEPER = keccak256(abi.encode(\\\"MARKET_KEEPER\\\"));\\n\\n    /**\\n     * @dev The FEE_KEEPER role.\\n     * Hash: 0xe0ff4cc0c6ecffab6db3f63ea62dd53f8091919ac57669f1bb3d9828278081d8\\n     */\\n    bytes32 public constant FEE_KEEPER = keccak256(abi.encode(\\\"FEE_KEEPER\\\"));\\n\\n    /**\\n     * @dev The FEE_DISTRIBUTION_KEEPER role.\\n     * Hash: 0xc23a98a1bf683201c11eeeb8344052ad3bc603c8ddcad06093edc1e8dafa96a2\\n     */\\n    bytes32 public constant FEE_DISTRIBUTION_KEEPER = keccak256(abi.encode(\\\"FEE_DISTRIBUTION_KEEPER\\\"));\\n\\n    /**\\n     * @dev The ORDER_KEEPER role.\\n     * Hash: 0x40a07f8f0fc57fcf18b093d96362a8e661eaac7b7e6edbf66f242111f83a6794\\n     */\\n    bytes32 public constant ORDER_KEEPER = keccak256(abi.encode(\\\"ORDER_KEEPER\\\"));\\n\\n    /**\\n     * @dev The FROZEN_ORDER_KEEPER role.\\n     * Hash: 0xcb6c7bc0d25d73c91008af44527b80c56dee4db8965845d926a25659a4a8bc07\\n     */\\n    bytes32 public constant FROZEN_ORDER_KEEPER = keccak256(abi.encode(\\\"FROZEN_ORDER_KEEPER\\\"));\\n\\n    /**\\n     * @dev The PRICING_KEEPER role.\\n     * Hash: 0x2700e36dc4e6a0daa977bffd4368adbd48f8058da74152919f91f58eddb42103\\n     */\\n    bytes32 public constant PRICING_KEEPER = keccak256(abi.encode(\\\"PRICING_KEEPER\\\"));\\n    /**\\n     * @dev The LIQUIDATION_KEEPER role.\\n     * Hash: 0x556c788ffc0574ec93966d808c170833d96489c9c58f5bcb3dadf711ba28720e\\n     */\\n    bytes32 public constant LIQUIDATION_KEEPER = keccak256(abi.encode(\\\"LIQUIDATION_KEEPER\\\"));\\n    /**\\n     * @dev The ADL_KEEPER role.\\n     * Hash: 0xb37d64edaeaf5e634c13682dbd813f5a12fec9eb4f74433a089e7a3c3289af91\\n     */\\n    bytes32 public constant ADL_KEEPER = keccak256(abi.encode(\\\"ADL_KEEPER\\\"));\\n}\\n\",\"keccak256\":\"0x69e61559b9638a631d238c4b3780355190b3a94041e73154cf373aa9e021c968\",\"license\":\"BUSL-1.1\"},\"contracts/role/RoleModule.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./RoleStore.sol\\\";\\n\\n/**\\n * @title RoleModule\\n * @dev Contract for role validation functions\\n */\\ncontract RoleModule {\\n    RoleStore public immutable roleStore;\\n\\n    /**\\n     * @dev Constructor that initializes the role store for this contract.\\n     *\\n     * @param _roleStore The contract instance to use as the role store.\\n     */\\n    constructor(RoleStore _roleStore) {\\n        roleStore = _roleStore;\\n    }\\n\\n    /**\\n     * @dev Only allows the contract's own address to call the function.\\n     */\\n    modifier onlySelf() {\\n        if (msg.sender != address(this)) {\\n            revert Errors.Unauthorized(msg.sender, \\\"SELF\\\");\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @dev Only allows addresses with the TIMELOCK_MULTISIG role to call the function.\\n     */\\n    modifier onlyTimelockMultisig() {\\n        _validateRole(Role.TIMELOCK_MULTISIG, \\\"TIMELOCK_MULTISIG\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Only allows addresses with the TIMELOCK_ADMIN role to call the function.\\n     */\\n    modifier onlyTimelockAdmin() {\\n        _validateRole(Role.TIMELOCK_ADMIN, \\\"TIMELOCK_ADMIN\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Only allows addresses with the CONFIG_KEEPER role to call the function.\\n     */\\n    modifier onlyConfigKeeper() {\\n        _validateRole(Role.CONFIG_KEEPER, \\\"CONFIG_KEEPER\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Only allows addresses with the CONTROLLER role to call the function.\\n     */\\n    modifier onlyController() {\\n        _validateRole(Role.CONTROLLER, \\\"CONTROLLER\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Only allows addresses with the GOV_TOKEN_CONTROLLER role to call the function.\\n     */\\n    modifier onlyGovTokenController() {\\n        _validateRole(Role.GOV_TOKEN_CONTROLLER, \\\"GOV_TOKEN_CONTROLLER\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Only allows addresses with the ROUTER_PLUGIN role to call the function.\\n     */\\n    modifier onlyRouterPlugin() {\\n        _validateRole(Role.ROUTER_PLUGIN, \\\"ROUTER_PLUGIN\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Only allows addresses with the MARKET_KEEPER role to call the function.\\n     */\\n    modifier onlyMarketKeeper() {\\n        _validateRole(Role.MARKET_KEEPER, \\\"MARKET_KEEPER\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Only allows addresses with the FEE_KEEPER role to call the function.\\n     */\\n    modifier onlyFeeKeeper() {\\n        _validateRole(Role.FEE_KEEPER, \\\"FEE_KEEPER\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Only allows addresses with the FEE_DISTRIBUTION_KEEPER role to call the function.\\n     */\\n    modifier onlyFeeDistributionKeeper() {\\n        _validateRole(Role.FEE_DISTRIBUTION_KEEPER, \\\"FEE_DISTRIBUTION_KEEPER\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Only allows addresses with the ORDER_KEEPER role to call the function.\\n     */\\n    modifier onlyOrderKeeper() {\\n        _validateRole(Role.ORDER_KEEPER, \\\"ORDER_KEEPER\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Only allows addresses with the PRICING_KEEPER role to call the function.\\n     */\\n    modifier onlyPricingKeeper() {\\n        _validateRole(Role.PRICING_KEEPER, \\\"PRICING_KEEPER\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Only allows addresses with the LIQUIDATION_KEEPER role to call the function.\\n     */\\n    modifier onlyLiquidationKeeper() {\\n        _validateRole(Role.LIQUIDATION_KEEPER, \\\"LIQUIDATION_KEEPER\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Only allows addresses with the ADL_KEEPER role to call the function.\\n     */\\n    modifier onlyAdlKeeper() {\\n        _validateRole(Role.ADL_KEEPER, \\\"ADL_KEEPER\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Validates that the caller has the specified role.\\n     *\\n     * If the caller does not have the specified role, the transaction is reverted.\\n     *\\n     * @param role The key of the role to validate.\\n     * @param roleName The name of the role to validate.\\n     */\\n    function _validateRole(bytes32 role, string memory roleName) internal view {\\n        if (!roleStore.hasRole(msg.sender, role)) {\\n            revert Errors.Unauthorized(msg.sender, roleName);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf6d539917bd060144f9e204c4a2d2778bf38696d39c5ddefc128ca8c3fdea5ed\",\"license\":\"BUSL-1.1\"},\"contracts/role/RoleStore.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"../utils/EnumerableValues.sol\\\";\\nimport \\\"./Role.sol\\\";\\nimport \\\"../error/Errors.sol\\\";\\n\\n/**\\n * @title RoleStore\\n * @dev Stores roles and their members.\\n */\\ncontract RoleStore {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n    using EnumerableValues for EnumerableSet.AddressSet;\\n    using EnumerableValues for EnumerableSet.Bytes32Set;\\n\\n    EnumerableSet.Bytes32Set internal roles;\\n    mapping(bytes32 => EnumerableSet.AddressSet) internal roleMembers;\\n    // checking if an account has a role is a frequently used function\\n    // roleCache helps to save gas by offering a more efficient lookup\\n    // vs calling roleMembers[key].contains(account)\\n    mapping(address => mapping (bytes32 => bool)) roleCache;\\n\\n    modifier onlyRoleAdmin() {\\n        if (!hasRole(msg.sender, Role.ROLE_ADMIN)) {\\n            revert Errors.Unauthorized(msg.sender, \\\"ROLE_ADMIN\\\");\\n        }\\n        _;\\n    }\\n\\n    constructor() {\\n        _grantRole(msg.sender, Role.ROLE_ADMIN);\\n    }\\n\\n    /**\\n     * @dev Grants the specified role to the given account.\\n     *\\n     * @param account The address of the account.\\n     * @param roleKey The key of the role to grant.\\n     */\\n    function grantRole(address account, bytes32 roleKey) external onlyRoleAdmin {\\n        _grantRole(account, roleKey);\\n    }\\n\\n    /**\\n     * @dev Revokes the specified role from the given account.\\n     *\\n     * @param account The address of the account.\\n     * @param roleKey The key of the role to revoke.\\n     */\\n    function revokeRole(address account, bytes32 roleKey) external onlyRoleAdmin {\\n        _revokeRole(account, roleKey);\\n    }\\n\\n    /**\\n     * @dev Returns true if the given account has the specified role.\\n     *\\n     * @param account The address of the account.\\n     * @param roleKey The key of the role.\\n     * @return True if the account has the role, false otherwise.\\n     */\\n    function hasRole(address account, bytes32 roleKey) public view returns (bool) {\\n        return roleCache[account][roleKey];\\n    }\\n\\n    /**\\n     * @dev Returns the number of roles stored in the contract.\\n     *\\n     * @return The number of roles.\\n     */\\n    function getRoleCount() external view returns (uint256) {\\n        return roles.length();\\n    }\\n\\n    /**\\n     * @dev Returns the keys of the roles stored in the contract.\\n     *\\n     * @param start The starting index of the range of roles to return.\\n     * @param end The ending index of the range of roles to return.\\n     * @return The keys of the roles.\\n     */\\n    function getRoles(uint256 start, uint256 end) external view returns (bytes32[] memory) {\\n        return roles.valuesAt(start, end);\\n    }\\n\\n    /**\\n     * @dev Returns the number of members of the specified role.\\n     *\\n     * @param roleKey The key of the role.\\n     * @return The number of members of the role.\\n     */\\n    function getRoleMemberCount(bytes32 roleKey) external view returns (uint256) {\\n        return roleMembers[roleKey].length();\\n    }\\n\\n    /**\\n     * @dev Returns the members of the specified role.\\n     *\\n     * @param roleKey The key of the role.\\n     * @param start the start index, the value for this index will be included.\\n     * @param end the end index, the value for this index will not be included.\\n     * @return The members of the role.\\n     */\\n    function getRoleMembers(bytes32 roleKey, uint256 start, uint256 end) external view returns (address[] memory) {\\n        return roleMembers[roleKey].valuesAt(start, end);\\n    }\\n\\n    function _grantRole(address account, bytes32 roleKey) internal {\\n        roles.add(roleKey);\\n        roleMembers[roleKey].add(account);\\n        roleCache[account][roleKey] = true;\\n    }\\n\\n    function _revokeRole(address account, bytes32 roleKey) internal {\\n        roleMembers[roleKey].remove(account);\\n        roleCache[account][roleKey] = false;\\n\\n        if (roleMembers[roleKey].length() == 0) {\\n            if (roleKey == Role.ROLE_ADMIN) {\\n                revert Errors.ThereMustBeAtLeastOneRoleAdmin();\\n            }\\n            if (roleKey == Role.TIMELOCK_MULTISIG) {\\n                revert Errors.ThereMustBeAtLeastOneTimelockMultiSig();\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaa7be1876450ec19568c0e12e4238332c96eb921974a19c0e4a6fe1fb943bf6d\",\"license\":\"BUSL-1.1\"},\"contracts/router/BaseRouter.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\nimport \\\"../utils/PayableMulticall.sol\\\";\\nimport \\\"../utils/AccountUtils.sol\\\";\\n\\nimport \\\"../data/DataStore.sol\\\";\\nimport \\\"../event/EventEmitter.sol\\\";\\nimport \\\"../token/TokenUtils.sol\\\";\\n\\nimport \\\"./Router.sol\\\";\\n\\ncontract BaseRouter is ReentrancyGuard, PayableMulticall, RoleModule {\\n    using SafeERC20 for IERC20;\\n\\n    Router public immutable router;\\n    DataStore public immutable dataStore;\\n    EventEmitter public immutable eventEmitter;\\n\\n    constructor(\\n        Router _router,\\n        RoleStore _roleStore,\\n        DataStore _dataStore,\\n        EventEmitter _eventEmitter\\n    ) RoleModule(_roleStore) {\\n        router = _router;\\n        dataStore = _dataStore;\\n        eventEmitter = _eventEmitter;\\n    }\\n\\n    // @dev Wraps the specified amount of native tokens into WNT then sends the WNT to the specified address\\n    function sendWnt(address receiver, uint256 amount) external payable nonReentrant {\\n        AccountUtils.validateReceiver(receiver);\\n        TokenUtils.depositAndSendWrappedNativeToken(dataStore, receiver, amount);\\n    }\\n\\n    // @dev Sends the given amount of tokens to the given address\\n    function sendTokens(address token, address receiver, uint256 amount) external payable nonReentrant {\\n        AccountUtils.validateReceiver(receiver);\\n        address account = msg.sender;\\n        router.pluginTransfer(token, account, receiver, amount);\\n    }\\n\\n    function sendNativeToken(address receiver, uint256 amount) external payable nonReentrant {\\n        AccountUtils.validateReceiver(receiver);\\n        TokenUtils.sendNativeToken(dataStore, receiver, amount);\\n    }\\n}\\n\",\"keccak256\":\"0xad289997c678f1505bb66bab6f023ef7dcd72775965cdcbd9e762a3c9e7d77e8\",\"license\":\"BUSL-1.1\"},\"contracts/router/Router.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport \\\"../role/RoleModule.sol\\\";\\n\\n/**\\n * @title Router\\n * @dev Users will approve this router for token spenditures\\n */\\ncontract Router is RoleModule {\\n    using SafeERC20 for IERC20;\\n\\n    constructor(RoleStore _roleStore) RoleModule(_roleStore) {}\\n\\n    /**\\n     * @dev transfer the specified amount of tokens from the account to the receiver\\n     * @param token the token to transfer\\n     * @param account the account to transfer from\\n     * @param receiver the account to transfer to\\n     * @param amount the amount of tokens to transfer\\n     */\\n    function pluginTransfer(address token, address account, address receiver, uint256 amount) external onlyRouterPlugin {\\n        IERC20(token).safeTransferFrom(account, receiver, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x8f1115b829d11b6f77e9380c91e5eee2ecaf217796686ec14a9bd55aa076d916\",\"license\":\"BUSL-1.1\"},\"contracts/router/SubaccountRouter.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./BaseRouter.sol\\\";\\nimport \\\"../exchange/IOrderHandler.sol\\\";\\nimport \\\"../feature/FeatureUtils.sol\\\";\\nimport \\\"../subaccount/SubaccountUtils.sol\\\";\\nimport \\\"../order/OrderVault.sol\\\";\\nimport \\\"../order/OrderStoreUtils.sol\\\";\\n\\ncontract SubaccountRouter is BaseRouter {\\n    using EventUtils for EventUtils.AddressItems;\\n    using EventUtils for EventUtils.UintItems;\\n    using EventUtils for EventUtils.IntItems;\\n    using EventUtils for EventUtils.BoolItems;\\n    using EventUtils for EventUtils.Bytes32Items;\\n    using EventUtils for EventUtils.BytesItems;\\n    using EventUtils for EventUtils.StringItems;\\n\\n    using Order for Order.Props;\\n\\n    IOrderHandler public immutable orderHandler;\\n    OrderVault public immutable orderVault;\\n\\n    constructor(\\n        Router _router,\\n        RoleStore _roleStore,\\n        DataStore _dataStore,\\n        EventEmitter _eventEmitter,\\n        IOrderHandler _orderHandler,\\n        OrderVault _orderVault\\n    ) BaseRouter(_router, _roleStore, _dataStore, _eventEmitter) {\\n        orderHandler = _orderHandler;\\n        orderVault = _orderVault;\\n    }\\n\\n    receive() external payable {\\n        address wnt = TokenUtils.wnt(dataStore);\\n        if (msg.sender != wnt) {\\n            revert Errors.InvalidNativeTokenSender(msg.sender);\\n        }\\n    }\\n\\n    function addSubaccount(address subaccount) external payable nonReentrant {\\n        address account = msg.sender;\\n        SubaccountUtils.addSubaccount(dataStore, eventEmitter, account, subaccount);\\n    }\\n\\n    function removeSubaccount(address subaccount) external payable nonReentrant {\\n        address account = msg.sender;\\n        SubaccountUtils.removeSubaccount(dataStore, eventEmitter, account, subaccount);\\n    }\\n\\n    function setMaxAllowedSubaccountActionCount(\\n        address subaccount,\\n        bytes32 actionType,\\n        uint256 maxAllowedCount\\n    ) external payable nonReentrant {\\n        address account = msg.sender;\\n\\n        SubaccountUtils.setMaxAllowedSubaccountActionCount(\\n            dataStore,\\n            eventEmitter,\\n            account,\\n            subaccount,\\n            actionType,\\n            maxAllowedCount\\n        );\\n    }\\n\\n    function setSubaccountAutoTopUpAmount(\\n        address subaccount,\\n        uint256 amount\\n    ) external payable nonReentrant {\\n        address account = msg.sender;\\n\\n        SubaccountUtils.setSubaccountAutoTopUpAmount(\\n            dataStore,\\n            eventEmitter,\\n            account,\\n            subaccount,\\n            amount\\n        );\\n    }\\n\\n    function createOrder(\\n        address account,\\n        IBaseOrderUtils.CreateOrderParams calldata params\\n    ) external payable nonReentrant returns (bytes32) {\\n        uint256 startingGas = gasleft();\\n\\n        _handleSubaccountAction(account, Keys.SUBACCOUNT_ORDER_ACTION);\\n\\n        if (params.addresses.receiver != account) {\\n            revert Errors.InvalidReceiverForSubaccountOrder(params.addresses.receiver, account);\\n        }\\n\\n        if (\\n            params.orderType == Order.OrderType.MarketSwap ||\\n            params.orderType == Order.OrderType.LimitSwap ||\\n            params.orderType == Order.OrderType.MarketIncrease ||\\n            params.orderType == Order.OrderType.LimitIncrease\\n        ) {\\n            router.pluginTransfer(\\n                params.addresses.initialCollateralToken, // token\\n                account, // account\\n                address(orderVault), // receiver\\n                params.numbers.initialCollateralDeltaAmount // amount\\n            );\\n        }\\n\\n        bytes32 key = orderHandler.createOrder(\\n            account,\\n            params\\n        );\\n\\n        _autoTopUpSubaccount(\\n            account, // account\\n            msg.sender, // subaccount\\n            startingGas, // startingGas\\n            params.numbers.executionFee // executionFee\\n        );\\n\\n        return key;\\n    }\\n\\n    function updateOrder(\\n        bytes32 key,\\n        uint256 sizeDeltaUsd,\\n        uint256 acceptablePrice,\\n        uint256 triggerPrice,\\n        uint256 minOutputAmount,\\n        bool autoCancel\\n    ) external payable nonReentrant {\\n        uint256 startingGas = gasleft();\\n\\n        Order.Props memory order = OrderStoreUtils.get(dataStore, key);\\n\\n        if (order.account() == address(0)) { revert Errors.EmptyOrder(); }\\n\\n        _handleSubaccountAction(order.account(), Keys.SUBACCOUNT_ORDER_ACTION);\\n\\n        orderHandler.updateOrder(\\n            key,\\n            sizeDeltaUsd,\\n            acceptablePrice,\\n            triggerPrice,\\n            minOutputAmount,\\n            autoCancel,\\n            order\\n        );\\n\\n        _autoTopUpSubaccount(\\n            order.account(), // account\\n            msg.sender, // subaccount\\n            startingGas, // startingGas\\n            0 // executionFee\\n        );\\n    }\\n\\n    function cancelOrder(\\n        bytes32 key\\n    ) external payable nonReentrant {\\n        uint256 startingGas = gasleft();\\n\\n        Order.Props memory order = OrderStoreUtils.get(dataStore, key);\\n\\n        if (order.account() == address(0)) { revert Errors.EmptyOrder(); }\\n\\n        _handleSubaccountAction(order.account(), Keys.SUBACCOUNT_ORDER_ACTION);\\n\\n        orderHandler.cancelOrder(key);\\n\\n        _autoTopUpSubaccount(\\n            order.account(), // account\\n            msg.sender, // subaccount\\n            startingGas, // startingGas\\n            0 // executionFee\\n        );\\n    }\\n\\n    function _handleSubaccountAction(address account, bytes32 actionType) internal {\\n        FeatureUtils.validateFeature(dataStore, Keys.subaccountFeatureDisabledKey(address(this)));\\n\\n        address subaccount = msg.sender;\\n        SubaccountUtils.validateSubaccount(dataStore, account, subaccount);\\n\\n        SubaccountUtils.incrementSubaccountActionCount(\\n            dataStore,\\n            eventEmitter,\\n            account,\\n            subaccount,\\n            actionType\\n        );\\n    }\\n\\n    // the subaccount is topped up with wrapped native tokens\\n    // the subaccount should separately unwrap the token as needed\\n    function _autoTopUpSubaccount(address account, address subaccount, uint256 startingGas, uint256 executionFee) internal {\\n        uint256 amount = SubaccountUtils.getSubaccountAutoTopUpAmount(dataStore, account, subaccount);\\n        if (amount == 0) {\\n            return;\\n        }\\n\\n        IERC20 wnt = IERC20(dataStore.getAddress(Keys.WNT));\\n\\n        if (wnt.allowance(account, address(router)) < amount) { return; }\\n        if (wnt.balanceOf(account) < amount) { return; }\\n\\n        // cap the top up amount to the amount of native tokens used\\n        uint256 nativeTokensUsed = (startingGas - gasleft()) * tx.gasprice + executionFee;\\n        if (nativeTokensUsed < amount) { amount = nativeTokensUsed; }\\n\\n        router.pluginTransfer(\\n            address(wnt), // token\\n            account, // account\\n            address(this), // receiver\\n            amount // amount\\n        );\\n\\n        TokenUtils.withdrawAndSendNativeToken(\\n            dataStore,\\n            address(wnt),\\n            subaccount,\\n            amount\\n        );\\n\\n        EventUtils.EventLogData memory eventData;\\n\\n        eventData.addressItems.initItems(2);\\n        eventData.addressItems.setItem(0, \\\"account\\\", account);\\n        eventData.addressItems.setItem(1, \\\"subaccount\\\", subaccount);\\n\\n        eventData.uintItems.initItems(1);\\n        eventData.uintItems.setItem(0, \\\"amount\\\", amount);\\n\\n        eventEmitter.emitEventLog2(\\n            \\\"SubaccountAutoTopUp\\\",\\n            Cast.toBytes32(account),\\n            Cast.toBytes32(subaccount),\\n            eventData\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xcb6c2db99a4ad4dc6b2a99ece95c3c6b2619c1b87c2c561dfbcfdc141074b566\",\"license\":\"BUSL-1.1\"},\"contracts/subaccount/SubaccountUtils.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../data/Keys.sol\\\";\\nimport \\\"../data/DataStore.sol\\\";\\nimport \\\"../event/EventEmitter.sol\\\";\\nimport \\\"../utils/Cast.sol\\\";\\n\\nlibrary SubaccountUtils {\\n    using EventUtils for EventUtils.AddressItems;\\n    using EventUtils for EventUtils.UintItems;\\n    using EventUtils for EventUtils.IntItems;\\n    using EventUtils for EventUtils.BoolItems;\\n    using EventUtils for EventUtils.Bytes32Items;\\n    using EventUtils for EventUtils.BytesItems;\\n    using EventUtils for EventUtils.StringItems;\\n\\n    function addSubaccount(\\n        DataStore dataStore,\\n        EventEmitter eventEmitter,\\n        address account,\\n        address subaccount\\n    ) internal {\\n        bytes32 setKey = Keys.subaccountListKey(account);\\n        dataStore.addAddress(setKey, subaccount);\\n\\n        EventUtils.EventLogData memory eventData;\\n\\n        eventData.addressItems.initItems(2);\\n        eventData.addressItems.setItem(0, \\\"account\\\", account);\\n        eventData.addressItems.setItem(1, \\\"subaccount\\\", subaccount);\\n\\n        eventEmitter.emitEventLog2(\\n            \\\"AddSubaccount\\\",\\n            Cast.toBytes32(account),\\n            Cast.toBytes32(subaccount),\\n            eventData\\n        );\\n    }\\n\\n    function removeSubaccount(\\n        DataStore dataStore,\\n        EventEmitter eventEmitter,\\n        address account,\\n        address subaccount\\n    ) internal {\\n        bytes32 setKey = Keys.subaccountListKey(account);\\n        dataStore.removeAddress(setKey, subaccount);\\n\\n        EventUtils.EventLogData memory eventData;\\n\\n        eventData.addressItems.initItems(2);\\n        eventData.addressItems.setItem(0, \\\"account\\\", account);\\n        eventData.addressItems.setItem(1, \\\"subaccount\\\", subaccount);\\n\\n        eventEmitter.emitEventLog2(\\n            \\\"RemoveSubaccount\\\",\\n            Cast.toBytes32(account),\\n            Cast.toBytes32(subaccount),\\n            eventData\\n        );\\n    }\\n\\n    function incrementSubaccountActionCount(\\n        DataStore dataStore,\\n        EventEmitter eventEmitter,\\n        address account,\\n        address subaccount,\\n        bytes32 actionType\\n    ) internal {\\n        bytes32 key = Keys.subaccountActionCountKey(account, subaccount, actionType);\\n        uint256 nextValue = dataStore.incrementUint(key, 1);\\n        validateSubaccountActionCount(dataStore, account, subaccount, actionType, nextValue);\\n\\n        EventUtils.EventLogData memory eventData;\\n\\n        eventData.addressItems.initItems(2);\\n        eventData.addressItems.setItem(0, \\\"account\\\", account);\\n        eventData.addressItems.setItem(1, \\\"subaccount\\\", subaccount);\\n\\n        eventData.uintItems.initItems(1);\\n        eventData.uintItems.setItem(0, \\\"nextValue\\\", nextValue);\\n\\n        eventData.bytes32Items.initItems(1);\\n        eventData.bytes32Items.setItem(0, \\\"actionType\\\", actionType);\\n\\n        eventEmitter.emitEventLog2(\\n            \\\"IncrementSubaccountActionCount\\\",\\n            Cast.toBytes32(account),\\n            Cast.toBytes32(subaccount),\\n            eventData\\n        );\\n    }\\n\\n    function setMaxAllowedSubaccountActionCount(\\n        DataStore dataStore,\\n        EventEmitter eventEmitter,\\n        address account,\\n        address subaccount,\\n        bytes32 actionType,\\n        uint256 maxAllowedCount\\n    ) internal {\\n        bytes32 key = Keys.maxAllowedSubaccountActionCountKey(account, subaccount, actionType);\\n        dataStore.setUint(key, maxAllowedCount);\\n\\n        EventUtils.EventLogData memory eventData;\\n\\n        eventData.addressItems.initItems(2);\\n        eventData.addressItems.setItem(0, \\\"account\\\", account);\\n        eventData.addressItems.setItem(1, \\\"subaccount\\\", subaccount);\\n\\n        eventData.uintItems.initItems(1);\\n        eventData.uintItems.setItem(0, \\\"maxAllowedCount\\\", maxAllowedCount);\\n\\n        eventEmitter.emitEventLog2(\\n            \\\"SetMaxAllowedSubaccountActionCount\\\",\\n            Cast.toBytes32(account),\\n            Cast.toBytes32(subaccount),\\n            eventData\\n        );\\n    }\\n\\n    function validateSubaccountActionCount(\\n        DataStore dataStore,\\n        address account,\\n        address subaccount,\\n        bytes32 actionType,\\n        uint256 count\\n    ) internal view {\\n        bytes32 key = Keys.maxAllowedSubaccountActionCountKey(account, subaccount, actionType);\\n        uint256 maxCount = dataStore.getUint(key);\\n        if (count > maxCount) {\\n            revert Errors.MaxSubaccountActionCountExceeded(account, subaccount, count, maxCount);\\n        }\\n    }\\n\\n    function validateSubaccount(\\n        DataStore dataStore,\\n        address account,\\n        address subaccount\\n    ) internal view {\\n        bytes32 setKey = Keys.subaccountListKey(account);\\n        if (!dataStore.containsAddress(setKey, subaccount)) {\\n            revert Errors.SubaccountNotAuthorized(account, subaccount);\\n        }\\n    }\\n\\n    function getSubaccountAutoTopUpAmount(\\n        DataStore dataStore,\\n        address account,\\n        address subaccount\\n    ) internal view returns (uint256) {\\n        bytes32 key = Keys.subaccountAutoTopUpAmountKey(account, subaccount);\\n        return dataStore.getUint(key);\\n    }\\n\\n    function setSubaccountAutoTopUpAmount(\\n        DataStore dataStore,\\n        EventEmitter eventEmitter,\\n        address account,\\n        address subaccount,\\n        uint256 amount\\n    ) internal {\\n        bytes32 key = Keys.subaccountAutoTopUpAmountKey(account, subaccount);\\n\\n        dataStore.setUint(key, amount);\\n\\n        EventUtils.EventLogData memory eventData;\\n\\n        eventData.addressItems.initItems(2);\\n        eventData.addressItems.setItem(0, \\\"account\\\", account);\\n        eventData.addressItems.setItem(1, \\\"subaccount\\\", subaccount);\\n\\n        eventData.uintItems.initItems(1);\\n        eventData.uintItems.setItem(0, \\\"amount\\\", amount);\\n\\n        eventEmitter.emitEventLog2(\\n            \\\"SetSubaccountAutoTopUpAmount\\\",\\n            Cast.toBytes32(account),\\n            Cast.toBytes32(subaccount),\\n            eventData\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xad9c394dcd8c91a43ea3f91d452f7fc6a305274d4d8e3324de2091887e109964\",\"license\":\"BUSL-1.1\"},\"contracts/token/IWNT.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title IWNT\\n * @dev Interface for Wrapped Native Tokens, e.g. WETH\\n * The contract is named WNT instead of WETH for a more general reference name\\n * that can be used on any blockchain\\n */\\ninterface IWNT {\\n    function deposit() external payable;\\n    function withdraw(uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x366f887cceea33dba2247278d3827366cdcc3a3d7a2e3559fae430644ccbee02\",\"license\":\"BUSL-1.1\"},\"contracts/token/TokenUtils.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport \\\"../data/DataStore.sol\\\";\\nimport \\\"../data/Keys.sol\\\";\\nimport \\\"../error/ErrorUtils.sol\\\";\\nimport \\\"../utils/AccountUtils.sol\\\";\\n\\nimport \\\"./IWNT.sol\\\";\\n\\n/**\\n * @title TokenUtils\\n * @dev Library for token functions, helps with transferring of tokens and\\n * native token functions\\n */\\nlibrary TokenUtils {\\n    using Address for address;\\n    using SafeERC20 for IERC20;\\n\\n    event TokenTransferReverted(string reason, bytes returndata);\\n    event NativeTokenTransferReverted(string reason);\\n\\n    /**\\n     * @dev Returns the address of the WNT token.\\n     * @param dataStore DataStore contract instance where the address of the WNT token is stored.\\n     * @return The address of the WNT token.\\n     */\\n    function wnt(DataStore dataStore) internal view returns (address) {\\n        return dataStore.getAddress(Keys.WNT);\\n    }\\n\\n    /**\\n     * @dev Transfers the specified amount of `token` from the caller to `receiver`.\\n     * limit the amount of gas forwarded so that a user cannot intentionally\\n     * construct a token call that would consume all gas and prevent necessary\\n     * actions like request cancellation from being executed\\n     *\\n     * @param dataStore The data store that contains the `tokenTransferGasLimit` for the specified `token`.\\n     * @param token The address of the ERC20 token that is being transferred.\\n     * @param receiver The address of the recipient of the `token` transfer.\\n     * @param amount The amount of `token` to transfer.\\n     */\\n    function transfer(\\n        DataStore dataStore,\\n        address token,\\n        address receiver,\\n        uint256 amount\\n    ) internal {\\n        if (amount == 0) { return; }\\n        AccountUtils.validateReceiver(receiver);\\n\\n        uint256 gasLimit = dataStore.getUint(Keys.tokenTransferGasLimit(token));\\n        if (gasLimit == 0) {\\n            revert Errors.EmptyTokenTranferGasLimit(token);\\n        }\\n\\n        (bool success0, /* bytes memory returndata */) = nonRevertingTransferWithGasLimit(\\n            IERC20(token),\\n            receiver,\\n            amount,\\n            gasLimit\\n        );\\n\\n        if (success0) { return; }\\n\\n        address holdingAddress = dataStore.getAddress(Keys.HOLDING_ADDRESS);\\n\\n        if (holdingAddress == address(0)) {\\n            revert Errors.EmptyHoldingAddress();\\n        }\\n\\n        // in case transfers to the receiver fail due to blacklisting or other reasons\\n        // send the tokens to a holding address to avoid possible gaming through reverting\\n        // transfers\\n        (bool success1, bytes memory returndata) = nonRevertingTransferWithGasLimit(\\n            IERC20(token),\\n            holdingAddress,\\n            amount,\\n            gasLimit\\n        );\\n\\n        if (success1) { return; }\\n\\n        (string memory reason, /* bool hasRevertMessage */) = ErrorUtils.getRevertMessage(returndata);\\n        emit TokenTransferReverted(reason, returndata);\\n\\n        // throw custom errors to prevent spoofing of errors\\n        // this is necessary because contracts like DepositHandler, WithdrawalHandler, OrderHandler\\n        // do not cancel requests for specific errors\\n        revert Errors.TokenTransferError(token, receiver, amount);\\n    }\\n\\n    function sendNativeToken(\\n        DataStore dataStore,\\n        address receiver,\\n        uint256 amount\\n    ) internal {\\n        if (amount == 0) { return; }\\n\\n        AccountUtils.validateReceiver(receiver);\\n\\n        uint256 gasLimit = dataStore.getUint(Keys.NATIVE_TOKEN_TRANSFER_GAS_LIMIT);\\n\\n        bool success;\\n        // use an assembly call to avoid loading large data into memory\\n        // input mem[in\\u2026(in+insize)]\\n        // output area mem[out\\u2026(out+outsize))]\\n        assembly {\\n            success := call(\\n                gasLimit, // gas limit\\n                receiver, // receiver\\n                amount, // value\\n                0, // in\\n                0, // insize\\n                0, // out\\n                0 // outsize\\n            )\\n        }\\n\\n        if (success) { return; }\\n\\n        // if the transfer failed, re-wrap the token and send it to the receiver\\n        depositAndSendWrappedNativeToken(\\n            dataStore,\\n            receiver,\\n            amount\\n        );\\n    }\\n\\n    /**\\n     * Deposits the specified amount of native token and sends the specified\\n     * amount of wrapped native token to the specified receiver address.\\n     *\\n     * @param dataStore the data store to use for storing and retrieving data\\n     * @param receiver the address of the recipient of the wrapped native token transfer\\n     * @param amount the amount of native token to deposit and the amount of wrapped native token to send\\n     */\\n    function depositAndSendWrappedNativeToken(\\n        DataStore dataStore,\\n        address receiver,\\n        uint256 amount\\n    ) internal {\\n        if (amount == 0) { return; }\\n        AccountUtils.validateReceiver(receiver);\\n\\n        address _wnt = wnt(dataStore);\\n        IWNT(_wnt).deposit{value: amount}();\\n\\n        transfer(\\n            dataStore,\\n            _wnt,\\n            receiver,\\n            amount\\n        );\\n    }\\n\\n    /**\\n     * @dev Withdraws the specified amount of wrapped native token and sends the\\n     * corresponding amount of native token to the specified receiver address.\\n     *\\n     * limit the amount of gas forwarded so that a user cannot intentionally\\n     * construct a token call that would consume all gas and prevent necessary\\n     * actions like request cancellation from being executed\\n     *\\n     * @param dataStore the data store to use for storing and retrieving data\\n     * @param _wnt the address of the WNT contract to withdraw the wrapped native token from\\n     * @param receiver the address of the recipient of the native token transfer\\n     * @param amount the amount of wrapped native token to withdraw and the amount of native token to send\\n     */\\n    function withdrawAndSendNativeToken(\\n        DataStore dataStore,\\n        address _wnt,\\n        address receiver,\\n        uint256 amount\\n    ) internal {\\n        if (amount == 0) { return; }\\n        AccountUtils.validateReceiver(receiver);\\n\\n        IWNT(_wnt).withdraw(amount);\\n\\n        uint256 gasLimit = dataStore.getUint(Keys.NATIVE_TOKEN_TRANSFER_GAS_LIMIT);\\n\\n        bool success;\\n        // use an assembly call to avoid loading large data into memory\\n        // input mem[in\\u2026(in+insize)]\\n        // output area mem[out\\u2026(out+outsize))]\\n        assembly {\\n            success := call(\\n                gasLimit, // gas limit\\n                receiver, // receiver\\n                amount, // value\\n                0, // in\\n                0, // insize\\n                0, // out\\n                0 // outsize\\n            )\\n        }\\n\\n        if (success) { return; }\\n\\n        // if the transfer failed, re-wrap the token and send it to the receiver\\n        depositAndSendWrappedNativeToken(\\n            dataStore,\\n            receiver,\\n            amount\\n        );\\n    }\\n\\n    /**\\n     * @dev Transfers the specified amount of ERC20 token to the specified receiver\\n     * address, with a gas limit to prevent the transfer from consuming all available gas.\\n     * adapted from https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/utils/SafeERC20.sol\\n     *\\n     * @param token the ERC20 contract to transfer the tokens from\\n     * @param to the address of the recipient of the token transfer\\n     * @param amount the amount of tokens to transfer\\n     * @param gasLimit the maximum amount of gas that the token transfer can consume\\n     * @return a tuple containing a boolean indicating the success or failure of the\\n     * token transfer, and a bytes value containing the return data from the token transfer\\n     */\\n    function nonRevertingTransferWithGasLimit(\\n        IERC20 token,\\n        address to,\\n        uint256 amount,\\n        uint256 gasLimit\\n    ) internal returns (bool, bytes memory) {\\n        bytes memory data = abi.encodeWithSelector(token.transfer.selector, to, amount);\\n        (bool success, bytes memory returndata) = address(token).call{ gas: gasLimit }(data);\\n\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                if (!address(token).isContract()) {\\n                    return (false, \\\"Call to non-contract\\\");\\n                }\\n            }\\n\\n            // some tokens do not revert on a failed transfer, they will return a boolean instead\\n            // validate that the returned boolean is true, otherwise indicate that the token transfer failed\\n            if (returndata.length > 0 && !abi.decode(returndata, (bool))) {\\n                return (false, returndata);\\n            }\\n\\n            // transfers on some tokens do not return a boolean value, they will just revert if a transfer fails\\n            // for these tokens, if success is true then the transfer should have completed\\n            return (true, returndata);\\n        }\\n\\n        return (false, returndata);\\n    }\\n}\\n\",\"keccak256\":\"0xc9583947413e24886ca4c77406471a606614dada46e0aacb9f7962f629171810\",\"license\":\"BUSL-1.1\"},\"contracts/utils/AccountUtils.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../error/Errors.sol\\\";\\n\\nlibrary AccountUtils {\\n    function validateAccount(address account) internal pure {\\n        if (account == address(0)) {\\n            revert Errors.EmptyAccount();\\n        }\\n    }\\n\\n    function validateReceiver(address receiver) internal pure {\\n        if (receiver == address(0)) {\\n            revert Errors.EmptyReceiver();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8bbf2f55ff5f2de96cd5c060b87e60f598244c5c7bcb16c1b0be12e044ab07f5\",\"license\":\"BUSL-1.1\"},\"contracts/utils/Array.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\nimport \\\"../error/Errors.sol\\\";\\n\\n/**\\n * @title Array\\n * @dev Library for array functions\\n */\\nlibrary Array {\\n    using SafeCast for int256;\\n\\n    /**\\n     * @dev Gets the value of the element at the specified index in the given array. If the index is out of bounds, returns 0.\\n     *\\n     * @param arr the array to get the value from\\n     * @param index the index of the element in the array\\n     * @return the value of the element at the specified index in the array\\n     */\\n    function get(bytes32[] memory arr, uint256 index) internal pure returns (bytes32) {\\n        if (index < arr.length) {\\n            return arr[index];\\n        }\\n\\n        return bytes32(0);\\n    }\\n\\n    /**\\n     * @dev Determines whether all of the elements in the given array are equal to the specified value.\\n     *\\n     * @param arr the array to check the elements of\\n     * @param value the value to compare the elements of the array to\\n     * @return true if all of the elements in the array are equal to the specified value, false otherwise\\n     */\\n    function areEqualTo(uint256[] memory arr, uint256 value) internal pure returns (bool) {\\n        for (uint256 i; i < arr.length; i++) {\\n            if (arr[i] != value) {\\n                return false;\\n            }\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Determines whether all of the elements in the given array are greater than the specified value.\\n     *\\n     * @param arr the array to check the elements of\\n     * @param value the value to compare the elements of the array to\\n     * @return true if all of the elements in the array are greater than the specified value, false otherwise\\n     */\\n    function areGreaterThan(uint256[] memory arr, uint256 value) internal pure returns (bool) {\\n        for (uint256 i; i < arr.length; i++) {\\n            if (arr[i] <= value) {\\n                return false;\\n            }\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Determines whether all of the elements in the given array are greater than or equal to the specified value.\\n     *\\n     * @param arr the array to check the elements of\\n     * @param value the value to compare the elements of the array to\\n     * @return true if all of the elements in the array are greater than or equal to the specified value, false otherwise\\n     */\\n    function areGreaterThanOrEqualTo(uint256[] memory arr, uint256 value) internal pure returns (bool) {\\n        for (uint256 i; i < arr.length; i++) {\\n            if (arr[i] < value) {\\n                return false;\\n            }\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Determines whether all of the elements in the given array are less than the specified value.\\n     *\\n     * @param arr the array to check the elements of\\n     * @param value the value to compare the elements of the array to\\n     * @return true if all of the elements in the array are less than the specified value, false otherwise\\n     */\\n    function areLessThan(uint256[] memory arr, uint256 value) internal pure returns (bool) {\\n        for (uint256 i; i < arr.length; i++) {\\n            if (arr[i] >= value) {\\n                return false;\\n            }\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Determines whether all of the elements in the given array are less than or equal to the specified value.\\n     *\\n     * @param arr the array to check the elements of\\n     * @param value the value to compare the elements of the array to\\n     * @return true if all of the elements in the array are less than or equal to the specified value, false otherwise\\n     */\\n    function areLessThanOrEqualTo(uint256[] memory arr, uint256 value) internal pure returns (bool) {\\n        for (uint256 i; i < arr.length; i++) {\\n            if (arr[i] > value) {\\n                return false;\\n            }\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Gets the median value of the elements in the given array. For arrays with an odd number of elements, returns the element at the middle index. For arrays with an even number of elements, returns the average of the two middle elements.\\n     *\\n     * @param arr the array to get the median value from\\n     * @return the median value of the elements in the given array\\n     */\\n    function getMedian(uint256[] memory arr) internal pure returns (uint256) {\\n        if (arr.length % 2 == 1) {\\n            return arr[arr.length / 2];\\n        }\\n\\n        return (arr[arr.length / 2] + arr[arr.length / 2 - 1]) / 2;\\n    }\\n\\n    /**\\n     * @dev Gets the uncompacted value at the specified index in the given array of compacted values.\\n     *\\n     * @param compactedValues the array of compacted values to get the uncompacted value from\\n     * @param index the index of the uncompacted value in the array\\n     * @param compactedValueBitLength the length of each compacted value, in bits\\n     * @param bitmask the bitmask to use to extract the uncompacted value from the compacted value\\n     * @return the uncompacted value at the specified index in the array of compacted values\\n     */\\n    function getUncompactedValue(\\n        uint256[] memory compactedValues,\\n        uint256 index,\\n        uint256 compactedValueBitLength,\\n        uint256 bitmask,\\n        string memory label\\n    ) internal pure returns (uint256) {\\n        uint256 compactedValuesPerSlot = 256 / compactedValueBitLength;\\n\\n        uint256 slotIndex = index / compactedValuesPerSlot;\\n        if (slotIndex >= compactedValues.length) {\\n            revert Errors.CompactedArrayOutOfBounds(compactedValues, index, slotIndex, label);\\n        }\\n\\n        uint256 slotBits = compactedValues[slotIndex];\\n        uint256 offset = (index - slotIndex * compactedValuesPerSlot) * compactedValueBitLength;\\n\\n        uint256 value = (slotBits >> offset) & bitmask;\\n\\n        return value;\\n    }\\n}\\n\",\"keccak256\":\"0x83f525e9f489a37296d890e334ffa4f9e4a52e5194efd94d43b2a5ddaadf2ff1\",\"license\":\"BUSL-1.1\"},\"contracts/utils/Bits.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Bits\\n * @dev Library for bit values\\n */\\nlibrary Bits {\\n    // @dev uint256(~0) is 256 bits of 1s\\n    // @dev shift the 1s by (256 - 8) to get (256 - 8) 0s followed by 8 1s\\n    uint256 constant public BITMASK_8 = ~uint256(0) >> (256 - 8);\\n    // @dev shift the 1s by (256 - 16) to get (256 - 16) 0s followed by 16 1s\\n    uint256 constant public BITMASK_16 = ~uint256(0) >> (256 - 16);\\n    // @dev shift the 1s by (256 - 32) to get (256 - 32) 0s followed by 32 1s\\n    uint256 constant public BITMASK_32 = ~uint256(0) >> (256 - 32);\\n    // @dev shift the 1s by (256 - 64) to get (256 - 64) 0s followed by 64 1s\\n    uint256 constant public BITMASK_64 = ~uint256(0) >> (256 - 64);\\n}\\n\",\"keccak256\":\"0x894cff952fd828a0870df69ad280272ab173288042ca49ba34a4a5cb26fedd66\",\"license\":\"BUSL-1.1\"},\"contracts/utils/Calc.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SignedMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\n\\n/**\\n * @title Calc\\n * @dev Library for math functions\\n */\\nlibrary Calc {\\n    using SignedMath for int256;\\n    using SafeCast for uint256;\\n\\n    // this method assumes that min is less than max\\n    function boundMagnitude(int256 value, uint256 min, uint256 max) internal pure returns (int256) {\\n        uint256 magnitude = value.abs();\\n\\n        if (magnitude < min) {\\n            magnitude = min;\\n        }\\n\\n        if (magnitude > max) {\\n            magnitude = max;\\n        }\\n\\n        int256 sign = value == 0 ? int256(1) : value / value.abs().toInt256();\\n\\n        return magnitude.toInt256() * sign;\\n    }\\n\\n    /**\\n     * @dev Calculates the result of dividing the first number by the second number,\\n     * rounded up to the nearest integer.\\n     *\\n     * @param a the dividend\\n     * @param b the divisor\\n     * @return the result of dividing the first number by the second number, rounded up to the nearest integer\\n     */\\n    function roundUpDivision(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return (a + b - 1) / b;\\n    }\\n\\n    /**\\n     * Calculates the result of dividing the first number by the second number,\\n     * rounded up to the nearest integer.\\n     * The rounding is purely on the magnitude of a, if a is negative the result\\n     * is a larger magnitude negative\\n     *\\n     * @param a the dividend\\n     * @param b the divisor\\n     * @return the result of dividing the first number by the second number, rounded up to the nearest integer\\n     */\\n    function roundUpMagnitudeDivision(int256 a, uint256 b) internal pure returns (int256) {\\n        if (a < 0) {\\n            return (a - b.toInt256() + 1) / b.toInt256();\\n        }\\n\\n        return (a + b.toInt256() - 1) / b.toInt256();\\n    }\\n\\n    /**\\n     * Adds two numbers together and return a uint256 value, treating the second number as a signed integer.\\n     *\\n     * @param a the first number\\n     * @param b the second number\\n     * @return the result of adding the two numbers together\\n     */\\n    function sumReturnUint256(uint256 a, int256 b) internal pure returns (uint256) {\\n        if (b > 0) {\\n            return a + b.abs();\\n        }\\n\\n        return a - b.abs();\\n    }\\n\\n    /**\\n     * Adds two numbers together and return an int256 value, treating the second number as a signed integer.\\n     *\\n     * @param a the first number\\n     * @param b the second number\\n     * @return the result of adding the two numbers together\\n     */\\n    function sumReturnInt256(uint256 a, int256 b) internal pure returns (int256) {\\n        return a.toInt256() + b;\\n    }\\n\\n    /**\\n     * @dev Calculates the absolute difference between two numbers.\\n     *\\n     * @param a the first number\\n     * @param b the second number\\n     * @return the absolute difference between the two numbers\\n     */\\n    function diff(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a - b : b - a;\\n    }\\n\\n    /**\\n     * Adds two numbers together, the result is bounded to prevent overflows.\\n     *\\n     * @param a the first number\\n     * @param b the second number\\n     * @return the result of adding the two numbers together\\n     */\\n    function boundedAdd(int256 a, int256 b) internal pure returns (int256) {\\n        // if either a or b is zero or if the signs are different there should not be any overflows\\n        if (a == 0 || b == 0 || (a < 0 && b > 0) || (a > 0 && b < 0)) {\\n            return a + b;\\n        }\\n\\n        // if adding `b` to `a` would result in a value less than the min int256 value\\n        // then return the min int256 value\\n        if (a < 0 && b <= type(int256).min - a) {\\n            return type(int256).min;\\n        }\\n\\n        // if adding `b` to `a` would result in a value more than the max int256 value\\n        // then return the max int256 value\\n        if (a > 0 && b >= type(int256).max - a) {\\n            return type(int256).max;\\n        }\\n\\n        return a + b;\\n    }\\n\\n    /**\\n     * Returns a - b, the result is bounded to prevent overflows.\\n     * Note that this will revert if b is type(int256).min because of the usage of \\\"-b\\\".\\n     *\\n     * @param a the first number\\n     * @param b the second number\\n     * @return the bounded result of a - b\\n     */\\n    function boundedSub(int256 a, int256 b) internal pure returns (int256) {\\n        // if either a or b is zero or the signs are the same there should not be any overflow\\n        if (a == 0 || b == 0 || (a > 0 && b > 0) || (a < 0 && b < 0)) {\\n            return a - b;\\n        }\\n\\n        // if adding `-b` to `a` would result in a value greater than the max int256 value\\n        // then return the max int256 value\\n        if (a > 0 && -b >= type(int256).max - a) {\\n            return type(int256).max;\\n        }\\n\\n        // if subtracting `b` from `a` would result in a value less than the min int256 value\\n        // then return the min int256 value\\n        if (a < 0 && -b <= type(int256).min - a) {\\n            return type(int256).min;\\n        }\\n\\n        return a - b;\\n    }\\n\\n\\n    /**\\n     * Converts the given unsigned integer to a signed integer, using the given\\n     * flag to determine whether the result should be positive or negative.\\n     *\\n     * @param a the unsigned integer to convert\\n     * @param isPositive whether the result should be positive (if true) or negative (if false)\\n     * @return the signed integer representation of the given unsigned integer\\n     */\\n    function toSigned(uint256 a, bool isPositive) internal pure returns (int256) {\\n        if (isPositive) {\\n            return a.toInt256();\\n        } else {\\n            return -a.toInt256();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3848e1c51a6c77a1d6ec30bb052e97f6c39437110c773ebc06956ce5e4a54370\",\"license\":\"BUSL-1.1\"},\"contracts/utils/Cast.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Cast\\n * @dev Library for casting functions\\n */\\nlibrary Cast {\\n    function toBytes32(address value) internal pure returns (bytes32) {\\n        return bytes32(uint256(uint160(value)));\\n    }\\n}\\n\",\"keccak256\":\"0x873841fcb56173678e4584c2fcec648b98bc7d9f2c96906750791c19a3372c9b\",\"license\":\"BUSL-1.1\"},\"contracts/utils/EnumerableValues.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\n/**\\n * @title EnumerableValues\\n * @dev Library to extend the EnumerableSet library with functions to get\\n * valuesAt for a range\\n */\\nlibrary EnumerableValues {\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using EnumerableSet for EnumerableSet.UintSet;\\n\\n    /**\\n     * Returns an array of bytes32 values from the given set, starting at the given\\n     * start index and ending before the given end index.\\n     *\\n     * @param set The set to get the values from.\\n     * @param start The starting index.\\n     * @param end The ending index.\\n     * @return An array of bytes32 values.\\n     */\\n    function valuesAt(EnumerableSet.Bytes32Set storage set, uint256 start, uint256 end) internal view returns (bytes32[] memory) {\\n        uint256 max = set.length();\\n        if (end > max) { end = max; }\\n\\n        bytes32[] memory items = new bytes32[](end - start);\\n        for (uint256 i = start; i < end; i++) {\\n            items[i - start] = set.at(i);\\n        }\\n\\n        return items;\\n    }\\n\\n\\n    /**\\n     * Returns an array of address values from the given set, starting at the given\\n     * start index and ending before the given end index.\\n     *\\n     * @param set The set to get the values from.\\n     * @param start The starting index.\\n     * @param end The ending index.\\n     * @return An array of address values.\\n     */\\n    function valuesAt(EnumerableSet.AddressSet storage set, uint256 start, uint256 end) internal view returns (address[] memory) {\\n        uint256 max = set.length();\\n        if (end > max) { end = max; }\\n\\n        address[] memory items = new address[](end - start);\\n        for (uint256 i = start; i < end; i++) {\\n            items[i - start] = set.at(i);\\n        }\\n\\n        return items;\\n    }\\n\\n\\n    /**\\n     * Returns an array of uint256 values from the given set, starting at the given\\n     * start index and ending before the given end index, the item at the end index will not be returned.\\n     *\\n     * @param set The set to get the values from.\\n     * @param start The starting index (inclusive, item at the start index will be returned).\\n     * @param end The ending index (exclusive, item at the end index will not be returned).\\n     * @return An array of uint256 values.\\n     */\\n    function valuesAt(EnumerableSet.UintSet storage set, uint256 start, uint256 end) internal view returns (uint256[] memory) {\\n        if (start >= set.length()) {\\n            return new uint256[](0);\\n        }\\n\\n        uint256 max = set.length();\\n        if (end > max) { end = max; }\\n\\n        uint256[] memory items = new uint256[](end - start);\\n        for (uint256 i = start; i < end; i++) {\\n            items[i - start] = set.at(i);\\n        }\\n\\n        return items;\\n    }\\n}\\n\",\"keccak256\":\"0x1e525ad5645bc649551fa3a7d000af1cec96221d7fe1cdc17cedaf942b018f0d\",\"license\":\"BUSL-1.1\"},\"contracts/utils/PayableMulticall.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../error/ErrorUtils.sol\\\";\\n\\n/**\\n * @title PayableMulticall\\n * @dev Contract to help call multiple functions in a single transaction\\n * all function calls will have the original sender as the msg.sender value\\n * IMPORTANT: in the multicall, msg.value will be the same for each delegatecall\\n * extra care should be taken if msg.value is used in any of the functions of the inheriting contract\\n */\\nabstract contract PayableMulticall {\\n    /**\\n     * @dev Receives and executes a batch of function calls on this contract.\\n     */\\n    function multicall(bytes[] calldata data) external payable virtual returns (bytes[] memory results) {\\n        results = new bytes[](data.length);\\n\\n        for (uint256 i; i < data.length; i++) {\\n            (bool success, bytes memory result) = address(this).delegatecall(data[i]);\\n\\n            if (!success) {\\n                ErrorUtils.revertWithParsedMessage(result);\\n            }\\n\\n            results[i] = result;\\n        }\\n\\n        return results;\\n    }\\n}\\n\",\"keccak256\":\"0xb0857ac2d827a7108f3eead3bb5ca124859e1713719db91ca39cdb54413e1b99\",\"license\":\"BUSL-1.1\"},\"contracts/utils/Printer.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\n/**\\n * @title Printer\\n * @dev Library for console functions\\n */\\nlibrary Printer {\\n    using SafeCast for int256;\\n\\n    function log(string memory str) external pure {\\n        console.log(str);\\n    }\\n\\n    function log(string memory label, int256 value) internal pure {\\n        if (value < 0) {\\n            console.log(\\n                \\\"%s -%s\\\",\\n                label,\\n                (-value).toUint256()\\n            );\\n        } else {\\n            console.log(\\n                \\\"%s +%s\\\",\\n                label,\\n                value.toUint256()\\n            );\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x30ac001a3c592cf2c3efb89ae70b12e6a9c18f11cab1507a8861c36add24d91e\",\"license\":\"BUSL-1.1\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.22 <0.9.0;\\n\\nlibrary console {\\n    address constant CONSOLE_ADDRESS =\\n        0x000000000000000000636F6e736F6c652e6c6f67;\\n\\n    function _sendLogPayloadImplementation(bytes memory payload) internal view {\\n        address consoleAddress = CONSOLE_ADDRESS;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            pop(\\n                staticcall(\\n                    gas(),\\n                    consoleAddress,\\n                    add(payload, 32),\\n                    mload(payload),\\n                    0,\\n                    0\\n                )\\n            )\\n        }\\n    }\\n\\n    function _castToPure(\\n      function(bytes memory) internal view fnIn\\n    ) internal pure returns (function(bytes memory) pure fnOut) {\\n        assembly {\\n            fnOut := fnIn\\n        }\\n    }\\n\\n    function _sendLogPayload(bytes memory payload) internal pure {\\n        _castToPure(_sendLogPayloadImplementation)(payload);\\n    }\\n\\n    function log() internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n    }\\n    function logInt(int256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n    }\\n\\n    function logUint(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function logString(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function logBool(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function logAddress(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function logBytes(bytes memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n    }\\n\\n    function logBytes1(bytes1 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n    }\\n\\n    function logBytes2(bytes2 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n    }\\n\\n    function logBytes3(bytes3 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n    }\\n\\n    function logBytes4(bytes4 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n    }\\n\\n    function logBytes5(bytes5 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n    }\\n\\n    function logBytes6(bytes6 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n    }\\n\\n    function logBytes7(bytes7 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n    }\\n\\n    function logBytes8(bytes8 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n    }\\n\\n    function logBytes9(bytes9 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n    }\\n\\n    function logBytes10(bytes10 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n    }\\n\\n    function logBytes11(bytes11 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n    }\\n\\n    function logBytes12(bytes12 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n    }\\n\\n    function logBytes13(bytes13 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n    }\\n\\n    function logBytes14(bytes14 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n    }\\n\\n    function logBytes15(bytes15 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n    }\\n\\n    function logBytes16(bytes16 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n    }\\n\\n    function logBytes17(bytes17 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n    }\\n\\n    function logBytes18(bytes18 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n    }\\n\\n    function logBytes19(bytes19 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n    }\\n\\n    function logBytes20(bytes20 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n    }\\n\\n    function logBytes21(bytes21 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n    }\\n\\n    function logBytes22(bytes22 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n    }\\n\\n    function logBytes23(bytes23 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n    }\\n\\n    function logBytes24(bytes24 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n    }\\n\\n    function logBytes25(bytes25 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n    }\\n\\n    function logBytes26(bytes26 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n    }\\n\\n    function logBytes27(bytes27 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n    }\\n\\n    function logBytes28(bytes28 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n    }\\n\\n    function logBytes29(bytes29 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n    }\\n\\n    function logBytes30(bytes30 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n    }\\n\\n    function logBytes31(bytes31 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n    }\\n\\n    function logBytes32(bytes32 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n    }\\n\\n    function log(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function log(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function log(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function log(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function log(uint256 p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n}\\n\",\"keccak256\":\"0x7434453e6d3b7d0e5d0eb7846ffdbc27f0ccf3b163591263739b628074dc103a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106100d25760003560e01c80633914f2171461013f5780633e46b365146101525780634a4a7b041461016557806353ead2d3146101af578063660d0d67146101c2578063712182eb146101f65780637489ec231461020957806379a358a21461021c5780637d39aaf11461022f5780638e8400bc1461024257806393845e46146102635780639ff78c3014610297578063ac9650d8146102cb578063b5848305146102eb578063e6d66ac81461031f578063f82a227214610332578063f887ea401461034557600080fd5b3661013a5760006101027f0000000000000000000000000000000000000000000000000000000000000000610379565b9050336001600160a01b03821614610138573360405163738d28df60e11b815260040161012f91906128ff565b60405180910390fd5b005b600080fd5b61013861014d366004612938565b610414565b610138610160366004612955565b610477565b34801561017157600080fd5b506101997f000000000000000000000000000000000000000000000000000000000000000081565b6040516101a691906128ff565b60405180910390f35b6101386101bd36600461298a565b6104de565b3480156101ce57600080fd5b506101997f000000000000000000000000000000000000000000000000000000000000000081565b610138610204366004612938565b610528565b6101386102173660046129b6565b61057d565b61013861022a36600461298a565b61072f565b61013861023d36600461298a565b610790565b6102556102503660046129cf565b6107cc565b6040519081526020016101a6565b34801561026f57600080fd5b506101997f000000000000000000000000000000000000000000000000000000000000000081565b3480156102a357600080fd5b506101997f000000000000000000000000000000000000000000000000000000000000000081565b6102de6102d9366004612a26565b610a7e565b6040516101a69190612b3f565b3480156102f757600080fd5b506101997f000000000000000000000000000000000000000000000000000000000000000081565b61013861032d366004612b52565b610b9c565b610138610340366004612bac565b610c3e565b34801561035157600080fd5b506101997f000000000000000000000000000000000000000000000000000000000000000081565b6000816001600160a01b03166321f8a72160405160200161039990612c01565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b81526004016103cd91815260200190565b602060405180830381865afa1580156103ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061040e9190612c29565b92915050565b61041c610dd5565b336104697f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000008385610e2e565b506104746001600055565b50565b61047f610dd5565b336104ce7f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000083878787610f88565b506104d96001600055565b505050565b6104e6610dd5565b6104ef8261114c565b61051a7f00000000000000000000000000000000000000000000000000000000000000008383611173565b6105246001600055565b5050565b610530610dd5565b336104697f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000838561124d565b610585610dd5565b60005a9050600073__$9dcb75ef0bb6c4288f2ccffe7dc492c4eb$__63fdfc26f37f0000000000000000000000000000000000000000000000000000000000000000856040518363ffffffff1660e01b81526004016105e5929190612c46565b600060405180830381865af4158015610602573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261062a9190810190612ef4565b9050600061063782515190565b6001600160a01b03160361065e57604051631630779760e01b815260040160405180910390fd5b61069461066a82515190565b6040516020016106799061302a565b6040516020818303038152906040528051906020012061136d565b604051637489ec2360e01b8152600481018490527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690637489ec2390602401600060405180830381600087803b1580156106f657600080fd5b505af115801561070a573d6000803e3d6000fd5b5050505061072361071a82515190565b33846000611418565b50506104746001600055565b610737610dd5565b336107857f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000838686611828565b506105246001600055565b610798610dd5565b6107a18261114c565b61051a7f000000000000000000000000000000000000000000000000000000000000000083836119e1565b60006107d6610dd5565b60005a90506107ee846040516020016106799061302a565b6001600160a01b038416610802848061305b565b610810906020810190612938565b6001600160a01b03161461085257610828838061305b565b610836906020810190612938565b846040516325d55c0b60e11b815260040161012f92919061307b565b6000610866610120850161010086016130b6565b600781111561087757610877613095565b14806108a557506001610892610120850161010086016130b6565b60078111156108a3576108a3613095565b145b806108d2575060026108bf610120850161010086016130b6565b60078111156108d0576108d0613095565b145b806108ff575060036108ec610120850161010086016130b6565b60078111156108fd576108fd613095565b145b156109cb576001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016631b82787861093d858061305b565b61094e9060c081019060a001612938565b604080516001600160e01b031960e085901b168152610998929189917f0000000000000000000000000000000000000000000000000000000000000000918a0135906004016130d3565b600060405180830381600087803b1580156109b257600080fd5b505af11580156109c6573d6000803e3d6000fd5b505050505b6040516323a1002f60e21b81526000906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690638e8400bc90610a1c9088908890600401613274565b6020604051808303816000875af1158015610a3b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a5f91906133aa565b9050610a7185338460a0880135611418565b91505061040e6001600055565b6060816001600160401b03811115610a9857610a98612c5f565b604051908082528060200260200182016040528015610acb57816020015b6060815260200190600190039081610ab65790505b50905060005b82811015610b955760008030868685818110610aef57610aef6133c3565b9050602002810190610b0191906133d9565b604051610b0f92919061341f565b600060405180830381855af49150503d8060008114610b4a576040519150601f19603f3d011682016040523d82523d6000602084013e610b4f565b606091505b509150915081610b6257610b6281611a64565b80848481518110610b7557610b756133c3565b602002602001018190525050508080610b8d90613445565b915050610ad1565b5092915050565b610ba4610dd5565b610bad8261114c565b6040516303704f0f60e31b815233906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690631b82787890610c019087908590889088906004016130d3565b600060405180830381600087803b158015610c1b57600080fd5b505af1158015610c2f573d6000803e3d6000fd5b50505050506104d96001600055565b610c46610dd5565b60005a9050600073__$9dcb75ef0bb6c4288f2ccffe7dc492c4eb$__63fdfc26f37f00000000000000000000000000000000000000000000000000000000000000008a6040518363ffffffff1660e01b8152600401610ca6929190612c46565b600060405180830381865af4158015610cc3573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610ceb9190810190612ef4565b90506000610cf882515190565b6001600160a01b031603610d1f57604051631630779760e01b815260040160405180910390fd5b610d2b61066a82515190565b60405163f302f86f60e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063f302f86f90610d83908b908b908b908b908b908b908a90600401613519565b600060405180830381600087803b158015610d9d57600080fd5b505af1158015610db1573d6000803e3d6000fd5b50505050610dc161071a82515190565b5050610dcd6001600055565b505050505050565b600260005403610e275760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161012f565b6002600055565b6000610e3983611a9d565b60405163b348e63960e01b81529091506001600160a01b0386169063b348e63990610e6a9084908690600401613648565b600060405180830381600087803b158015610e8457600080fd5b505af1158015610e98573d6000803e3d6000fd5b50505050610ea4612801565b8051610eb1906002611b17565b6040805180820190915260078152661858d8dbdd5b9d60ca1b60208201528151610ede9160009087611b7c565b60408051808201909152600a8152691cdd589858d8dbdd5b9d60b21b60208201528151610f0e9160019086611b7c565b846001600160a01b03166363d16363610f2686611bd9565b610f2f86611bd9565b846040518463ffffffff1660e01b8152600401610f4e93929190613e3e565b600060405180830381600087803b158015610f6857600080fd5b505af1158015610f7c573d6000803e3d6000fd5b50505050505050505050565b6000610f95858585611be5565b604051637152429d60e11b815260048101829052602481018490529091506001600160a01b0388169063e2a4853a906044016020604051808303816000875af1158015610fe6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061100a91906133aa565b50611013612801565b8051611020906002611b17565b6040805180820190915260078152661858d8dbdd5b9d60ca1b6020820152815161104d9160009089611b7c565b60408051808201909152600a8152691cdd589858d8dbdd5b9d60b21b6020820152815161107d9160019088611b7c565b602081015161108d906001611b17565b6110d060006040518060400160405280600f81526020016e1b585e105b1b1bddd95910dbdd5b9d608a1b815250858460200151611c8b909392919063ffffffff16565b866001600160a01b03166363d163636110e888611bd9565b6110f188611bd9565b846040518463ffffffff1660e01b815260040161111093929190613e81565b600060405180830381600087803b15801561112a57600080fd5b505af115801561113e573d6000803e3d6000fd5b505050505050505050505050565b6001600160a01b0381166104745760405163d551823d60e01b815260040160405180910390fd5b8060000361118057505050565b6111898261114c565b6000836001600160a01b031663bd02d0f56040516020016111a990613edf565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b81526004016111dd91815260200190565b602060405180830381865afa1580156111fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061121e91906133aa565b90506000806000806000868887f19050801561123b575050505050565b6112468585856119e1565b5050505050565b600061125883611a9d565b6040516369721d4160e01b81529091506001600160a01b038616906369721d41906112899084908690600401613648565b600060405180830381600087803b1580156112a357600080fd5b505af11580156112b7573d6000803e3d6000fd5b505050506112c3612801565b80516112d0906002611b17565b6040805180820190915260078152661858d8dbdd5b9d60ca1b602082015281516112fd9160009087611b7c565b60408051808201909152600a8152691cdd589858d8dbdd5b9d60b21b6020820152815161132d9160019086611b7c565b846001600160a01b03166363d1636361134586611bd9565b61134e86611bd9565b846040518463ffffffff1660e01b8152600401610f4e93929190613f16565b61139f7f000000000000000000000000000000000000000000000000000000000000000061139a30611cde565b611d1f565b336113cb7f00000000000000000000000000000000000000000000000000000000000000008483611d4a565b6104d97f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000858486611de8565b60006114457f00000000000000000000000000000000000000000000000000000000000000008686611fbe565b9050806000036114555750611822565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166321f8a72160405160200161149590612c01565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b81526004016114c991815260200190565b602060405180830381865afa1580156114e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061150a9190612c29565b905081816001600160a01b031663dd62ed3e887f00000000000000000000000000000000000000000000000000000000000000006040518363ffffffff1660e01b815260040161155b92919061307b565b602060405180830381865afa158015611578573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061159c91906133aa565b10156115a9575050611822565b6040516370a0823160e01b815282906001600160a01b038316906370a08231906115d7908a906004016128ff565b602060405180830381865afa1580156115f4573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061161891906133aa565b1015611625575050611822565b6000833a5a6116349088613f5c565b61163e9190613f6f565b6116489190613f86565b905082811015611656578092505b6040516303704f0f60e31b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690631b827878906116a89085908b90309089906004016130d3565b600060405180830381600087803b1580156116c257600080fd5b505af11580156116d6573d6000803e3d6000fd5b505050506117067f0000000000000000000000000000000000000000000000000000000000000000838886612040565b61170e612801565b805161171b906002611b17565b6040805180820190915260078152661858d8dbdd5b9d60ca1b60208201528151611748916000908b611b7c565b60408051808201909152600a8152691cdd589858d8dbdd5b9d60b21b60208201528151611778916001908a611b7c565b6020810151611788906001611b17565b6117c2600060405180604001604052806006815260200165185b5bdd5b9d60d21b815250868460200151611c8b909392919063ffffffff16565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166363d163636117fa8a611bd9565b6118038a611bd9565b846040518463ffffffff1660e01b815260040161111093929190613f99565b50505050565b60006118348484612166565b604051637152429d60e11b815260048101829052602481018490529091506001600160a01b0387169063e2a4853a906044016020604051808303816000875af1158015611885573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118a991906133aa565b506118b2612801565b80516118bf906002611b17565b6040805180820190915260078152661858d8dbdd5b9d60ca1b602082015281516118ec9160009088611b7c565b60408051808201909152600a8152691cdd589858d8dbdd5b9d60b21b6020820152815161191c9160019087611b7c565b602081015161192c906001611b17565b611966600060405180604001604052806006815260200165185b5bdd5b9d60d21b815250858460200151611c8b909392919063ffffffff16565b856001600160a01b03166363d1636361197e87611bd9565b61198787611bd9565b846040518463ffffffff1660e01b81526004016119a693929190613fe2565b600060405180830381600087803b1580156119c057600080fd5b505af11580156119d4573d6000803e3d6000fd5b5050505050505050505050565b806000036119ee57505050565b6119f78261114c565b6000611a0284610379565b9050806001600160a01b031663d0e30db0836040518263ffffffff1660e01b81526004016000604051808303818588803b158015611a3f57600080fd5b505af1158015611a53573d6000803e3d6000fd5b5050505050611822848285856121ff565b600080611a7083612449565b915091508015611a94578160405162461bcd60e51b815260040161012f9190614034565b6104d9836124d9565b6000604051602001611ad2906020808252600f908201526e14d5509050d0d3d5539517d31254d5608a1b604082015260600190565b6040516020818303038152906040528051906020012082604051602001611afa929190613648565b604051602081830303815290604052805190602001209050919050565b806001600160401b03811115611b2f57611b2f612c5f565b604051908082528060200260200182016040528015611b7557816020015b604080518082019091526060815260006020820152815260200190600190039081611b4d5790505b5090915250565b8184600001518481518110611b9357611b936133c3565b6020026020010151600001819052508084600001518481518110611bb957611bb96133c3565b6020908102919091018101516001600160a01b0390921691015250505050565b6001600160a01b031690565b6000604051602001611c349060208082526023908201527f4d41585f414c4c4f5745445f5355424143434f554e545f414354494f4e5f434f60408201526215539560ea1b606082015260800190565b60408051808303601f190181528282528051602091820120818401526001600160a01b03968716838301529490951660608201526080808201939093528451808203909301835260a0019093528051910120919050565b8184600001518481518110611ca257611ca26133c3565b6020026020010151600001819052508084600001518481518110611cc857611cc86133c3565b6020026020010151602001818152505050505050565b6000604051602001611ad2906020808252601b908201527a14d5509050d0d3d5539517d191505515549157d11254d050931151602a1b604082015260600190565b611d2982826124e2565b156105245760405163dd70e0c960e01b81526004810182905260240161012f565b6000611d5583611a9d565b60405163c769d1a160e01b81529091506001600160a01b0385169063c769d1a190611d869084908690600401613648565b602060405180830381865afa158015611da3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dc79190614047565b6118225782826040516326f8290f60e21b815260040161012f92919061307b565b6000611df5848484612555565b60405163340dbab360e01b815260048101829052600160248201529091506000906001600160a01b0388169063340dbab3906044016020604051808303816000875af1158015611e49573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e6d91906133aa565b9050611e7c8786868685612592565b611e84612801565b8051611e91906002611b17565b6040805180820190915260078152661858d8dbdd5b9d60ca1b60208201528151611ebe9160009089611b7c565b60408051808201909152600a8152691cdd589858d8dbdd5b9d60b21b60208201528151611eee9160019088611b7c565b6020810151611efe906001611b17565b611f3b6000604051806040016040528060098152602001686e65787456616c756560b81b815250848460200151611c8b909392919063ffffffff16565b6080810151611f4b906001611b17565b60408051808201909152600a815269616374696f6e5479706560b01b60208201526080820151611f7e9160009087611c8b565b866001600160a01b03166363d16363611f9688611bd9565b611f9f88611bd9565b846040518463ffffffff1660e01b815260040161111093929190614064565b600080611fcb8484612166565b60405163bd02d0f560e01b8152600481018290529091506001600160a01b0386169063bd02d0f590602401602060405180830381865afa158015612013573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061203791906133aa565b95945050505050565b80156118225761204f8261114c565b604051632e1a7d4d60e01b8152600481018290526001600160a01b03841690632e1a7d4d90602401600060405180830381600087803b15801561209157600080fd5b505af11580156120a5573d6000803e3d6000fd5b505050506000846001600160a01b031663bd02d0f56040516020016120c990613edf565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b81526004016120fd91815260200190565b602060405180830381865afa15801561211a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061213e91906133aa565b90506000806000806000868887f19050801561215b575050611822565b610dcd8685856119e1565b60006040516020016121a9906020808252601d908201527f5355424143434f554e545f4155544f5f544f505f55505f414d4f554e54000000604082015260600190565b60408051601f198184030181528282528051602091820120908301526001600160a01b03808616918301919091528316606082015260800160405160208183030381529060405280519060200120905092915050565b80156118225761220e8261114c565b6000846001600160a01b031663bd02d0f56122288661265b565b6040518263ffffffff1660e01b815260040161224691815260200190565b602060405180830381865afa158015612263573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061228791906133aa565b9050806000036122ac5783604051634fe14bfd60e11b815260040161012f91906128ff565b60006122ba85858585612699565b50905080156122ca575050611822565b6000866001600160a01b03166321f8a72160405160200161230e906020808252600f908201526e484f4c44494e475f4144445245535360881b604082015260600190565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b815260040161234291815260200190565b602060405180830381865afa15801561235f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123839190612c29565b90506001600160a01b0381166123ac57604051633a6de2f560e21b815260040160405180910390fd5b6000806123bb88848888612699565b9150915081156123cf575050505050611822565b60006123da82612449565b5090507fc9f14d9a0a9b46470c7c0b6c508f8283abaab7f795f153953c58cd4250824dae818360405161240e9291906140b7565b60405180910390a160405163012f3b8f60e71b81526001600160a01b03808b166004830152891660248201526044810188905260640161012f565b60606000604483511015612470575050604080516020810190915260008082529092909150565b600061247d846020015190565b90506307b9e43360e51b6001600160e01b03198216016124bc57600484019350838060200190518101906124b191906140dc565b946001945092505050565b600060405180602001604052806000815250909250925050915091565b80518060208301fd5b604051633d70e7e560e11b8152600481018290526000906001600160a01b03841690637ae1cfca90602401602060405180830381865afa15801561252a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061254e9190614047565b9392505050565b6000604051602001611c349060208082526017908201527614d5509050d0d3d5539517d050d51253d397d0d3d55395604a1b604082015260600190565b600061259f858585611be5565b60405163bd02d0f560e01b8152600481018290529091506000906001600160a01b0388169063bd02d0f590602401602060405180830381865afa1580156125ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061260e91906133aa565b9050808311156126525760405163519ba75360e01b81526001600160a01b03808816600483015286166024820152604481018490526064810182905260840161012f565b50505050505050565b6000604051602001611ad2906020808252601890820152771513d2d15397d514905394d1915497d1d054d7d31253525560421b604082015260600190565b60006060600063a9059cbb60e01b86866040516024016126ba929190612c46565b604051602081830303815290604052906001600160e01b0319166020820180516001600160e01b0383818316178352505050509050600080886001600160a01b0316868460405161270b919061416f565b60006040518083038160008787f1925050503d8060008114612749576040519150601f19603f3d011682016040523d82523d6000602084013e61274e565b606091505b509150915081156127ef5780516000036127ac576001600160a01b0389163b6127ac5760006040518060400160405280601481526020017310d85b1b081d1bc81b9bdb8b58dbdb9d1c9858dd60621b815250945094505050506127f8565b600081511180156127ce5750808060200190518101906127cc9190614047565b155b156127e1576000945092506127f8915050565b6001945092506127f8915050565b60009450925050505b94509492505050565b604080516101208101909152606060e0820181815261010083019190915281908152602001612843604051806040016040528060608152602001606081525090565b8152602001612865604051806040016040528060608152602001606081525090565b8152602001612887604051806040016040528060608152602001606081525090565b81526020016128a9604051806040016040528060608152602001606081525090565b81526020016128cb604051806040016040528060608152602001606081525090565b81526020016128ed604051806040016040528060608152602001606081525090565b905290565b6001600160a01b03169052565b6001600160a01b0391909116815260200190565b6001600160a01b038116811461047457600080fd5b803561293381612913565b919050565b60006020828403121561294a57600080fd5b813561254e81612913565b60008060006060848603121561296a57600080fd5b833561297581612913565b95602085013595506040909401359392505050565b6000806040838503121561299d57600080fd5b82356129a881612913565b946020939093013593505050565b6000602082840312156129c857600080fd5b5035919050565b600080604083850312156129e257600080fd5b82356129ed81612913565b915060208301356001600160401b03811115612a0857600080fd5b83016101c08186031215612a1b57600080fd5b809150509250929050565b60008060208385031215612a3957600080fd5b82356001600160401b0380821115612a5057600080fd5b818501915085601f830112612a6457600080fd5b813581811115612a7357600080fd5b8660208260051b8501011115612a8857600080fd5b60209290920196919550909350505050565b60005b83811015612ab5578181015183820152602001612a9d565b50506000910152565b60008151808452612ad6816020860160208601612a9a565b601f01601f19169290920160200192915050565b600081518084526020808501808196508360051b8101915082860160005b85811015612b32578284038952612b20848351612abe565b98850198935090840190600101612b08565b5091979650505050505050565b60208152600061254e6020830184612aea565b600080600060608486031215612b6757600080fd5b8335612b7281612913565b92506020840135612b8281612913565b929592945050506040919091013590565b801515811461047457600080fd5b803561293381612b93565b60008060008060008060c08789031215612bc557600080fd5b863595506020870135945060408701359350606087013592506080870135915060a0870135612bf381612b93565b809150509295509295509295565b60208082526003908201526215d39560ea1b604082015260600190565b805161293381612913565b600060208284031215612c3b57600080fd5b815161254e81612913565b6001600160a01b03929092168252602082015260400190565b634e487b7160e01b600052604160045260246000fd5b60405161016081016001600160401b0381118282101715612c9857612c98612c5f565b60405290565b604051606081016001600160401b0381118282101715612c9857612c98612c5f565b60405161010081016001600160401b0381118282101715612c9857612c98612c5f565b604051601f8201601f191681016001600160401b0381118282101715612d0b57612d0b612c5f565b604052919050565b600082601f830112612d2457600080fd5b815160206001600160401b03821115612d3f57612d3f612c5f565b8160051b612d4e828201612ce3565b9283528481018201928281019087851115612d6857600080fd5b83870192505b84831015612d90578251612d8181612913565b82529183019190830190612d6e565b979650505050505050565b6008811061047457600080fd5b805161293381612d9b565b6003811061047457600080fd5b805161293381612db3565b60006101608284031215612dde57600080fd5b612de6612c75565b9050612df182612da8565b8152612dff60208301612dc0565b602082015260408201516040820152606082015160608201526080820151608082015260a082015160a082015260c082015160c082015260e082015160e082015261010080830151818301525061012080830151818301525061014080830151818301525092915050565b600060808284031215612e7c57600080fd5b604051608081016001600160401b0381118282101715612e9e57612e9e612c5f565b80604052508091508251612eb181612b93565b81526020830151612ec181612b93565b60208201526040830151612ed481612b93565b60408201526060830151612ee781612b93565b6060919091015292915050565b600060208284031215612f0657600080fd5b81516001600160401b0380821115612f1d57600080fd5b908301906102008286031215612f3257600080fd5b612f3a612c9e565b825182811115612f4957600080fd5b83016101008188031215612f5c57600080fd5b612f64612cc0565b612f6d82612c1e565b8152612f7b60208301612c1e565b6020820152612f8c60408301612c1e565b6040820152612f9d60608301612c1e565b6060820152612fae60808301612c1e565b6080820152612fbf60a08301612c1e565b60a0820152612fd060c08301612c1e565b60c082015260e082015184811115612fe757600080fd5b612ff389828501612d13565b60e0830152508252506130098660208501612dcb565b602082015261301c866101808501612e6a565b604082015295945050505050565b60208082526017908201527629aaa120a1a1a7aaa72a2fa7a92222a92fa0a1aa24a7a760491b604082015260600190565b6000823560de1983360301811261307157600080fd5b9190910192915050565b6001600160a01b0392831681529116602082015260400190565b634e487b7160e01b600052602160045260246000fd5b803561293381612d9b565b6000602082840312156130c857600080fd5b813561254e81612d9b565b6001600160a01b039485168152928416602084015292166040820152606081019190915260800190565b6000808335601e1984360301811261311457600080fd5b83016020810192503590506001600160401b0381111561313357600080fd5b8060051b360382131561314557600080fd5b9250929050565b8183526000602080850194508260005b8581101561318a57813561316f81612913565b6001600160a01b03168752958201959082019060010161315c565b509495945050505050565b600081356131a281612913565b6001600160a01b0390811684526020830135906131be82612913565b90811660208501526040830135906131d582612913565b90811660408501526060830135906131ec82612913565b908116606085015260808301359061320382612913565b16608084015261321560a08301612928565b61322260a08501826128f2565b5061323060c08301836130fd565b60e060c086015261203760e08601828461314c565b6008811061325557613255613095565b9052565b803561293381612db3565b6003811061325557613255613095565b6001600160a01b038316815260406020820152600082353684900360de1901811261329e57600080fd5b6101c08060408501526132b76102008501868401613195565b91506133086060850160208701803582526020810135602083015260408101356040830152606081013560608301526080810135608083015260a081013560a083015260c081013560c08301525050565b61331561010086016130ab565b61014061332481870183613245565b6133316101208801613259565b915061016061334281880184613264565b61334d828901612ba1565b925061018091506133618288018415159052565b61336c818901612ba1565b9250506101a061337f8188018415159052565b61338a828901612ba1565b151593870193909352505093909301356101e09092019190915250919050565b6000602082840312156133bc57600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b6000808335601e198436030181126133f057600080fd5b8301803591506001600160401b0382111561340a57600080fd5b60200191503681900382131561314557600080fd5b8183823760009101908152919050565b634e487b7160e01b600052601160045260246000fd5b6000600182016134575761345761342f565b5060010190565b600081518084526020808501945080840160005b8381101561318a5781516001600160a01b031687529582019590820190600101613472565b6134a2828251613245565b60208101516134b46020840182613264565b5060408101516040830152606081015160608301526080810151608083015260a081015160a083015260c081015160c083015260e081015160e08301526101008082015181840152506101208082015181840152506101408082015181840152505050565b87815286602082015285604082015284606082015283608082015282151560a082015260e060c08201526000825161020060e084015260018060a01b03808251166102e0850152806020830151166103008501525060408101516135816103208501826128f2565b5060608101516135956103408501826128f2565b5060808101516135a96103608501826128f2565b5060a08101516135bd6103808501826128f2565b5060c08101516135d16103a08501826128f2565b5060e001516101006103c084018190526135ef6103e085018361345e565b9150602085015161360282860182613497565b505060408481015180511515610260860152602081015115156102808601529081015115156102a0850152606081015115156102c0850152509998505050505050505050565b9182526001600160a01b0316602082015260400190565b600081518084526020808501808196508360051b8101915082860160005b85811015612b3257828403895281516040815181875261369f82880182612abe565b915050868201519150858103878701526136b9818361345e565b9a87019a955050509084019060010161367d565b60006040808401835182865281815180845260608801915060608160051b89010193506020808401935060005b8281101561374457898603605f190184528451805188885261371e89890182612abe565b918401516001600160a01b031697840197909752955093810193928101926001016136fa565b50808801519550888503818a015250505050612037818361365f565b600081518084526020808501808196508360051b810191508286016000805b868110156137f2578385038a528251604081518188526137a182890182612abe565b92890151888403898b01528051808552908a01938693508a0191505b808310156137dd57835182529289019260019290920191908901906137bd565b509b88019b965050509185019160010161377f565b509298975050505050505050565b60006040808401835182865281815180845260608801915060608160051b89010193506020808401935060005b8281101561386e57898603605f190184528451805188885261385189890182612abe565b91840151978401979097529550938101939281019260010161382d565b50808801519550888503818a0152505050506120378183613760565b60006040808401835182865281815180845260608801915060608160051b89010193506020808401935060005b8281101561386e57898603605f19018452845180518888526138db89890182612abe565b9184015197840197909752955093810193928101926001016138b7565b600081518084526020808501808196508360051b810191508286016000805b868110156137f2578385038a5282516040815181885261393982890182612abe565b92890151888403898b01528051808552908a01938693508a0191505b8083101561397757835115158252928901926001929092019190890190613955565b509b88019b9650505091850191600101613917565b60006040808401835182865281815180845260608801915060608160051b89010193506020808401935060005b828110156139fc57898603605f19018452845180518888526139dd89890182612abe565b91840151151597840197909752955093810193928101926001016139b9565b50808801519550888503818a01525050505061203781836138f8565b600081518084526020808501808196508360051b810191508286016000805b868110156137f2578385038a52825160408151818852613a5982890182612abe565b92890151888403898b01528051808552908a01938693508a0191505b80831015613a955783518252928901926001929092019190890190613a75565b509b88019b9650505091850191600101613a37565b60006040808401835182865281815180845260608801915060608160051b89010193506020808401935060005b82811015613b1857898603605f1901845284518051888852613afb89890182612abe565b918401519784019790975295509381019392810192600101613ad7565b50808801519550888503818a0152505050506120378183613a18565b600081518084526020808501808196508360051b8101915082860160005b85811015612b32578284038952815160408151818752613b7482880182612abe565b91505086820151915085810387870152613b8e8183612aea565b9a87019a9550505090840190600101613b52565b60006040808401835182865281815180845260608801915060608160051b89010193506020808401935060005b82811015613c1f57898603605f1901845284518051888852613bf389890182612abe565b9184015188830389860152919050613c0b8183612abe565b975050509381019392810192600101613bcf565b50808801519550888503818a0152505050506120378183613b34565b600081518084526020808501808196506005915083821b81018387016000805b87811015613ce6578484038b52825160408151818752613c7d82880182612abe565b928a0151878403888c01528051808552908b019392508a83019150808a1b83018b01865b82811015613ccf57601f19858303018452613cbd828751612abe565b958d0195938d01939150600101613ca1565b509e8b019e97505050938801935050600101613c5b565b50919998505050505050505050565b60006040808401835182865281815180845260608801915060608160051b89010193506020808401935060005b82811015613d7257898603605f1901845284518051888852613d4689890182612abe565b9184015188830389860152919050613d5e8183612abe565b975050509381019392810192600101613d22565b50808801519550888503818a0152505050506120378183613c3b565b6000815160e08452613da360e08501826136cd565b905060208301518482036020860152613dbc8282613800565b91505060408301518482036040860152613dd6828261388a565b91505060608301518482036060860152613df0828261398c565b91505060808301518482036080860152613e0a8282613aaa565b91505060a083015184820360a0860152613e248282613ba2565b91505060c083015184820360c08601526120378282613cf5565b60808152600d60808201526c10591914dd589858d8dbdd5b9d609a1b60a082015283602082015282604082015260c06060820152600061203760c0830184613d8e565b60808152602260808201527f5365744d6178416c6c6f7765645375626163636f756e74416374696f6e436f7560a0820152611b9d60f21b60c082015283602082015282604082015260e06060820152600061203760e0830184613d8e565b6020808252601f908201527f4e41544956455f544f4b454e5f5452414e534645525f4741535f4c494d495400604082015260600190565b60808152601060808201526f14995b5bdd9954dd589858d8dbdd5b9d60821b60a082015283602082015282604082015260c06060820152600061203760c0830184613d8e565b8181038181111561040e5761040e61342f565b808202811582820484141761040e5761040e61342f565b8082018082111561040e5761040e61342f565b60808152601360808201527205375626163636f756e744175746f546f70557606c1b60a082015283602082015282604082015260c06060820152600061203760c0830184613d8e565b60808152601c60808201527b14d95d14dd589858d8dbdd5b9d105d5d1bd51bdc155c105b5bdd5b9d60221b60a082015283602082015282604082015260c06060820152600061203760c0830184613d8e565b60208152600061254e6020830184612abe565b60006020828403121561405957600080fd5b815161254e81612b93565b60808152601e60808201527f496e6372656d656e745375626163636f756e74416374696f6e436f756e74000060a082015283602082015282604082015260c06060820152600061203760c0830184613d8e565b6040815260006140ca6040830185612abe565b82810360208401526120378185612abe565b6000602082840312156140ee57600080fd5b81516001600160401b038082111561410557600080fd5b818401915084601f83011261411957600080fd5b81518181111561412b5761412b612c5f565b61413e601f8201601f1916602001612ce3565b915080825285602082850101111561415557600080fd5b614166816020840160208601612a9a565b50949350505050565b60008251613071818460208701612a9a56fea26469706673582212208460225a16613d359eeef0a8ecde75c99db228cf673c2052fe3ced1c9ab05d7d64736f6c63430008120033",
  "libraries": {
    "OrderStoreUtils": "0x67040c411C1b3195361801E9Ad8a91D1Fe9C0BC2"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "multicall(bytes[])": {
        "details": "Receives and executes a batch of function calls on this contract."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 115,
        "contract": "contracts/router/SubaccountRouter.sol:SubaccountRouter",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
